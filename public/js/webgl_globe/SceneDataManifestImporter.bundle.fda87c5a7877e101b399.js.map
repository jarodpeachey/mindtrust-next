{"version":3,"sources":["webpack:///./node_modules/@polygonjs/polygonjs/src/engine/io/manifest/import/SceneData.ts"],"names":["SceneDataManifestImporter","import_data","editorMode","manifest","urlPrefix","node_paths","Object","keys","nodes","node_urls","node_path","url","push","all_urls","root","properties","now","Date","node_url","promises","map","fetch","responses","Promise","all","jsons","response","json","assemble_data","response_offset","json_by_name","manifest_nodes","i","length","manifest_name","this","assemble","scene_data","ui","insert_child_data","data","path","elements","split","parent_name","shift","path_without_parent","join","parent_data"],"mappings":"oHAsBA,iEAAO,MAAMA,EACZ,6BAA6BC,GACE,MAA1BA,EAAYC,aACfD,EAAYC,YAAa,GAE1B,MAAM,SAACC,EAAQ,UAAEC,GAAaH,EACxBI,EAAaC,OAAOC,KAAKJ,EAASK,OAClCC,EAAsB,GAC5B,IAAK,IAAIC,KAAaL,EAAY,CACjC,MACMM,EAAM,GAAGP,UAAkBM,YADfP,EAASK,MAAME,KAEjCD,EAAUG,KAAKD,GAEhB,MAEME,EAAW,CAFA,GAAGT,iBAAyBD,EAASW,OAC/B,GAAGV,uBAA+BD,EAASY,cAIlE,GAAId,EAAYC,WAAY,CAC3B,MAAMc,EAAMC,KAAKD,MACjBH,EAASD,KAAK,GAAGR,eAAuBY,KAKzC,IAAK,IAAIE,KAAYT,EACpBI,EAASD,KAAKM,GAGf,MAAMC,EAAWN,EAASO,IAAKT,GAAQU,MAAMV,IACvCW,QAAkBC,QAAQC,IAAIL,GAE9BM,EAAQ,GACd,IAAK,IAAIC,KAAYJ,EACpBG,EAAMb,WAAWc,EAASC,QAG3B,MAAMC,EAAmC,CACxCd,KAAMW,EAAM,GACZV,WAAYU,EAAM,IAEnB,IAAII,EAAkB,EAClB5B,EAAYC,aACf0B,EAAkB,GAAIH,EAAM,GAC5BI,GAAmB,GAGpB,MAAMC,EAAuC,GACvCC,EAAiBzB,OAAOC,KAAKJ,EAASK,OAC5C,IAAK,IAAIwB,EAAI,EAAGA,EAAID,EAAeE,OAAQD,IAAK,CAC/C,MAAME,EAAgBH,EAAeC,GAC/BL,EAAOF,EAAMO,EAAIH,GACvBC,EAAaI,GAAiBP,EAG/B,OAAOQ,KAAKC,SAASR,EAAeG,EAAgBD,GAGrD,sBACCF,EACAG,EACAD,GAEA,MAAMO,EAAoC,CACzCvB,KAAMc,EAAcd,KACpBC,WAAYa,EAAcb,WAC1BuB,GAAIV,EAAcU,IAGnB,IAAK,IAAIN,EAAI,EAAGA,EAAID,EAAeE,OAAQD,IAAK,CAC/C,MAAME,EAAgBH,EAAeC,GAC/BL,EAAOG,EAAaI,GAC1BC,KAAKI,kBAAkBF,EAAWvB,KAAMoB,EAAeP,GAExD,OAAOU,EAGA,yBAAyBG,EAAWC,EAAcd,GACzD,MAAMe,EAAWD,EAAKE,MAAM,KAC5B,GAAuB,GAAnBD,EAAST,OACPO,EAAKhC,QACTgC,EAAKhC,MAAQ,IAEdgC,EAAKhC,MAAMiC,GAAQd,MACb,CACN,MAAMiB,EAAsBF,EAASG,QAC/BC,EAA8BJ,EAASK,KAAK,KAC5CC,EAAcR,EAAKhC,MAAMoC,GAC/BT,KAAKI,kBAAkBS,EAAaF,EAAqBnB","file":"SceneDataManifestImporter.bundle.fda87c5a7877e101b399.js","sourcesContent":["import {PolyDictionary} from '../../../../types/GlobalTypes';\nimport {NodeJsonExporterData, NodeJsonExporterUIData} from '../../json/export/Node';\nimport {SceneJsonExporterData, SceneJsonExporterDataProperties} from '../../json/export/Scene';\n\nexport type ManifestNodesData = PolyDictionary<string>;\nexport interface ManifestContent {\n\tproperties: string;\n\troot: string;\n\tnodes: ManifestNodesData;\n}\ninterface ImportData {\n\turlPrefix: string;\n\tmanifest: ManifestContent;\n\teditorMode?: boolean;\n}\n\nexport interface SceneDataElements {\n\troot: NodeJsonExporterData;\n\tproperties: SceneJsonExporterDataProperties;\n\tui?: NodeJsonExporterUIData;\n}\n\nexport class SceneDataManifestImporter {\n\tstatic async importSceneData(import_data: ImportData): Promise<SceneJsonExporterData> {\n\t\tif (import_data.editorMode == null) {\n\t\t\timport_data.editorMode = false;\n\t\t}\n\t\tconst {manifest, urlPrefix} = import_data;\n\t\tconst node_paths = Object.keys(manifest.nodes);\n\t\tconst node_urls: string[] = [];\n\t\tfor (let node_path of node_paths) {\n\t\t\tconst timestamp = manifest.nodes[node_path];\n\t\t\tconst url = `${urlPrefix}/root/${node_path}.json?t=${timestamp}`;\n\t\t\tnode_urls.push(url);\n\t\t}\n\t\tconst root_url = `${urlPrefix}/root.json?t=${manifest.root}`;\n\t\tconst properties_url = `${urlPrefix}/properties.json?t=${manifest.properties}`;\n\t\tconst all_urls = [root_url, properties_url];\n\n\t\t// add editor urls if needed\n\t\tif (import_data.editorMode) {\n\t\t\tconst now = Date.now();\n\t\t\tall_urls.push(`${urlPrefix}/ui.json?t=${now}`);\n\t\t\t//all_urls.push(`${url_prefix}/editor.json?t=${now}`);\n\t\t}\n\n\t\t// add all nodes\n\t\tfor (let node_url of node_urls) {\n\t\t\tall_urls.push(node_url);\n\t\t}\n\n\t\tconst promises = all_urls.map((url) => fetch(url));\n\t\tconst responses = await Promise.all(promises);\n\n\t\tconst jsons = [];\n\t\tfor (let response of responses) {\n\t\t\tjsons.push(await response.json());\n\t\t}\n\n\t\tconst assemble_data: SceneDataElements = {\n\t\t\troot: jsons[0],\n\t\t\tproperties: jsons[1],\n\t\t};\n\t\tlet response_offset = 2;\n\t\tif (import_data.editorMode) {\n\t\t\tassemble_data['ui'] = jsons[2];\n\t\t\tresponse_offset += 1;\n\t\t}\n\n\t\tconst json_by_name: PolyDictionary<object> = {};\n\t\tconst manifest_nodes = Object.keys(manifest.nodes);\n\t\tfor (let i = 0; i < manifest_nodes.length; i++) {\n\t\t\tconst manifest_name = manifest_nodes[i];\n\t\t\tconst json = jsons[i + response_offset];\n\t\t\tjson_by_name[manifest_name] = json;\n\t\t}\n\n\t\treturn this.assemble(assemble_data, manifest_nodes, json_by_name);\n\t}\n\n\tstatic async assemble(\n\t\tassemble_data: SceneDataElements,\n\t\tmanifest_nodes: string[],\n\t\tjson_by_name: PolyDictionary<object>\n\t) {\n\t\tconst scene_data: SceneJsonExporterData = {\n\t\t\troot: assemble_data.root,\n\t\t\tproperties: assemble_data.properties,\n\t\t\tui: assemble_data.ui,\n\t\t};\n\n\t\tfor (let i = 0; i < manifest_nodes.length; i++) {\n\t\t\tconst manifest_name = manifest_nodes[i];\n\t\t\tconst json = json_by_name[manifest_name];\n\t\t\tthis.insert_child_data(scene_data.root, manifest_name, json);\n\t\t}\n\t\treturn scene_data;\n\t}\n\n\tprivate static insert_child_data(data: any, path: string, json: object) {\n\t\tconst elements = path.split('/');\n\t\tif (elements.length == 1) {\n\t\t\tif (!data.nodes) {\n\t\t\t\tdata.nodes = {};\n\t\t\t}\n\t\t\tdata.nodes[path] = json;\n\t\t} else {\n\t\t\tconst parent_name: string = elements.shift() as string;\n\t\t\tconst path_without_parent: string = elements.join('/');\n\t\t\tconst parent_data = data.nodes[parent_name];\n\t\t\tthis.insert_child_data(parent_data, path_without_parent, json);\n\t\t}\n\t}\n}\n"],"sourceRoot":""}