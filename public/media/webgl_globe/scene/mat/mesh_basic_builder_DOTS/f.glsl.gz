
uniform vec3 diffuse;
uniform float opacity;

#ifndef FLAT_SHADED

	varying vec3 vNormal;

#endif

#include <common>



// /MAT/mesh_basic_builder_DOTS/noise1
// Modulo 289 without a division (only multiplications)
float mod289(float x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}
vec2 mod289(vec2 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}
vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}
vec4 mod289(vec4 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}
// Modulo 7 without a division
vec3 mod7(vec3 x) {
  return x - floor(x * (1.0 / 7.0)) * 7.0;
}

// Permutation polynomial: (34x^2 + x) mod 289
float permute(float x) {
     return mod289(((x*34.0)+1.0)*x);
}
vec3 permute(vec3 x) {
  return mod289((34.0 * x + 1.0) * x);
}
vec4 permute(vec4 x) {
     return mod289(((x*34.0)+1.0)*x);
}

float taylorInvSqrt(float r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}
vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

vec2 fade(vec2 t) {
  return t*t*t*(t*(t*6.0-15.0)+10.0);
}
vec3 fade(vec3 t) {
  return t*t*t*(t*(t*6.0-15.0)+10.0);
}
vec4 fade(vec4 t) {
  return t*t*t*(t*(t*6.0-15.0)+10.0);
}
//
// Description : Array and textureless GLSL 2D/3D/4D simplex 
//               noise functions.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : stegu
//     Lastmod : 20110822 (ijm)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
//               https://github.com/stegu/webgl-noise
// 



float snoise(vec3 v)
  { 
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //   x0 = x0 - 0.0 + 0.0 * C.xxx;
  //   x1 = x0 - i1  + 1.0 * C.xxx;
  //   x2 = x0 - i2  + 2.0 * C.xxx;
  //   x3 = x0 - 1.0 + 3.0 * C.xxx;
  vec3 x1 = x0 - i1 + C.xxx;
  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

// Permutations
  i = mod289(i); 
  vec4 p = permute( permute( permute( 
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients: 7x7 points over a square, mapped onto an octahedron.
// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
  float n_ = 0.142857142857; // 1.0/7.0
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
                                dot(p2,x2), dot(p3,x3) ) );
  }


float fbm_snoise_noise1 (in vec3 st) {
	float value = 0.0;
	float amplitude = 1.0;
	for (int i = 0; i < 7; i++) {
		value += amplitude * snoise(st);
		st *= 2.0;
		amplitude *= 0.5;
	}
	return value;
}


// /MAT/mesh_basic_builder_DOTS/noise2

float fbm_snoise_noise2 (in vec3 st) {
	float value = 0.0;
	float amplitude = 1.0;
	for (int i = 0; i < 7; i++) {
		value += amplitude * snoise(st);
		st *= 2.0;
		amplitude *= 0.5;
	}
	return value;
}


// /MAT/mesh_basic_builder_DOTS/noise3

float fbm_snoise_noise3 (in vec3 st) {
	float value = 0.0;
	float amplitude = 1.0;
	for (int i = 0; i < 7; i++) {
		value += amplitude * snoise(st);
		st *= 2.0;
		amplitude *= 0.5;
	}
	return value;
}








// /MAT/mesh_basic_builder_DOTS/param_sparkle_center
uniform vec3 v_POLY_param_sparkle_center_val;

// /MAT/mesh_basic_builder_DOTS/param_sparkle_radius
uniform float v_POLY_param_sparkle_radius_val;

// /MAT/mesh_basic_builder_DOTS/param_sparkle_intensity
uniform float v_POLY_param_sparkle_intensity_val;

// /MAT/mesh_basic_builder_DOTS/param1
uniform vec3 v_POLY_param1_val;

// /MAT/mesh_basic_builder_DOTS/param_sparkle_color
uniform vec3 v_POLY_param_sparkle_color_val;

// /MAT/mesh_basic_builder_DOTS/param_trail_intensity
uniform float v_POLY_param_trail_intensity_val;

// /MAT/mesh_basic_builder_DOTS/attribute4
varying vec3 varying_v_POLY_attribute4_val;




#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <cube_uv_reflection_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>

void main() {

	#include <clipping_planes_fragment>

	vec4 diffuseColor = vec4( diffuse, opacity );



	// /MAT/mesh_basic_builder_DOTS/attribute4
	vec3 v_POLY_attribute4_val = varying_v_POLY_attribute4_val;
	
	// /MAT/mesh_basic_builder_DOTS/constant1
	float v_POLY_constant1_val = 1.8;
	
	// /MAT/mesh_basic_builder_DOTS/noise1
	float v_POLY_noise1_noisex = (vec3(0.030000000000000013, 0.030000000000000013, 0.030000000000000013)*fbm_snoise_noise1((v_POLY_attribute4_val*vec3(8.5, 8.5, 8.5))+(vec3(0.0, -0.1, 0.0)+vec3(0.0, 0.0, 0.0)))).x;
	float v_POLY_noise1_noisey = (vec3(0.030000000000000013, 0.030000000000000013, 0.030000000000000013)*fbm_snoise_noise1((v_POLY_attribute4_val*vec3(8.5, 8.5, 8.5))+(vec3(0.0, -0.1, 0.0)+vec3(1000.0, 1000.0, 1000.0)))).y;
	float v_POLY_noise1_noisez = (vec3(0.030000000000000013, 0.030000000000000013, 0.030000000000000013)*fbm_snoise_noise1((v_POLY_attribute4_val*vec3(8.5, 8.5, 8.5))+(vec3(0.0, -0.1, 0.0)+vec3(2000.0, 2000.0, 2000.0)))).z;
	vec3 v_POLY_noise1_noise = vec3(v_POLY_noise1_noisex, v_POLY_noise1_noisey, v_POLY_noise1_noisez);
	
	// /MAT/mesh_basic_builder_DOTS/normalize3
	vec3 v_POLY_normalize3_normalized = normalize(v_POLY_param_sparkle_center_val);
	
	// /MAT/mesh_basic_builder_DOTS/negate1
	float v_POLY_negate1_val = -1.0 * v_POLY_constant1_val;
	
	// /MAT/mesh_basic_builder_DOTS/noise2
	float v_POLY_noise2_noise = 2.0*fbm_snoise_noise2((v_POLY_attribute4_val*vec3(12.4, 12.4, 12.4))+vec3(0.0, -0.1, 0.0));
	
	// /MAT/mesh_basic_builder_DOTS/noise3
	float v_POLY_noise3_noise = 2.0*fbm_snoise_noise3((v_POLY_attribute4_val*vec3(10.4, 10.4, 10.4))+vec3(18.0, -0.1, 0.0));
	
	// /MAT/mesh_basic_builder_DOTS/vec3_to_vec4_1
	vec4 v_POLY_vec3_to_vec4_1_vec4 = vec4(v_POLY_param1_val.xyz, 0.0);
	
	// /MAT/mesh_basic_builder_DOTS/add1
	vec3 v_POLY_add1_sum = (v_POLY_attribute4_val + v_POLY_noise1_noise + vec3(0.0, 0.0, 0.0));
	
	// /MAT/mesh_basic_builder_DOTS/abs1
	float v_POLY_abs1_val = abs(v_POLY_noise2_noise);
	
	// /MAT/mesh_basic_builder_DOTS/clamp4
	float v_POLY_clamp4_val = clamp(v_POLY_noise3_noise, 0.0, 1.0);
	
	// /MAT/mesh_basic_builder_DOTS/color_correct1
	vec4 v_POLY_color_correct1_out = sRGBToLinear(v_POLY_vec3_to_vec4_1_vec4);
	
	// /MAT/mesh_basic_builder_DOTS/normalize2
	vec3 v_POLY_normalize2_normalized = normalize(v_POLY_add1_sum);
	
	// /MAT/mesh_basic_builder_DOTS/mult3
	float v_POLY_mult3_product = (v_POLY_abs1_val * v_POLY_clamp4_val * 1.0);
	
	// /MAT/mesh_basic_builder_DOTS/vec4_to_vec3_1
	vec3 v_POLY_vec4_to_vec3_1_vec3 = v_POLY_color_correct1_out.xyz;
	
	// /MAT/mesh_basic_builder_DOTS/distance1
	float v_POLY_distance1_val = distance(v_POLY_normalize2_normalized, v_POLY_normalize3_normalized);
	
	// /MAT/mesh_basic_builder_DOTS/substract1
	float v_POLY_substract1_substract = (v_POLY_distance1_val - v_POLY_param_sparkle_radius_val - 0.0);
	
	// /MAT/mesh_basic_builder_DOTS/abs2
	float v_POLY_abs2_val = abs(v_POLY_substract1_substract);
	
	// /MAT/mesh_basic_builder_DOTS/compare3
	bool v_POLY_compare3_val = (v_POLY_substract1_substract > 0.0);
	
	// /MAT/mesh_basic_builder_DOTS/mult_add2
	float v_POLY_mult_add2_val = (20.0*(v_POLY_abs2_val + 0.0)) + 0.0;
	
	// /MAT/mesh_basic_builder_DOTS/two_way_switch2
	float v_POLY_two_way_switch2_val;
	if(v_POLY_compare3_val){
	v_POLY_two_way_switch2_val = 0.0;
	} else {
	v_POLY_two_way_switch2_val = 1.0;
	}
	
	// /MAT/mesh_basic_builder_DOTS/clamp1
	float v_POLY_clamp1_val = clamp(v_POLY_mult_add2_val, v_POLY_negate1_val, v_POLY_constant1_val);
	
	// /MAT/mesh_basic_builder_DOTS/mult2
	float v_POLY_mult2_product = (v_POLY_two_way_switch2_val * v_POLY_mult3_product * 1.0);
	
	// /MAT/mesh_basic_builder_DOTS/cos1
	float v_POLY_cos1_val = cos(v_POLY_clamp1_val);
	
	// /MAT/mesh_basic_builder_DOTS/clamp3
	float v_POLY_clamp3_val = clamp(v_POLY_mult2_product, 0.0, 1.9);
	
	// /MAT/mesh_basic_builder_DOTS/clamp2
	float v_POLY_clamp2_val = clamp(v_POLY_cos1_val, 0.0, 1.0);
	
	// /MAT/mesh_basic_builder_DOTS/mult5
	float v_POLY_mult5_product = (v_POLY_param_trail_intensity_val * v_POLY_clamp3_val * 1.0);
	
	// /MAT/mesh_basic_builder_DOTS/mult4
	float v_POLY_mult4_product = (v_POLY_clamp2_val * v_POLY_param_sparkle_intensity_val * 1.0);
	
	// /MAT/mesh_basic_builder_DOTS/mult_add3
	float v_POLY_mult_add3_val = (1.0*(v_POLY_mult4_product + 0.0)) + 0.0;
	
	// /MAT/mesh_basic_builder_DOTS/max1
	float v_POLY_max1_val = max(v_POLY_mult5_product, v_POLY_mult_add3_val);
	
	// /MAT/mesh_basic_builder_DOTS/mix2
	vec3 v_POLY_mix2_mix = mix(v_POLY_vec4_to_vec3_1_vec3, v_POLY_param_sparkle_color_val, v_POLY_max1_val);
	
	// /MAT/mesh_basic_builder_DOTS/output1
	diffuseColor.xyz = v_POLY_mix2_mix;




	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>

	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );

	// accumulation (baked indirect lighting only)
	#ifdef USE_LIGHTMAP
	
		vec4 lightMapTexel= texture2D( lightMap, vUv2 );
		reflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;

	#else

		reflectedLight.indirectDiffuse += vec3( 1.0 );

	#endif

	// modulation
	#include <aomap_fragment>

	reflectedLight.indirectDiffuse *= diffuseColor.rgb;

	vec3 outgoingLight = reflectedLight.indirectDiffuse;

	#include <envmap_fragment>

	gl_FragColor = vec4( outgoingLight, diffuseColor.a );

	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>

}
