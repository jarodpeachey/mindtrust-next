
#include <common>



// /MAT/mesh_basic_builder_DOTS/noise1
// Modulo 289 without a division (only multiplications)
float mod289(float x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}
vec2 mod289(vec2 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}
vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}
vec4 mod289(vec4 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}
// Modulo 7 without a division
vec3 mod7(vec3 x) {
  return x - floor(x * (1.0 / 7.0)) * 7.0;
}

// Permutation polynomial: (34x^2 + x) mod 289
float permute(float x) {
     return mod289(((x*34.0)+1.0)*x);
}
vec3 permute(vec3 x) {
  return mod289((34.0 * x + 1.0) * x);
}
vec4 permute(vec4 x) {
     return mod289(((x*34.0)+1.0)*x);
}

float taylorInvSqrt(float r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}
vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

vec2 fade(vec2 t) {
  return t*t*t*(t*(t*6.0-15.0)+10.0);
}
vec3 fade(vec3 t) {
  return t*t*t*(t*(t*6.0-15.0)+10.0);
}
vec4 fade(vec4 t) {
  return t*t*t*(t*(t*6.0-15.0)+10.0);
}
//
// Description : Array and textureless GLSL 2D/3D/4D simplex 
//               noise functions.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : stegu
//     Lastmod : 20110822 (ijm)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
//               https://github.com/stegu/webgl-noise
// 



float snoise(vec3 v)
  { 
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //   x0 = x0 - 0.0 + 0.0 * C.xxx;
  //   x1 = x0 - i1  + 1.0 * C.xxx;
  //   x2 = x0 - i2  + 2.0 * C.xxx;
  //   x3 = x0 - 1.0 + 3.0 * C.xxx;
  vec3 x1 = x0 - i1 + C.xxx;
  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

// Permutations
  i = mod289(i); 
  vec4 p = permute( permute( permute( 
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients: 7x7 points over a square, mapped onto an octahedron.
// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
  float n_ = 0.142857142857; // 1.0/7.0
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
                                dot(p2,x2), dot(p3,x3) ) );
  }


float fbm_snoise_noise1 (in vec3 st) {
	float value = 0.0;
	float amplitude = 1.0;
	for (int i = 0; i < 7; i++) {
		value += amplitude * snoise(st);
		st *= 2.0;
		amplitude *= 0.5;
	}
	return value;
}


// /MAT/mesh_basic_builder_DOTS/vector_align1


// https://github.com/mattatz/ShibuyaCrowd/blob/master/source/shaders/common/quaternion.glsl
vec4 quat_mult(vec4 q1, vec4 q2)
{
	return vec4(
	q1.w * q2.x + q1.x * q2.w + q1.z * q2.y - q1.y * q2.z,
	q1.w * q2.y + q1.y * q2.w + q1.x * q2.z - q1.z * q2.x,
	q1.w * q2.z + q1.z * q2.w + q1.y * q2.x - q1.x * q2.y,
	q1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z
	);
}
// http://glmatrix.net/docs/quat.js.html#line97
//   let ax = a[0], ay = a[1], az = a[2], aw = a[3];

//   let bx = b[0], by = b[1], bz = b[2], bw = b[3];

//   out[0] = ax * bw + aw * bx + ay * bz - az * by;

//   out[1] = ay * bw + aw * by + az * bx - ax * bz;

//   out[2] = az * bw + aw * bz + ax * by - ay * bx;

//   out[3] = aw * bw - ax * bx - ay * by - az * bz;

//   return out



// http://www.neilmendoza.com/glsl-rotation-about-an-arbitrary-axis/
mat4 rotationMatrix(vec3 axis, float angle)
{
	axis = normalize(axis);
	float s = sin(angle);
	float c = cos(angle);
	float oc = 1.0 - c;

 	return mat4(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s, 0.0, oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s,  0.0, oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c, 0.0, 0.0, 0.0, 0.0, 1.0);
}

// https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/
vec4 quat_from_axis_angle(vec3 axis, float angle)
{
	vec4 qr;
	float half_angle = (angle * 0.5); // * 3.14159 / 180.0;
	float sin_half_angle = sin(half_angle);
	qr.x = axis.x * sin_half_angle;
	qr.y = axis.y * sin_half_angle;
	qr.z = axis.z * sin_half_angle;
	qr.w = cos(half_angle);
	return qr;
}
vec3 rotate_with_axis_angle(vec3 position, vec3 axis, float angle)
{
	vec4 q = quat_from_axis_angle(axis, angle);
	vec3 v = position.xyz;
	return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
// vec3 applyQuaternionToVector( vec4 q, vec3 v ){
// 	return v + 2.0 * cross( q.xyz, cross( q.xyz, v ) + q.w * v );
// }
vec3 rotate_with_quat( vec3 v, vec4 q )
{
	// vec4 qv = multQuat( quat, vec4(vec, 0.0) );
	// return multQuat( qv, vec4(-quat.x, -quat.y, -quat.z, quat.w) ).xyz;
	return v + 2.0 * cross( q.xyz, cross( q.xyz, v ) + q.w * v );
}
// https://github.com/glslify/glsl-look-at/blob/gh-pages/index.glsl
// mat3 rotation_matrix(vec3 origin, vec3 target, float roll) {
// 	vec3 rr = vec3(sin(roll), cos(roll), 0.0);
// 	vec3 ww = normalize(target - origin);
// 	vec3 uu = normalize(cross(ww, rr));
// 	vec3 vv = normalize(cross(uu, ww));

// 	return mat3(uu, vv, ww);
// }
// mat3 rotation_matrix(vec3 target, float roll) {
// 	vec3 rr = vec3(sin(roll), cos(roll), 0.0);
// 	vec3 ww = normalize(target);
// 	vec3 uu = normalize(cross(ww, rr));
// 	vec3 vv = normalize(cross(uu, ww));

// 	return mat3(uu, vv, ww);
// }

float vector_angle(vec3 start, vec3 dest){
	start = normalize(start);
	dest = normalize(dest);

	float cosTheta = dot(start, dest);
	vec3 c1 = cross(start, dest);
	// We use the dot product of the cross with the Y axis.
	// This is a little arbitrary, but can still give a good sense of direction
	vec3 y_axis = vec3(0.0, 1.0, 0.0);
	float d1 = dot(c1, y_axis);
	float angle = acos(cosTheta) * sign(d1);
	return angle;
}

// http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#i-need-an-equivalent-of-glulookat-how-do-i-orient-an-object-towards-a-point-
vec4 vector_align(vec3 start, vec3 dest){
	start = normalize(start);
	dest = normalize(dest);

	float cosTheta = dot(start, dest);
	vec3 axis;

	// if (cosTheta < -1 + 0.001f){
	// 	// special case when vectors in opposite directions:
	// 	// there is no "ideal" rotation axis
	// 	// So guess one; any will do as long as it's perpendicular to start
	// 	axis = cross(vec3(0.0f, 0.0f, 1.0f), start);
	// 	if (length2(axis) < 0.01 ) // bad luck, they were parallel, try again!
	// 		axis = cross(vec3(1.0f, 0.0f, 0.0f), start);

	// 	axis = normalize(axis);
	// 	return gtx::quaternion::angleAxis(glm::radians(180.0f), axis);
	// }
	if(cosTheta > (1.0 - 0.0001) || cosTheta < (-1.0 + 0.0001) ){
		axis = normalize(cross(start, vec3(0.0, 1.0, 0.0)));
		if (length(axis) < 0.001 ){ // bad luck, they were parallel, try again!
			axis = normalize(cross(start, vec3(1.0, 0.0, 0.0)));
		}
	} else {
		axis = normalize(cross(start, dest));
	}

	float angle = acos(cosTheta);

	return quat_from_axis_angle(axis, angle);
}
vec4 vector_align_with_up(vec3 start, vec3 dest, vec3 up){
	vec4 rot1 = vector_align(start, dest);
	up = normalize(up);

	// Recompute desiredUp so that it's perpendicular to the direction
	// You can skip that part if you really want to force desiredUp
	// vec3 right = normalize(cross(dest, up));
	// up = normalize(cross(right, dest));

	// Because of the 1rst rotation, the up is probably completely screwed up.
	// Find the rotation between the "up" of the rotated object, and the desired up
	vec3 newUp = rotate_with_quat(vec3(0.0, 1.0, 0.0), rot1);//rot1 * vec3(0.0, 1.0, 0.0);
	vec4 rot2 = vector_align(up, newUp);

	// return rot1;
	return rot2;
	// return multQuat(rot1, rot2);
	// return rot2 * rot1;

}

// https://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm
float quat_to_angle(vec4 q){
	return 2.0 * acos(q.w);
}
vec3 quat_to_axis(vec4 q){
	return vec3(
		q.x / sqrt(1.0-q.w*q.w),
		q.y / sqrt(1.0-q.w*q.w),
		q.z / sqrt(1.0-q.w*q.w)
	);
}

vec4 align(vec3 dir, vec3 up){
	vec3 start_dir = vec3(0.0, 0.0, 1.0);
	vec3 start_up = vec3(0.0, 1.0, 0.0);
	vec4 rot1 = vector_align(start_dir, dir);
	up = normalize(up);

	// Recompute desiredUp so that it's perpendicular to the direction
	// You can skip that part if you really want to force desiredUp
	vec3 right = normalize(cross(dir, up));
	if(length(right)<0.001){
		right = vec3(1.0, 0.0, 0.0);
	}
	up = normalize(cross(right, dir));

	// Because of the 1rst rotation, the up is probably completely screwed up.
	// Find the rotation between the "up" of the rotated object, and the desired up
	vec3 newUp = rotate_with_quat(start_up, rot1);//rot1 * vec3(0.0, 1.0, 0.0);
	vec4 rot2 = vector_align(normalize(newUp), up);

	// return rot1;
	return quat_mult(rot1, rot2);
	// return rot2 * rot1;

}







// /MAT/mesh_basic_builder_DOTS/param_sparkle_center
uniform vec3 v_POLY_param_sparkle_center_val;

// /MAT/mesh_basic_builder_DOTS/param_sparkle_radius
uniform float v_POLY_param_sparkle_radius_val;

// /MAT/mesh_basic_builder_DOTS/param_sparkle_intensity
uniform float v_POLY_param_sparkle_intensity_val;

// /MAT/mesh_basic_builder_DOTS/attribute4
varying vec3 varying_v_POLY_attribute4_val;

// /MAT/mesh_basic_builder_DOTS/varying_write1
varying vec4 varying_mvPosition;

// /MAT/mesh_basic_builder_DOTS/attribute4
attribute vec3 instancePosition;

// /MAT/mesh_basic_builder_DOTS/attribute2
attribute float land;




#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>

void main() {

	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>



	// /MAT/mesh_basic_builder_DOTS/attribute4
	vec3 v_POLY_attribute4_val = instancePosition;
	varying_v_POLY_attribute4_val = vec3(instancePosition);
	
	// /MAT/mesh_basic_builder_DOTS/constant1
	float v_POLY_constant1_val = 1.8;
	
	// /MAT/mesh_basic_builder_DOTS/attribute3
	vec3 v_POLY_attribute3_val = instancePosition;
	
	// /MAT/mesh_basic_builder_DOTS/attribute2
	float v_POLY_attribute2_val = land;
	
	// /MAT/mesh_basic_builder_DOTS/constant_size_sea
	float v_POLY_constant_size_sea_val = 0.24;
	
	// /MAT/mesh_basic_builder_DOTS/constant_size_land
	float v_POLY_constant_size_land_val = 0.7;
	
	// /MAT/mesh_basic_builder_DOTS/noise1
	float v_POLY_noise1_noisex = (vec3(0.030000000000000013, 0.030000000000000013, 0.030000000000000013)*fbm_snoise_noise1((v_POLY_attribute4_val*vec3(8.5, 8.5, 8.5))+(vec3(0.0, -0.1, 0.0)+vec3(0.0, 0.0, 0.0)))).x;
	float v_POLY_noise1_noisey = (vec3(0.030000000000000013, 0.030000000000000013, 0.030000000000000013)*fbm_snoise_noise1((v_POLY_attribute4_val*vec3(8.5, 8.5, 8.5))+(vec3(0.0, -0.1, 0.0)+vec3(1000.0, 1000.0, 1000.0)))).y;
	float v_POLY_noise1_noisez = (vec3(0.030000000000000013, 0.030000000000000013, 0.030000000000000013)*fbm_snoise_noise1((v_POLY_attribute4_val*vec3(8.5, 8.5, 8.5))+(vec3(0.0, -0.1, 0.0)+vec3(2000.0, 2000.0, 2000.0)))).z;
	vec3 v_POLY_noise1_noise = vec3(v_POLY_noise1_noisex, v_POLY_noise1_noisey, v_POLY_noise1_noisez);
	
	// /MAT/mesh_basic_builder_DOTS/normalize3
	vec3 v_POLY_normalize3_normalized = normalize(v_POLY_param_sparkle_center_val);
	
	// /MAT/mesh_basic_builder_DOTS/negate1
	float v_POLY_negate1_val = -1.0 * v_POLY_constant1_val;
	
	// /MAT/mesh_basic_builder_DOTS/normalize1
	vec3 v_POLY_normalize1_normalized = normalize(v_POLY_attribute3_val);
	
	// /MAT/mesh_basic_builder_DOTS/compare1
	bool v_POLY_compare1_val = (v_POLY_attribute2_val < 0.5);
	
	// /MAT/mesh_basic_builder_DOTS/add1
	vec3 v_POLY_add1_sum = (v_POLY_attribute4_val + v_POLY_noise1_noise + vec3(0.0, 0.0, 0.0));
	
	// /MAT/mesh_basic_builder_DOTS/vector_align1
	vec4 v_POLY_vector_align1_val = vector_align_with_up(vec3(0.0, 1.0, 0.0), v_POLY_normalize1_normalized, vec3(0.0, 0.0, 1.0));
	
	// /MAT/mesh_basic_builder_DOTS/two_way_switch1
	float v_POLY_two_way_switch1_val;
	if(v_POLY_compare1_val){
	v_POLY_two_way_switch1_val = v_POLY_constant_size_sea_val;
	} else {
	v_POLY_two_way_switch1_val = v_POLY_constant_size_land_val;
	}
	
	// /MAT/mesh_basic_builder_DOTS/normalize2
	vec3 v_POLY_normalize2_normalized = normalize(v_POLY_add1_sum);
	
	// /MAT/mesh_basic_builder_DOTS/float_to_vec3_1
	vec3 v_POLY_float_to_vec3_1_vec3 = vec3(v_POLY_two_way_switch1_val, v_POLY_two_way_switch1_val, v_POLY_two_way_switch1_val);
	
	// /MAT/mesh_basic_builder_DOTS/distance1
	float v_POLY_distance1_val = distance(v_POLY_normalize2_normalized, v_POLY_normalize3_normalized);
	
	// /MAT/mesh_basic_builder_DOTS/substract1
	float v_POLY_substract1_substract = (v_POLY_distance1_val - v_POLY_param_sparkle_radius_val - 0.0);
	
	// /MAT/mesh_basic_builder_DOTS/abs2
	float v_POLY_abs2_val = abs(v_POLY_substract1_substract);
	
	// /MAT/mesh_basic_builder_DOTS/mult_add2
	float v_POLY_mult_add2_val = (20.0*(v_POLY_abs2_val + 0.0)) + 0.0;
	
	// /MAT/mesh_basic_builder_DOTS/clamp1
	float v_POLY_clamp1_val = clamp(v_POLY_mult_add2_val, v_POLY_negate1_val, v_POLY_constant1_val);
	
	// /MAT/mesh_basic_builder_DOTS/cos1
	float v_POLY_cos1_val = cos(v_POLY_clamp1_val);
	
	// /MAT/mesh_basic_builder_DOTS/clamp2
	float v_POLY_clamp2_val = clamp(v_POLY_cos1_val, 0.0, 1.0);
	
	// /MAT/mesh_basic_builder_DOTS/mult4
	float v_POLY_mult4_product = (v_POLY_clamp2_val * v_POLY_param_sparkle_intensity_val * 1.0);
	
	// /MAT/mesh_basic_builder_DOTS/compare2
	bool v_POLY_compare2_val = (v_POLY_mult4_product > 0.0);
	
	// /MAT/mesh_basic_builder_DOTS/mult_add1
	float v_POLY_mult_add1_val = (0.04*(v_POLY_mult4_product + 0.0)) + 1.0;
	
	// /MAT/mesh_basic_builder_DOTS/two_way_switch_for_pos
	float v_POLY_two_way_switch_for_pos_val;
	if(v_POLY_compare2_val){
	v_POLY_two_way_switch_for_pos_val = v_POLY_mult_add1_val;
	} else {
	v_POLY_two_way_switch_for_pos_val = 1.0;
	}
	
	// /MAT/mesh_basic_builder_DOTS/mult1
	vec3 v_POLY_mult1_product = (v_POLY_two_way_switch_for_pos_val * v_POLY_attribute3_val);
	
	// /MAT/mesh_basic_builder_DOTS/instance_transform1
	vec3 v_POLY_instance_transform1_position = vec3(position);
	v_POLY_instance_transform1_position *= v_POLY_float_to_vec3_1_vec3;
	v_POLY_instance_transform1_position = rotate_with_quat( v_POLY_instance_transform1_position, v_POLY_vector_align1_val );
	v_POLY_instance_transform1_position += v_POLY_mult1_product;
	vec3 v_POLY_instance_transform1_normal = vec3(normal);
	v_POLY_instance_transform1_normal = rotate_with_quat( v_POLY_instance_transform1_normal, v_POLY_vector_align1_val );
	
	// /MAT/mesh_basic_builder_DOTS/output1
	vec3 transformed = v_POLY_instance_transform1_position;
	vec3 objectNormal = v_POLY_instance_transform1_normal;
	
	// /MAT/mesh_basic_builder_DOTS/model_view_matrix_mult1
	vec4 v_POLY_model_view_matrix_mult1_mvMult = modelViewMatrix * vec4(v_POLY_instance_transform1_position, 1.0);
	
	// /MAT/mesh_basic_builder_DOTS/varying_write1
	varying_mvPosition = v_POLY_model_view_matrix_mult1_mvMult;



	#include <skinbase_vertex>

	#ifdef USE_ENVMAP

// removed:
//	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>

	#endif

// removed:
//	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>

	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>

}
