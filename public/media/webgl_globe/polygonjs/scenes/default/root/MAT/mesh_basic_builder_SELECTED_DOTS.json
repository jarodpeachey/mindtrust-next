{
	"type": "meshBasicBuilder",
	"nodes": {
		"output1": {
			"type": "output",
			"inputs": [
				{
					"index": 0,
					"node": "instance_transform1",
					"output": "position"
				},
				{
					"index": 1,
					"node": "instance_transform1",
					"output": "normal"
				},
				{
					"index": 2,
					"node": "null_color",
					"output": "val"
				},
				{
					"index": 3,
					"node": "null_alpha",
					"output": "val"
				}
			]
		},
		"instance_transform1": {
			"type": "instanceTransform",
			"inputs": [
				null,
				null,
				{
					"index": 2,
					"node": "rotate1",
					"output": "val"
				},
				{
					"index": 3,
					"node": "vector_align1",
					"output": "val"
				},
				{
					"index": 4,
					"node": "null_instanceScale",
					"output": "val"
				}
			]
		},
		"attribute3": {
			"type": "attribute",
			"params": {
				"name": "instancePosition",
				"type": 2
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "vec3"
					}
				]
			}
		},
		"rotate1": {
			"type": "rotate",
			"params": {
				"vector": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						1
					],
					"options": {
						"spare": true
					}
				},
				"axis": {
					"type": "vector3",
					"default_value": [
						0,
						1,
						0
					],
					"options": {
						"spare": true
					}
				},
				"angle": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				}
			},
			"maxInputsCount": 3,
			"inputs": [
				{
					"index": 0,
					"node": "mult3",
					"output": "product"
				},
				null,
				{
					"index": 2,
					"node": "multAdd4",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "vector",
						"type": "vec3"
					},
					{
						"name": "axis",
						"type": "vec3"
					},
					{
						"name": "angle",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "vec3"
					}
				]
			}
		},
		"globals2": {
			"type": "globals"
		},
		"mult_add1": {
			"type": "multAdd",
			"params": {
				"value": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"preAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"mult": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					},
					"raw_input": -0.15
				},
				"postAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "globals2",
					"output": "time"
				},
				null,
				{
					"index": 2,
					"node": "param2",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value",
						"type": "float"
					},
					{
						"name": "pre_add",
						"type": "float"
					},
					{
						"name": "mult",
						"type": "float"
					},
					{
						"name": "post_add",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"param2": {
			"type": "param",
			"params": {
				"name": "rotationSpeed"
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"normalize1": {
			"type": "normalize",
			"params": {
				"in": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "rotate1",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "in",
						"type": "vec3"
					}
				],
				"out": [
					{
						"name": "normalized",
						"type": "vec3"
					}
				]
			}
		},
		"vector_align1": {
			"type": "vectorAlign",
			"params": {
				"start": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						1
					],
					"options": {
						"spare": true
					},
					"raw_input": [
						0,
						1,
						0
					]
				},
				"end": {
					"type": "vector3",
					"default_value": [
						1,
						0,
						0
					],
					"options": {
						"spare": true
					},
					"raw_input": [
						0,
						1,
						0
					]
				},
				"up": {
					"type": "vector3",
					"default_value": [
						0,
						1,
						0
					],
					"options": {
						"spare": true
					},
					"raw_input": [
						0,
						0,
						1
					]
				}
			},
			"inputs": [
				null,
				{
					"index": 1,
					"node": "normalize1",
					"output": "normalized"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "start",
						"type": "vec3"
					},
					{
						"name": "end",
						"type": "vec3"
					},
					{
						"name": "up",
						"type": "vec3"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "vec4"
					}
				]
			}
		},
		"attribute1": {
			"type": "attribute",
			"params": {
				"name": "role"
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"switch1": {
			"type": "switch",
			"params": {
				"index": {
					"type": "integer",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"in0": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				},
				"in1": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				},
				"in2": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				},
				"in3": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				},
				"in4": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				},
				"in5": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				},
				"in6": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				},
				"in7": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				},
				"in8": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				},
				"in9": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				},
				"in10": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				}
			},
			"maxInputsCount": 12,
			"inputs": [
				{
					"index": 0,
					"node": "float_to_int1",
					"output": "int"
				},
				{
					"index": 1,
					"node": "param_color_role0",
					"output": "val"
				},
				{
					"index": 2,
					"node": "param_color_role1",
					"output": "val"
				},
				{
					"index": 3,
					"node": "param_color_role2",
					"output": "val"
				},
				{
					"index": 4,
					"node": "param_color_role3",
					"output": "val"
				},
				{
					"index": 5,
					"node": "param_color_role4",
					"output": "val"
				},
				{
					"index": 6,
					"node": "param_color_role5",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "index",
						"type": "int"
					},
					{
						"name": "in0",
						"type": "vec3"
					},
					{
						"name": "in1",
						"type": "vec3"
					},
					{
						"name": "in2",
						"type": "vec3"
					},
					{
						"name": "in3",
						"type": "vec3"
					},
					{
						"name": "in4",
						"type": "vec3"
					},
					{
						"name": "in5",
						"type": "vec3"
					},
					{
						"name": "in6",
						"type": "vec3"
					},
					{
						"name": "in7",
						"type": "vec3"
					},
					{
						"name": "in8",
						"type": "vec3"
					},
					{
						"name": "in9",
						"type": "vec3"
					},
					{
						"name": "in10",
						"type": "vec3"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "vec3"
					}
				]
			}
		},
		"float_to_int1": {
			"type": "floatToInt",
			"inputs": [
				{
					"index": 0,
					"node": "round1",
					"output": "val"
				}
			]
		},
		"param_color_role0": {
			"type": "param",
			"params": {
				"name": "colorRole0",
				"type": 4,
				"asColor": 1
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "vec3"
					}
				]
			}
		},
		"param_color_role1": {
			"type": "param",
			"params": {
				"name": "colorRole1",
				"type": 4,
				"asColor": 1
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "vec3"
					}
				]
			}
		},
		"param_color_role2": {
			"type": "param",
			"params": {
				"name": "colorRole2",
				"type": 4,
				"asColor": 1
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "vec3"
					}
				]
			}
		},
		"param_color_role3": {
			"type": "param",
			"params": {
				"name": "colorRole3",
				"type": 4,
				"asColor": 1
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "vec3"
					}
				]
			}
		},
		"param_color_role4": {
			"type": "param",
			"params": {
				"name": "colorRole4",
				"type": 4,
				"asColor": 1
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "vec3"
					}
				]
			}
		},
		"param_color_role5": {
			"type": "param",
			"params": {
				"name": "colorRole5",
				"type": 4,
				"asColor": 1
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "vec3"
					}
				]
			}
		},
		"attribute2": {
			"type": "attribute",
			"params": {
				"name": "sphere"
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"two_way_switch1": {
			"type": "twoWaySwitch",
			"params": {
				"condition": {
					"type": "boolean",
					"default_value": false,
					"options": {
						"spare": true
					}
				},
				"ifTrue": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				},
				"ifFalse": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "compare1",
					"output": "val"
				},
				{
					"index": 1,
					"node": "switch1",
					"output": "val"
				},
				{
					"index": 2,
					"node": "hsv_to_rgb1",
					"output": "rgb"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "condition",
						"type": "bool"
					},
					{
						"name": "if_true",
						"type": "vec3"
					},
					{
						"name": "if_false",
						"type": "vec3"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "vec3"
					}
				]
			}
		},
		"compare1": {
			"type": "compare",
			"params": {
				"test": 2,
				"value0": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"value1": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					},
					"raw_input": 0.51
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "round2",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value0",
						"type": "float"
					},
					{
						"name": "value1",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "bool"
					}
				]
			}
		},
		"round1": {
			"type": "round",
			"params": {
				"in": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "attribute1",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "in",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"color_correct1": {
			"type": "colorCorrect",
			"params": {
				"from": 1,
				"to": 0
			},
			"inputs": [
				{
					"index": 0,
					"node": "vec3_to_vec4_1",
					"output": "vec4"
				}
			]
		},
		"vec3_to_vec4_1": {
			"type": "vec3ToVec4",
			"params": {
				"w": 1
			},
			"inputs": [
				{
					"index": 0,
					"node": "twoWaySwitch2",
					"output": "val"
				}
			]
		},
		"vec4_to_vec3_1": {
			"type": "vec4ToVec3",
			"inputs": [
				{
					"index": 0,
					"node": "color_correct1",
					"output": "out"
				}
			]
		},
		"round2": {
			"type": "round",
			"params": {
				"in": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "attribute2",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "in",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"distance1": {
			"type": "distance",
			"params": {
				"p0": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				},
				"p1": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "globals1",
					"output": "position"
				},
				{
					"index": 1,
					"node": "rotate1",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "p0",
						"type": "vec3"
					},
					{
						"name": "p1",
						"type": "vec3"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"globals1": {
			"type": "globals"
		},
		"compare2": {
			"type": "compare",
			"params": {
				"test": 2,
				"value0": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"value1": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					},
					"raw_input": 0.026
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "length1",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value0",
						"type": "float"
					},
					{
						"name": "value1",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "bool"
					}
				]
			}
		},
		"two_way_switch2": {
			"type": "twoWaySwitch",
			"params": {
				"condition": {
					"type": "boolean",
					"default_value": false,
					"options": {
						"spare": true
					}
				},
				"ifTrue": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				},
				"ifFalse": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "compare2",
					"output": "val"
				},
				{
					"index": 1,
					"node": "constant_border_color",
					"output": "val"
				},
				{
					"index": 2,
					"node": "hsv_to_rgb1",
					"output": "rgb"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "condition",
						"type": "bool"
					},
					{
						"name": "if_true",
						"type": "vec3"
					},
					{
						"name": "if_false",
						"type": "vec3"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "vec3"
					}
				]
			}
		},
		"length1": {
			"type": "length",
			"params": {
				"x": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "globals1",
					"output": "position"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "x",
						"type": "vec3"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"dot1": {
			"type": "dot",
			"params": {
				"vec0": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				},
				"vec1": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				}
			},
			"connection_points": {
				"in": [
					{
						"name": "vec0",
						"type": "vec3"
					},
					{
						"name": "vec1",
						"type": "vec3"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"ramp1": {
			"type": "ramp",
			"inputs": [
				{
					"index": 0,
					"node": "fit1",
					"output": "val"
				}
			]
		},
		"clamp1": {
			"type": "clamp",
			"params": {
				"value": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"min": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"max": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "ramp1",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value",
						"type": "float"
					},
					{
						"name": "min",
						"type": "float"
					},
					{
						"name": "max",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"dot2": {
			"type": "dot",
			"params": {
				"vec0": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				},
				"vec1": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "normalize1",
					"output": "normalized"
				},
				{
					"index": 1,
					"node": "normalize2",
					"output": "normalized"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "vec0",
						"type": "vec3"
					},
					{
						"name": "vec1",
						"type": "vec3"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"fit1": {
			"type": "fit",
			"params": {
				"val": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"srcMin": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					},
					"raw_input": -1
				},
				"srcMax": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				},
				"destMin": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"destMax": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "dot2",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "val",
						"type": "float"
					},
					{
						"name": "src_min",
						"type": "float"
					},
					{
						"name": "src_max",
						"type": "float"
					},
					{
						"name": "dest_min",
						"type": "float"
					},
					{
						"name": "dest_max",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"normalize2": {
			"type": "normalize",
			"params": {
				"in": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "globals2",
					"output": "cameraPosition"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "in",
						"type": "vec3"
					}
				],
				"out": [
					{
						"name": "normalized",
						"type": "vec3"
					}
				]
			}
		},
		"mult1": {
			"type": "mult",
			"params": {
				"mult0": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				},
				"mult1": {
					"type": "vector3",
					"default_value": [
						1,
						1,
						1
					],
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "null1",
					"output": "val"
				},
				{
					"index": 1,
					"node": "null3",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "mult0",
						"type": "float"
					},
					{
						"name": "mult1",
						"type": "vec3"
					}
				],
				"out": [
					{
						"name": "product",
						"type": "vec3"
					}
				]
			}
		},
		"null1": {
			"type": "null",
			"params": {
				"in": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "constant2",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "in",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"constant3": {
			"type": "constant",
			"params": {
				"float": 0.16
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"fit_from_01_to_variance1": {
			"type": "fitFrom01ToVariance",
			"params": {
				"val": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"center": {
					"type": "float",
					"default_value": 0.5,
					"options": {
						"spare": true
					}
				},
				"variance": {
					"type": "float",
					"default_value": 0.5,
					"options": {
						"spare": true
					},
					"raw_input": 0.02
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "fit1",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "val",
						"type": "float"
					},
					{
						"name": "center",
						"type": "float"
					},
					{
						"name": "variance",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"constant_border_color": {
			"type": "constant",
			"params": {
				"type": 4,
				"vec3": [
					0.78,
					0.78,
					0.78
				]
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "vec3"
					}
				]
			}
		},
		"constant_white_center": {
			"type": "constant",
			"params": {
				"type": 4,
				"vec3": [
					10,
					10,
					10
				]
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "vec3"
					}
				]
			}
		},
		"two_way_switch3": {
			"type": "twoWaySwitch",
			"params": {
				"condition": {
					"type": "boolean",
					"default_value": false,
					"options": {
						"spare": true
					}
				},
				"ifTrue": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				},
				"ifFalse": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "compare3",
					"output": "val"
				},
				{
					"index": 1,
					"node": "mult2",
					"output": "product"
				},
				{
					"index": 2,
					"node": "twoWaySwitch2",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "condition",
						"type": "bool"
					},
					{
						"name": "if_true",
						"type": "vec3"
					},
					{
						"name": "if_false",
						"type": "vec3"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "vec3"
					}
				]
			}
		},
		"attribute4": {
			"type": "attribute",
			"params": {
				"name": "shadow"
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"compare3": {
			"type": "compare",
			"params": {
				"test": 2,
				"value0": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"value1": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					},
					"raw_input": 0.5
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "round3",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value0",
						"type": "float"
					},
					{
						"name": "value1",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "bool"
					}
				]
			}
		},
		"round3": {
			"type": "round",
			"params": {
				"in": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "attribute4",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "in",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"constant1": {
			"type": "constant",
			"params": {
				"type": 4,
				"vec3": [
					0,
					0,
					1
				]
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "vec3"
					}
				]
			}
		},
		"distance2": {
			"type": "distance",
			"params": {
				"p0": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				},
				"p1": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "globals3",
					"output": "position"
				},
				{
					"index": 1,
					"node": "rotate1",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "p0",
						"type": "vec3"
					},
					{
						"name": "p1",
						"type": "vec3"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"globals3": {
			"type": "globals"
		},
		"mult2": {
			"type": "mult",
			"params": {
				"mult0": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				},
				"mult1": {
					"type": "vector3",
					"default_value": [
						1,
						1,
						1
					],
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "complement1",
					"output": "val"
				},
				{
					"index": 1,
					"node": "constant1",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "mult0",
						"type": "float"
					},
					{
						"name": "mult1",
						"type": "vec3"
					}
				],
				"out": [
					{
						"name": "product",
						"type": "vec3"
					}
				]
			}
		},
		"complement1": {
			"type": "complement",
			"params": {
				"in": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "multAdd5",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "in",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"mult_add2": {
			"type": "multAdd",
			"params": {
				"value": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"preAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"mult": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					},
					"raw_input": 1.1
				},
				"postAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "distance2",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value",
						"type": "float"
					},
					{
						"name": "pre_add",
						"type": "float"
					},
					{
						"name": "mult",
						"type": "float"
					},
					{
						"name": "post_add",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"attribute5": {
			"type": "attribute",
			"params": {
				"name": "id"
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"substract1": {
			"type": "substract",
			"params": {
				"sub0": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"sub1": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"sub2": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"sub3": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"sub4": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"sub5": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"sub6": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				}
			},
			"maxInputsCount": 7,
			"inputs": [
				{
					"index": 0,
					"node": "param_threshold",
					"output": "val"
				},
				{
					"index": 1,
					"node": "attribute5",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "sub0",
						"type": "float"
					},
					{
						"name": "sub1",
						"type": "float"
					},
					{
						"name": "sub2",
						"type": "float"
					},
					{
						"name": "sub3",
						"type": "float"
					},
					{
						"name": "sub4",
						"type": "float"
					},
					{
						"name": "sub5",
						"type": "float"
					},
					{
						"name": "sub6",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "substract",
						"type": "float"
					}
				]
			}
		},
		"clamp2": {
			"type": "clamp",
			"params": {
				"value": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"min": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"max": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "multAdd2",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value",
						"type": "float"
					},
					{
						"name": "min",
						"type": "float"
					},
					{
						"name": "max",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"float_to_vec3_1": {
			"type": "floatToVec3",
			"inputs": [
				{
					"index": 0,
					"node": "null2",
					"output": "val"
				},
				{
					"index": 1,
					"node": "null2",
					"output": "val"
				},
				{
					"index": 2,
					"node": "null2",
					"output": "val"
				}
			]
		},
		"mult_add3": {
			"type": "multAdd",
			"params": {
				"value": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"preAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"mult": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					},
					"raw_input": 2
				},
				"postAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "substract1",
					"output": "substract"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value",
						"type": "float"
					},
					{
						"name": "pre_add",
						"type": "float"
					},
					{
						"name": "mult",
						"type": "float"
					},
					{
						"name": "post_add",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"easing1": {
			"type": "easing",
			"params": {
				"type": 17
			},
			"inputs": [
				{
					"index": 0,
					"node": "clamp2",
					"output": "val"
				}
			]
		},
		"null2": {
			"type": "null",
			"params": {
				"in": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "twoWaySwitch1",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "in",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"mult_add4": {
			"type": "multAdd",
			"params": {
				"value": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"preAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"mult": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				},
				"postAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "attribute5",
					"output": "val"
				},
				{
					"index": 1,
					"node": "param_visibles_count",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value",
						"type": "float"
					},
					{
						"name": "pre_add",
						"type": "float"
					},
					{
						"name": "mult",
						"type": "float"
					},
					{
						"name": "post_add",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"compare4": {
			"type": "compare",
			"params": {
				"test": 1,
				"value0": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"value1": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "param_threshold",
					"output": "val"
				},
				{
					"index": 1,
					"node": "multAdd1",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value0",
						"type": "float"
					},
					{
						"name": "value1",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "bool"
					}
				]
			}
		},
		"clamp3": {
			"type": "clamp",
			"params": {
				"value": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"min": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"max": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "multAdd3",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value",
						"type": "float"
					},
					{
						"name": "min",
						"type": "float"
					},
					{
						"name": "max",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"mult_add5": {
			"type": "multAdd",
			"params": {
				"value": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"preAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"mult": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					},
					"raw_input": 2
				},
				"postAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "substract2",
					"output": "substract"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value",
						"type": "float"
					},
					{
						"name": "pre_add",
						"type": "float"
					},
					{
						"name": "mult",
						"type": "float"
					},
					{
						"name": "post_add",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"easing2": {
			"type": "easing",
			"params": {
				"type": 17
			},
			"inputs": [
				{
					"index": 0,
					"node": "complement2",
					"output": "val"
				}
			]
		},
		"substract2": {
			"type": "substract",
			"params": {
				"sub0": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"sub1": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"sub2": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"sub3": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"sub4": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"sub5": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"sub6": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				}
			},
			"maxInputsCount": 7,
			"inputs": [
				{
					"index": 0,
					"node": "param_threshold",
					"output": "val"
				},
				{
					"index": 1,
					"node": "multAdd1",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "sub0",
						"type": "float"
					},
					{
						"name": "sub1",
						"type": "float"
					},
					{
						"name": "sub2",
						"type": "float"
					},
					{
						"name": "sub3",
						"type": "float"
					},
					{
						"name": "sub4",
						"type": "float"
					},
					{
						"name": "sub5",
						"type": "float"
					},
					{
						"name": "sub6",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "substract",
						"type": "float"
					}
				]
			}
		},
		"complement2": {
			"type": "complement",
			"params": {
				"in": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "clamp3",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "in",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"constant2": {
			"type": "constant",
			"params": {
				"float": 1
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"hsv_to_rgb1": {
			"type": "hsvToRgb",
			"inputs": [
				{
					"index": 0,
					"node": "float_to_vec3_2",
					"output": "vec3"
				}
			]
		},
		"rgb_to_hsv1": {
			"type": "rgbToHsv",
			"inputs": [
				{
					"index": 0,
					"node": "switch1",
					"output": "val"
				}
			]
		},
		"vec3_to_float1": {
			"type": "vec3ToFloat",
			"inputs": [
				{
					"index": 0,
					"node": "rgb_to_hsv1",
					"output": "hsv"
				}
			]
		},
		"float_to_vec3_2": {
			"type": "floatToVec3",
			"params": {
				"y": 0.36
			},
			"inputs": [
				{
					"index": 0,
					"node": "vec3_to_float1",
					"output": "x"
				},
				{
					"index": 1,
					"node": "multAdd6",
					"output": "val"
				},
				{
					"index": 2,
					"node": "vec3_to_float1",
					"output": "z"
				}
			]
		},
		"mult_add6": {
			"type": "multAdd",
			"params": {
				"value": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"preAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"mult": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					},
					"raw_input": 0.34
				},
				"postAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "vec3_to_float1",
					"output": "y"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value",
						"type": "float"
					},
					{
						"name": "pre_add",
						"type": "float"
					},
					{
						"name": "mult",
						"type": "float"
					},
					{
						"name": "post_add",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"param_threshold": {
			"type": "param",
			"params": {
				"name": "threshold"
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"param_visibles_count": {
			"type": "param",
			"params": {
				"name": "visiblesCount"
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"normalize3": {
			"type": "normalize",
			"params": {
				"in": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "attribute3",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "in",
						"type": "vec3"
					}
				],
				"out": [
					{
						"name": "normalized",
						"type": "vec3"
					}
				]
			}
		},
		"mult3": {
			"type": "mult",
			"params": {
				"mult0": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				},
				"mult1": {
					"type": "vector3",
					"default_value": [
						1,
						1,
						1
					],
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "constant4",
					"output": "val"
				},
				{
					"index": 1,
					"node": "normalize3",
					"output": "normalized"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "mult0",
						"type": "float"
					},
					{
						"name": "mult1",
						"type": "vec3"
					}
				],
				"out": [
					{
						"name": "product",
						"type": "vec3"
					}
				]
			}
		},
		"constant4": {
			"type": "constant",
			"params": {
				"float": 1.01
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"twoWaySwitch1": {
			"type": "twoWaySwitch",
			"params": {
				"condition": {
					"type": "boolean",
					"default_value": false,
					"options": {
						"spare": true
					}
				},
				"ifTrue": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"ifFalse": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "compare4",
					"output": "val"
				},
				{
					"index": 1,
					"node": "easing1",
					"output": "out"
				},
				{
					"index": 2,
					"node": "easing2",
					"output": "out"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "condition",
						"type": "bool"
					},
					{
						"name": "ifTrue",
						"type": "float"
					},
					{
						"name": "ifFalse",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"multAdd1": {
			"type": "multAdd",
			"params": {
				"value": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"preAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"mult": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				},
				"postAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "attribute5",
					"output": "val"
				},
				{
					"index": 1,
					"node": "param_visibles_count",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value",
						"type": "float"
					},
					{
						"name": "preAdd",
						"type": "float"
					},
					{
						"name": "mult",
						"type": "float"
					},
					{
						"name": "postAdd",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"multAdd2": {
			"type": "multAdd",
			"params": {
				"value": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"preAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"mult": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					},
					"raw_input": 2
				},
				"postAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "substract1",
					"output": "substract"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value",
						"type": "float"
					},
					{
						"name": "preAdd",
						"type": "float"
					},
					{
						"name": "mult",
						"type": "float"
					},
					{
						"name": "postAdd",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"multAdd3": {
			"type": "multAdd",
			"params": {
				"value": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"preAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"mult": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					},
					"raw_input": 2
				},
				"postAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "substract2",
					"output": "substract"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value",
						"type": "float"
					},
					{
						"name": "preAdd",
						"type": "float"
					},
					{
						"name": "mult",
						"type": "float"
					},
					{
						"name": "postAdd",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"multAdd4": {
			"type": "multAdd",
			"params": {
				"value": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"preAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"mult": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					},
					"raw_input": -0.15
				},
				"postAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "globals2",
					"output": "time"
				},
				null,
				{
					"index": 2,
					"node": "param2",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value",
						"type": "float"
					},
					{
						"name": "preAdd",
						"type": "float"
					},
					{
						"name": "mult",
						"type": "float"
					},
					{
						"name": "postAdd",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"multAdd5": {
			"type": "multAdd",
			"params": {
				"value": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"preAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"mult": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					},
					"raw_input": 1.1
				},
				"postAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "distance2",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value",
						"type": "float"
					},
					{
						"name": "preAdd",
						"type": "float"
					},
					{
						"name": "mult",
						"type": "float"
					},
					{
						"name": "postAdd",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"twoWaySwitch2": {
			"type": "twoWaySwitch",
			"params": {
				"condition": {
					"type": "boolean",
					"default_value": false,
					"options": {
						"spare": true
					}
				},
				"ifTrue": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				},
				"ifFalse": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "compare1",
					"output": "val"
				},
				{
					"index": 1,
					"node": "switch1",
					"output": "val"
				},
				{
					"index": 2,
					"node": "hsv_to_rgb1",
					"output": "rgb"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "condition",
						"type": "bool"
					},
					{
						"name": "ifTrue",
						"type": "vec3"
					},
					{
						"name": "ifFalse",
						"type": "vec3"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "vec3"
					}
				]
			}
		},
		"null_color": {
			"type": "null",
			"params": {
				"in": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "mult1",
					"output": "product"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "in",
						"type": "vec3"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "vec3"
					}
				]
			}
		},
		"null_alpha": {
			"type": "null",
			"params": {
				"in": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "null1",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "in",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"instanceTransform1": {
			"type": "instanceTransform"
		},
		"null_instanceScale": {
			"type": "null",
			"params": {
				"in": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "float_to_vec3_1",
					"output": "vec3"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "in",
						"type": "vec3"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "vec3"
					}
				]
			}
		},
		"null3": {
			"type": "null",
			"params": {
				"in": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "twoWaySwitch2",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "in",
						"type": "vec3"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "vec3"
					}
				]
			}
		},
		"multAdd6": {
			"type": "multAdd",
			"params": {
				"value": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"preAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"mult": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					},
					"raw_input": 0.34
				},
				"postAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "vec3_to_float1",
					"output": "y"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value",
						"type": "float"
					},
					{
						"name": "preAdd",
						"type": "float"
					},
					{
						"name": "mult",
						"type": "float"
					},
					{
						"name": "postAdd",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		}
	},
	"params": {
		"doubleSided": 1,
		"rotationSpeed": {
			"type": "float",
			"default_value": 0,
			"options": {
				"spare": true,
				"computeOnDirty": true,
				"cook": false
			}
		},
		"colorRole0": {
			"type": "color",
			"default_value": [
				0,
				0,
				0
			],
			"options": {
				"spare": true,
				"computeOnDirty": true,
				"cook": false
			},
			"raw_input": [
				0.4,
				0.133,
				0.988
			]
		},
		"colorRole1": {
			"type": "color",
			"default_value": [
				0,
				0,
				0
			],
			"options": {
				"spare": true,
				"computeOnDirty": true,
				"cook": false
			},
			"raw_input": [
				0.89,
				0.254,
				0.356
			]
		},
		"colorRole2": {
			"type": "color",
			"default_value": [
				0,
				0,
				0
			],
			"options": {
				"spare": true,
				"computeOnDirty": true,
				"cook": false
			},
			"raw_input": [
				0,
				0.619,
				0.992
			]
		},
		"colorRole3": {
			"type": "color",
			"default_value": [
				0,
				0,
				0
			],
			"options": {
				"spare": true,
				"computeOnDirty": true,
				"cook": false
			},
			"raw_input": [
				0.996,
				0.454,
				0.298
			]
		},
		"colorRole4": {
			"type": "color",
			"default_value": [
				0,
				0,
				0
			],
			"options": {
				"spare": true,
				"computeOnDirty": true,
				"cook": false
			},
			"raw_input": [
				1,
				0.686,
				0.215
			]
		},
		"colorRole5": {
			"type": "color",
			"default_value": [
				0,
				0,
				0
			],
			"options": {
				"spare": true,
				"computeOnDirty": true,
				"cook": false
			},
			"raw_input": [
				0,
				0.772,
				0.839
			]
		},
		"threshold": {
			"type": "float",
			"default_value": 0,
			"options": {
				"spare": true,
				"computeOnDirty": true,
				"cook": false
			},
			"raw_input": 0.3
		},
		"visiblesCount": {
			"type": "float",
			"default_value": 0,
			"options": {
				"spare": true,
				"computeOnDirty": true,
				"cook": false
			},
			"raw_input": 3
		},
		"ramp": {
			"type": "ramp",
			"default_value": {
				"interpolation": "linear",
				"points": [
					{
						"position": 0,
						"value": 0
					},
					{
						"position": 1,
						"value": 1
					}
				]
			},
			"options": {
				"spare": true,
				"computeOnDirty": true,
				"cook": false
			},
			"raw_input": {
				"interpolation": "",
				"points": [
					{
						"position": 0.6837878323016117,
						"value": 0
					},
					{
						"position": 0.7250988106625279,
						"value": 1
					}
				]
			}
		}
	},
	"persisted_config": {
		"material": {
			"metadata": {
				"version": 4.5,
				"type": "Material",
				"generator": "Material.toJSON"
			},
			"uuid": "AD4518EE-9A25-4ED1-81BB-3C283BFB18E9",
			"type": "ShaderMaterial",
			"name": "/MAT/mesh_basic_builder_SELECTED_DOTS",
			"side": 2,
			"depthFunc": 3,
			"depthTest": true,
			"depthWrite": true,
			"stencilWrite": false,
			"stencilWriteMask": 255,
			"stencilFunc": 519,
			"stencilRef": 0,
			"stencilFuncMask": 255,
			"stencilFail": 7680,
			"stencilZFail": 7680,
			"stencilZPass": 7680,
			"glslVersion": null,
			"uniforms": {
				"diffuse": {
					"type": "c",
					"value": 15658734
				},
				"opacity": {
					"value": 1
				},
				"map": {
					"value": null
				},
				"uvTransform": {
					"type": "m3",
					"value": [
						1,
						0,
						0,
						0,
						1,
						0,
						0,
						0,
						1
					]
				},
				"uv2Transform": {
					"type": "m3",
					"value": [
						1,
						0,
						0,
						0,
						1,
						0,
						0,
						0,
						1
					]
				},
				"alphaMap": {
					"value": null
				},
				"specularMap": {
					"value": null
				},
				"envMap": {
					"value": null
				},
				"flipEnvMap": {
					"value": -1
				},
				"reflectivity": {
					"value": 1
				},
				"refractionRatio": {
					"value": 0.98
				},
				"maxMipLevel": {
					"value": 0
				},
				"aoMap": {
					"value": null
				},
				"aoMapIntensity": {
					"value": 1
				},
				"lightMap": {
					"value": null
				},
				"lightMapIntensity": {
					"value": 1
				},
				"fogDensity": {
					"value": 0.00025
				},
				"fogNear": {
					"value": 1
				},
				"fogFar": {
					"value": 2000
				},
				"fogColor": {
					"type": "c",
					"value": 16777215
				},
				"v_POLY_param2_val": {
					"value": 0
				},
				"v_POLY_param_color_role0_val": {
					"type": "c",
					"value": 6693371
				},
				"v_POLY_param_color_role1_val": {
					"type": "c",
					"value": 14827610
				},
				"v_POLY_param_color_role2_val": {
					"type": "c",
					"value": 40444
				},
				"v_POLY_param_color_role3_val": {
					"type": "c",
					"value": 16610123
				},
				"v_POLY_param_color_role4_val": {
					"type": "c",
					"value": 16756278
				},
				"v_POLY_param_color_role5_val": {
					"type": "c",
					"value": 50389
				},
				"v_POLY_param_threshold_val": {
					"value": 0.3
				},
				"v_POLY_param_visibles_count_val": {
					"value": 3
				},
				"ramp_texture_v_POLY_ramp1_val": {
					"value": null
				},
				"time": {
					"value": 20.716666666666665
				}
			},
			"vertexShader": "\n#include <common>\n\n\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/rotate1\n\n\n// https://github.com/mattatz/ShibuyaCrowd/blob/master/source/shaders/common/quaternion.glsl\nvec4 quatMult(vec4 q1, vec4 q2)\n{\n\treturn vec4(\n\tq1.w * q2.x + q1.x * q2.w + q1.z * q2.y - q1.y * q2.z,\n\tq1.w * q2.y + q1.y * q2.w + q1.x * q2.z - q1.z * q2.x,\n\tq1.w * q2.z + q1.z * q2.w + q1.y * q2.x - q1.x * q2.y,\n\tq1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z\n\t);\n}\n// http://glmatrix.net/docs/quat.js.html#line97\n//   let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n\n//   let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n//   out[0] = ax * bw + aw * bx + ay * bz - az * by;\n\n//   out[1] = ay * bw + aw * by + az * bx - ax * bz;\n\n//   out[2] = az * bw + aw * bz + ax * by - ay * bx;\n\n//   out[3] = aw * bw - ax * bx - ay * by - az * bz;\n\n//   return out\n\n\n\n// http://www.neilmendoza.com/glsl-rotation-about-an-arbitrary-axis/\nmat4 rotationMatrix(vec3 axis, float angle)\n{\n\taxis = normalize(axis);\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\n\tfloat oc = 1.0 - c;\n\n \treturn mat4(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s, 0.0, oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s,  0.0, oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c, 0.0, 0.0, 0.0, 0.0, 1.0);\n}\n\n// https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\nvec4 quatFromAxisAngle(vec3 axis, float angle)\n{\n\tvec4 qr;\n\tfloat half_angle = (angle * 0.5); // * 3.14159 / 180.0;\n\tfloat sin_half_angle = sin(half_angle);\n\tqr.x = axis.x * sin_half_angle;\n\tqr.y = axis.y * sin_half_angle;\n\tqr.z = axis.z * sin_half_angle;\n\tqr.w = cos(half_angle);\n\treturn qr;\n}\nvec3 rotateWithAxisAngle(vec3 position, vec3 axis, float angle)\n{\n\tvec4 q = quatFromAxisAngle(axis, angle);\n\tvec3 v = position.xyz;\n\treturn v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\n}\n// vec3 applyQuaternionToVector( vec4 q, vec3 v ){\n// \treturn v + 2.0 * cross( q.xyz, cross( q.xyz, v ) + q.w * v );\n// }\nvec3 rotateWithQuat( vec3 v, vec4 q )\n{\n\t// vec4 qv = multQuat( quat, vec4(vec, 0.0) );\n\t// return multQuat( qv, vec4(-quat.x, -quat.y, -quat.z, quat.w) ).xyz;\n\treturn v + 2.0 * cross( q.xyz, cross( q.xyz, v ) + q.w * v );\n}\n// https://github.com/glslify/glsl-look-at/blob/gh-pages/index.glsl\n// mat3 rotation_matrix(vec3 origin, vec3 target, float roll) {\n// \tvec3 rr = vec3(sin(roll), cos(roll), 0.0);\n// \tvec3 ww = normalize(target - origin);\n// \tvec3 uu = normalize(cross(ww, rr));\n// \tvec3 vv = normalize(cross(uu, ww));\n\n// \treturn mat3(uu, vv, ww);\n// }\n// mat3 rotation_matrix(vec3 target, float roll) {\n// \tvec3 rr = vec3(sin(roll), cos(roll), 0.0);\n// \tvec3 ww = normalize(target);\n// \tvec3 uu = normalize(cross(ww, rr));\n// \tvec3 vv = normalize(cross(uu, ww));\n\n// \treturn mat3(uu, vv, ww);\n// }\n\nfloat vectorAngle(vec3 start, vec3 dest){\n\tstart = normalize(start);\n\tdest = normalize(dest);\n\n\tfloat cosTheta = dot(start, dest);\n\tvec3 c1 = cross(start, dest);\n\t// We use the dot product of the cross with the Y axis.\n\t// This is a little arbitrary, but can still give a good sense of direction\n\tvec3 y_axis = vec3(0.0, 1.0, 0.0);\n\tfloat d1 = dot(c1, y_axis);\n\tfloat angle = acos(cosTheta) * sign(d1);\n\treturn angle;\n}\n\n// http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#i-need-an-equivalent-of-glulookat-how-do-i-orient-an-object-towards-a-point-\nvec4 vectorAlign(vec3 start, vec3 dest){\n\tstart = normalize(start);\n\tdest = normalize(dest);\n\n\tfloat cosTheta = dot(start, dest);\n\tvec3 axis;\n\n\t// if (cosTheta < -1 + 0.001f){\n\t// \t// special case when vectors in opposite directions:\n\t// \t// there is no \"ideal\" rotation axis\n\t// \t// So guess one; any will do as long as it's perpendicular to start\n\t// \taxis = cross(vec3(0.0f, 0.0f, 1.0f), start);\n\t// \tif (length2(axis) < 0.01 ) // bad luck, they were parallel, try again!\n\t// \t\taxis = cross(vec3(1.0f, 0.0f, 0.0f), start);\n\n\t// \taxis = normalize(axis);\n\t// \treturn gtx::quaternion::angleAxis(glm::radians(180.0f), axis);\n\t// }\n\tif(cosTheta > (1.0 - 0.0001) || cosTheta < (-1.0 + 0.0001) ){\n\t\taxis = normalize(cross(start, vec3(0.0, 1.0, 0.0)));\n\t\tif (length(axis) < 0.001 ){ // bad luck, they were parallel, try again!\n\t\t\taxis = normalize(cross(start, vec3(1.0, 0.0, 0.0)));\n\t\t}\n\t} else {\n\t\taxis = normalize(cross(start, dest));\n\t}\n\n\tfloat angle = acos(cosTheta);\n\n\treturn quatFromAxisAngle(axis, angle);\n}\nvec4 vectorAlignWithUp(vec3 start, vec3 dest, vec3 up){\n\tvec4 rot1 = vectorAlign(start, dest);\n\tup = normalize(up);\n\n\t// Recompute desiredUp so that it's perpendicular to the direction\n\t// You can skip that part if you really want to force desiredUp\n\t// vec3 right = normalize(cross(dest, up));\n\t// up = normalize(cross(right, dest));\n\n\t// Because of the 1rst rotation, the up is probably completely screwed up.\n\t// Find the rotation between the \"up\" of the rotated object, and the desired up\n\tvec3 newUp = rotateWithQuat(vec3(0.0, 1.0, 0.0), rot1);//rot1 * vec3(0.0, 1.0, 0.0);\n\tvec4 rot2 = vectorAlign(up, newUp);\n\n\t// return rot1;\n\treturn rot2;\n\t// return multQuat(rot1, rot2);\n\t// return rot2 * rot1;\n\n}\n\n// https://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\nfloat quatToAngle(vec4 q){\n\treturn 2.0 * acos(q.w);\n}\nvec3 quatToAxis(vec4 q){\n\treturn vec3(\n\t\tq.x / sqrt(1.0-q.w*q.w),\n\t\tq.y / sqrt(1.0-q.w*q.w),\n\t\tq.z / sqrt(1.0-q.w*q.w)\n\t);\n}\n\nvec4 align(vec3 dir, vec3 up){\n\tvec3 start_dir = vec3(0.0, 0.0, 1.0);\n\tvec3 start_up = vec3(0.0, 1.0, 0.0);\n\tvec4 rot1 = vectorAlign(start_dir, dir);\n\tup = normalize(up);\n\n\t// Recompute desiredUp so that it's perpendicular to the direction\n\t// You can skip that part if you really want to force desiredUp\n\tvec3 right = normalize(cross(dir, up));\n\tif(length(right)<0.001){\n\t\tright = vec3(1.0, 0.0, 0.0);\n\t}\n\tup = normalize(cross(right, dir));\n\n\t// Because of the 1rst rotation, the up is probably completely screwed up.\n\t// Find the rotation between the \"up\" of the rotated object, and the desired up\n\tvec3 newUp = rotateWithQuat(start_up, rot1);//rot1 * vec3(0.0, 1.0, 0.0);\n\tvec4 rot2 = vectorAlign(normalize(newUp), up);\n\n\t// return rot1;\n\treturn quatMult(rot1, rot2);\n\t// return rot2 * rot1;\n\n}\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/easing1\nfloat exponentialOut(float t) {\n  return t == 1.0 ? t : 1.0 - pow(2.0, -10.0 * t);\n}\n\n\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/complement2\nfloat complement(float x){return 1.0-x;}\nvec2 complement(vec2 x){return vec2(1.0-x.x, 1.0-x.y);}\nvec3 complement(vec3 x){return vec3(1.0-x.x, 1.0-x.y, 1.0-x.z);}\nvec4 complement(vec4 x){return vec4(1.0-x.x, 1.0-x.y, 1.0-x.z, 1.0-x.w);}\n\n\n\n\n\n\n\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/globals2\nuniform float time;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/param2\nuniform float v_POLY_param2_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/param_threshold\nuniform float v_POLY_param_threshold_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/param_visibles_count\nuniform float v_POLY_param_visibles_count_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/globals2\nvarying vec3 v_POLY_globals2_cameraPosition;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute2\nvarying float varying_v_POLY_attribute2_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute1\nvarying float varying_v_POLY_attribute1_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute3\nattribute vec3 instancePosition;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute5\nattribute float id;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute2\nattribute float sphere;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute1\nattribute float role;\n\n\n\n\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\n\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/constant4\n\tfloat v_POLY_constant4_val = 1.01;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute3\n\tvec3 v_POLY_attribute3_val = instancePosition;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/globals2\n\tv_POLY_globals2_cameraPosition = vec3(cameraPosition);\n\tfloat v_POLY_globals2_time = time;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute5\n\tfloat v_POLY_attribute5_val = id;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute2\n\tvarying_v_POLY_attribute2_val = float(sphere);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute1\n\tvarying_v_POLY_attribute1_val = float(role);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/normalize3\n\tvec3 v_POLY_normalize3_normalized = normalize(v_POLY_attribute3_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/multAdd4\n\tfloat v_POLY_multAdd4_val = (v_POLY_param2_val*(v_POLY_globals2_time + 0.0)) + 0.0;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/substract1\n\tfloat v_POLY_substract1_substract = (v_POLY_param_threshold_val - v_POLY_attribute5_val - 0.0 - 0.0 - 0.0 - 0.0 - 0.0);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/multAdd1\n\tfloat v_POLY_multAdd1_val = (1.0*(v_POLY_attribute5_val + v_POLY_param_visibles_count_val)) + 0.0;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/mult3\n\tvec3 v_POLY_mult3_product = (v_POLY_constant4_val * v_POLY_normalize3_normalized);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/compare4\n\tbool v_POLY_compare4_val = (v_POLY_param_threshold_val < v_POLY_multAdd1_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/multAdd2\n\tfloat v_POLY_multAdd2_val = (2.0*(v_POLY_substract1_substract + 0.0)) + 0.0;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/substract2\n\tfloat v_POLY_substract2_substract = (v_POLY_param_threshold_val - v_POLY_multAdd1_val - 0.0 - 0.0 - 0.0 - 0.0 - 0.0);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/rotate1\n\tvec3 v_POLY_rotate1_val = rotateWithAxisAngle(v_POLY_mult3_product, vec3(0.0, 1.0, 0.0), v_POLY_multAdd4_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/clamp2\n\tfloat v_POLY_clamp2_val = clamp(v_POLY_multAdd2_val, 0.0, 1.0);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/multAdd3\n\tfloat v_POLY_multAdd3_val = (2.0*(v_POLY_substract2_substract + 0.0)) + 0.0;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/normalize1\n\tvec3 v_POLY_normalize1_normalized = normalize(v_POLY_rotate1_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/easing1\n\tfloat v_POLY_easing1_out = exponentialOut(v_POLY_clamp2_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/clamp3\n\tfloat v_POLY_clamp3_val = clamp(v_POLY_multAdd3_val, 0.0, 1.0);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/vector_align1\n\tvec4 v_POLY_vector_align1_val = vectorAlignWithUp(vec3(0.0, 1.0, 0.0), v_POLY_normalize1_normalized, vec3(0.0, 0.0, 1.0));\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/complement2\n\tfloat v_POLY_complement2_val = complement(v_POLY_clamp3_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/easing2\n\tfloat v_POLY_easing2_out = exponentialOut(v_POLY_complement2_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/twoWaySwitch1\n\tfloat v_POLY_twoWaySwitch1_val;\n\tif(v_POLY_compare4_val){\n\tv_POLY_twoWaySwitch1_val = v_POLY_easing1_out;\n\t} else {\n\tv_POLY_twoWaySwitch1_val = v_POLY_easing2_out;\n\t}\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/null2\n\tfloat v_POLY_null2_val = v_POLY_twoWaySwitch1_val;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/float_to_vec3_1\n\tvec3 v_POLY_float_to_vec3_1_vec3 = vec3(v_POLY_null2_val, v_POLY_null2_val, v_POLY_null2_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/null_instanceScale\n\tvec3 v_POLY_null_instanceScale_val = v_POLY_float_to_vec3_1_vec3;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/instance_transform1\n\tvec3 v_POLY_instance_transform1_position = vec3(position);\n\tv_POLY_instance_transform1_position *= v_POLY_null_instanceScale_val;\n\tv_POLY_instance_transform1_position = rotateWithQuat( v_POLY_instance_transform1_position, v_POLY_vector_align1_val );\n\tv_POLY_instance_transform1_position += v_POLY_rotate1_val;\n\tvec3 v_POLY_instance_transform1_normal = vec3(normal);\n\tv_POLY_instance_transform1_normal = rotateWithQuat( v_POLY_instance_transform1_normal, v_POLY_vector_align1_val );\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/output1\n\tvec3 transformed = v_POLY_instance_transform1_position;\n\tvec3 objectNormal = v_POLY_instance_transform1_normal;\n\n\n\n\t#include <skinbase_vertex>\n\n\t#ifdef USE_ENVMAP\n\n// removed:\n//\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n\t#endif\n\n// removed:\n//\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n\n}\n",
			"fragmentShader": "\nuniform vec3 diffuse;\nuniform float opacity;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\n#include <common>\n\n\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/rgb_to_hsv1\n// https://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl\nvec3 rgb2hsv(vec3 c)\n{\n\tvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n\tvec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n\tvec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n\tfloat d = q.x - min(q.w, q.y);\n\tfloat e = 1.0e-10;\n\treturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/hsv_to_rgb1\n// https://github.com/hughsk/glsl-hsv2rgb\n// https://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl\nvec3 hsv2rgb(vec3 c) {\n\tvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n\tvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n\treturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\n\n\n\n\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/param_color_role0\nuniform vec3 v_POLY_param_color_role0_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/param_color_role1\nuniform vec3 v_POLY_param_color_role1_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/param_color_role2\nuniform vec3 v_POLY_param_color_role2_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/param_color_role3\nuniform vec3 v_POLY_param_color_role3_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/param_color_role4\nuniform vec3 v_POLY_param_color_role4_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/param_color_role5\nuniform vec3 v_POLY_param_color_role5_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute2\nvarying float varying_v_POLY_attribute2_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute1\nvarying float varying_v_POLY_attribute1_val;\n\n\n\n\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\n\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/constant2\n\tfloat v_POLY_constant2_val = 1.0;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute2\n\tfloat v_POLY_attribute2_val = varying_v_POLY_attribute2_val;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute1\n\tfloat v_POLY_attribute1_val = varying_v_POLY_attribute1_val;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/null1\n\tfloat v_POLY_null1_val = v_POLY_constant2_val;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/round2\n\tfloat v_POLY_round2_val = sign(v_POLY_attribute2_val)*floor(abs(v_POLY_attribute2_val)+0.5);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/round1\n\tfloat v_POLY_round1_val = sign(v_POLY_attribute1_val)*floor(abs(v_POLY_attribute1_val)+0.5);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/null_alpha\n\tfloat v_POLY_null_alpha_val = v_POLY_null1_val;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/compare1\n\tbool v_POLY_compare1_val = (v_POLY_round2_val > 0.51);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/float_to_int1\n\tint v_POLY_float_to_int1_int = int(v_POLY_round1_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/switch1\n\tvec3 v_POLY_switch1_val;\n\tint v_POLY_switch1_index = v_POLY_float_to_int1_int;\n\tif(v_POLY_switch1_index == 0){v_POLY_switch1_val = v_POLY_param_color_role0_val;}\n\telse if(v_POLY_switch1_index == 1){v_POLY_switch1_val = v_POLY_param_color_role1_val;}\n\telse if(v_POLY_switch1_index == 2){v_POLY_switch1_val = v_POLY_param_color_role2_val;}\n\telse if(v_POLY_switch1_index == 3){v_POLY_switch1_val = v_POLY_param_color_role3_val;}\n\telse if(v_POLY_switch1_index == 4){v_POLY_switch1_val = v_POLY_param_color_role4_val;}\n\telse if(v_POLY_switch1_index == 5){v_POLY_switch1_val = v_POLY_param_color_role5_val;}\n\telse if(v_POLY_switch1_index == 6){v_POLY_switch1_val = vec3(0.0, 0.0, 0.0);}\n\telse if(v_POLY_switch1_index == 7){v_POLY_switch1_val = vec3(0.0, 0.0, 0.0);}\n\telse if(v_POLY_switch1_index == 8){v_POLY_switch1_val = vec3(0.0, 0.0, 0.0);}\n\telse if(v_POLY_switch1_index == 9){v_POLY_switch1_val = vec3(0.0, 0.0, 0.0);}\n\telse if(v_POLY_switch1_index == 10){v_POLY_switch1_val = vec3(0.0, 0.0, 0.0);}\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/rgb_to_hsv1\n\tvec3 v_POLY_rgb_to_hsv1_hsv = rgb2hsv(v_POLY_switch1_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/vec3_to_float1\n\tfloat v_POLY_vec3_to_float1_x = v_POLY_rgb_to_hsv1_hsv.x;\n\tfloat v_POLY_vec3_to_float1_z = v_POLY_rgb_to_hsv1_hsv.z;\n\tfloat v_POLY_vec3_to_float1_y = v_POLY_rgb_to_hsv1_hsv.y;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/multAdd6\n\tfloat v_POLY_multAdd6_val = (0.34*(v_POLY_vec3_to_float1_y + 0.0)) + 0.0;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/float_to_vec3_2\n\tvec3 v_POLY_float_to_vec3_2_vec3 = vec3(v_POLY_vec3_to_float1_x, v_POLY_multAdd6_val, v_POLY_vec3_to_float1_z);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/hsv_to_rgb1\n\tvec3 v_POLY_hsv_to_rgb1_rgb = hsv2rgb(v_POLY_float_to_vec3_2_vec3);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/twoWaySwitch2\n\tvec3 v_POLY_twoWaySwitch2_val;\n\tif(v_POLY_compare1_val){\n\tv_POLY_twoWaySwitch2_val = v_POLY_switch1_val;\n\t} else {\n\tv_POLY_twoWaySwitch2_val = v_POLY_hsv_to_rgb1_rgb;\n\t}\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/null3\n\tvec3 v_POLY_null3_val = v_POLY_twoWaySwitch2_val;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/mult1\n\tvec3 v_POLY_mult1_product = (v_POLY_null1_val * v_POLY_null3_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/null_color\n\tvec3 v_POLY_null_color_val = v_POLY_mult1_product;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/output1\n\tdiffuseColor.xyz = v_POLY_null_color_val;\n\tdiffuseColor.a = v_POLY_null_alpha_val;\n\n\n\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\n\t// accumulation (baked indirect lighting only)\n\t#ifdef USE_LIGHTMAP\n\t\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\n\t#else\n\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\n\t#endif\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\n\t#include <envmap_fragment>\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n",
			"lights": false
		},
		"uniforms_time_dependent": true,
		"uniforms_resolution_dependent": false,
		"param_uniform_pairs": [
			[
				"rotationSpeed",
				"v_POLY_param2_val"
			],
			[
				"colorRole0",
				"v_POLY_param_color_role0_val"
			],
			[
				"colorRole1",
				"v_POLY_param_color_role1_val"
			],
			[
				"colorRole2",
				"v_POLY_param_color_role2_val"
			],
			[
				"colorRole3",
				"v_POLY_param_color_role3_val"
			],
			[
				"colorRole4",
				"v_POLY_param_color_role4_val"
			],
			[
				"colorRole5",
				"v_POLY_param_color_role5_val"
			],
			[
				"threshold",
				"v_POLY_param_threshold_val"
			],
			[
				"visiblesCount",
				"v_POLY_param_visibles_count_val"
			],
			[
				"ramp",
				"ramp_texture_v_POLY_ramp1_val"
			]
		],
		"custom_materials": {
			"customDistanceMaterial": {
				"metadata": {
					"version": 4.5,
					"type": "Material",
					"generator": "Material.toJSON"
				},
				"uuid": "B4D45A9B-7EC8-4A4D-AB7E-A7830247FE4F",
				"type": "ShaderMaterial",
				"depthFunc": 3,
				"depthTest": true,
				"depthWrite": true,
				"stencilWrite": false,
				"stencilWriteMask": 255,
				"stencilFunc": 519,
				"stencilRef": 0,
				"stencilFuncMask": 255,
				"stencilFail": 7680,
				"stencilZFail": 7680,
				"stencilZPass": 7680,
				"glslVersion": null,
				"uniforms": {
					"diffuse": {
						"type": "c",
						"value": 15658734
					},
					"opacity": {
						"value": 1
					},
					"map": {
						"value": null
					},
					"uvTransform": {
						"type": "m3",
						"value": [
							1,
							0,
							0,
							0,
							1,
							0,
							0,
							0,
							1
						]
					},
					"uv2Transform": {
						"type": "m3",
						"value": [
							1,
							0,
							0,
							0,
							1,
							0,
							0,
							0,
							1
						]
					},
					"alphaMap": {
						"value": null
					},
					"displacementMap": {
						"value": null
					},
					"displacementScale": {
						"value": 1
					},
					"displacementBias": {
						"value": 0
					},
					"referencePosition": {
						"type": "v3",
						"value": [
							0,
							0,
							0
						]
					},
					"nearDistance": {
						"value": 1
					},
					"farDistance": {
						"value": 1000
					},
					"v_POLY_param2_val": {
						"value": 0
					},
					"v_POLY_param_color_role0_val": {
						"type": "c",
						"value": 6693371
					},
					"v_POLY_param_color_role1_val": {
						"type": "c",
						"value": 14827610
					},
					"v_POLY_param_color_role2_val": {
						"type": "c",
						"value": 40444
					},
					"v_POLY_param_color_role3_val": {
						"type": "c",
						"value": 16610123
					},
					"v_POLY_param_color_role4_val": {
						"type": "c",
						"value": 16756278
					},
					"v_POLY_param_color_role5_val": {
						"type": "c",
						"value": 50389
					},
					"v_POLY_param_threshold_val": {
						"value": 0.3
					},
					"v_POLY_param_visibles_count_val": {
						"value": 3
					},
					"ramp_texture_v_POLY_ramp1_val": {
						"value": null
					}
				},
				"defines": {
					"DEPTH_PACKING": 3201
				},
				"vertexShader": "\n#define DISTANCE\n\nvarying vec3 vWorldPosition;\n\n#include <common>\n\n\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/rotate1\n\n\n// https://github.com/mattatz/ShibuyaCrowd/blob/master/source/shaders/common/quaternion.glsl\nvec4 quatMult(vec4 q1, vec4 q2)\n{\n\treturn vec4(\n\tq1.w * q2.x + q1.x * q2.w + q1.z * q2.y - q1.y * q2.z,\n\tq1.w * q2.y + q1.y * q2.w + q1.x * q2.z - q1.z * q2.x,\n\tq1.w * q2.z + q1.z * q2.w + q1.y * q2.x - q1.x * q2.y,\n\tq1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z\n\t);\n}\n// http://glmatrix.net/docs/quat.js.html#line97\n//   let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n\n//   let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n//   out[0] = ax * bw + aw * bx + ay * bz - az * by;\n\n//   out[1] = ay * bw + aw * by + az * bx - ax * bz;\n\n//   out[2] = az * bw + aw * bz + ax * by - ay * bx;\n\n//   out[3] = aw * bw - ax * bx - ay * by - az * bz;\n\n//   return out\n\n\n\n// http://www.neilmendoza.com/glsl-rotation-about-an-arbitrary-axis/\nmat4 rotationMatrix(vec3 axis, float angle)\n{\n\taxis = normalize(axis);\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\n\tfloat oc = 1.0 - c;\n\n \treturn mat4(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s, 0.0, oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s,  0.0, oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c, 0.0, 0.0, 0.0, 0.0, 1.0);\n}\n\n// https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\nvec4 quatFromAxisAngle(vec3 axis, float angle)\n{\n\tvec4 qr;\n\tfloat half_angle = (angle * 0.5); // * 3.14159 / 180.0;\n\tfloat sin_half_angle = sin(half_angle);\n\tqr.x = axis.x * sin_half_angle;\n\tqr.y = axis.y * sin_half_angle;\n\tqr.z = axis.z * sin_half_angle;\n\tqr.w = cos(half_angle);\n\treturn qr;\n}\nvec3 rotateWithAxisAngle(vec3 position, vec3 axis, float angle)\n{\n\tvec4 q = quatFromAxisAngle(axis, angle);\n\tvec3 v = position.xyz;\n\treturn v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\n}\n// vec3 applyQuaternionToVector( vec4 q, vec3 v ){\n// \treturn v + 2.0 * cross( q.xyz, cross( q.xyz, v ) + q.w * v );\n// }\nvec3 rotateWithQuat( vec3 v, vec4 q )\n{\n\t// vec4 qv = multQuat( quat, vec4(vec, 0.0) );\n\t// return multQuat( qv, vec4(-quat.x, -quat.y, -quat.z, quat.w) ).xyz;\n\treturn v + 2.0 * cross( q.xyz, cross( q.xyz, v ) + q.w * v );\n}\n// https://github.com/glslify/glsl-look-at/blob/gh-pages/index.glsl\n// mat3 rotation_matrix(vec3 origin, vec3 target, float roll) {\n// \tvec3 rr = vec3(sin(roll), cos(roll), 0.0);\n// \tvec3 ww = normalize(target - origin);\n// \tvec3 uu = normalize(cross(ww, rr));\n// \tvec3 vv = normalize(cross(uu, ww));\n\n// \treturn mat3(uu, vv, ww);\n// }\n// mat3 rotation_matrix(vec3 target, float roll) {\n// \tvec3 rr = vec3(sin(roll), cos(roll), 0.0);\n// \tvec3 ww = normalize(target);\n// \tvec3 uu = normalize(cross(ww, rr));\n// \tvec3 vv = normalize(cross(uu, ww));\n\n// \treturn mat3(uu, vv, ww);\n// }\n\nfloat vectorAngle(vec3 start, vec3 dest){\n\tstart = normalize(start);\n\tdest = normalize(dest);\n\n\tfloat cosTheta = dot(start, dest);\n\tvec3 c1 = cross(start, dest);\n\t// We use the dot product of the cross with the Y axis.\n\t// This is a little arbitrary, but can still give a good sense of direction\n\tvec3 y_axis = vec3(0.0, 1.0, 0.0);\n\tfloat d1 = dot(c1, y_axis);\n\tfloat angle = acos(cosTheta) * sign(d1);\n\treturn angle;\n}\n\n// http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#i-need-an-equivalent-of-glulookat-how-do-i-orient-an-object-towards-a-point-\nvec4 vectorAlign(vec3 start, vec3 dest){\n\tstart = normalize(start);\n\tdest = normalize(dest);\n\n\tfloat cosTheta = dot(start, dest);\n\tvec3 axis;\n\n\t// if (cosTheta < -1 + 0.001f){\n\t// \t// special case when vectors in opposite directions:\n\t// \t// there is no \"ideal\" rotation axis\n\t// \t// So guess one; any will do as long as it's perpendicular to start\n\t// \taxis = cross(vec3(0.0f, 0.0f, 1.0f), start);\n\t// \tif (length2(axis) < 0.01 ) // bad luck, they were parallel, try again!\n\t// \t\taxis = cross(vec3(1.0f, 0.0f, 0.0f), start);\n\n\t// \taxis = normalize(axis);\n\t// \treturn gtx::quaternion::angleAxis(glm::radians(180.0f), axis);\n\t// }\n\tif(cosTheta > (1.0 - 0.0001) || cosTheta < (-1.0 + 0.0001) ){\n\t\taxis = normalize(cross(start, vec3(0.0, 1.0, 0.0)));\n\t\tif (length(axis) < 0.001 ){ // bad luck, they were parallel, try again!\n\t\t\taxis = normalize(cross(start, vec3(1.0, 0.0, 0.0)));\n\t\t}\n\t} else {\n\t\taxis = normalize(cross(start, dest));\n\t}\n\n\tfloat angle = acos(cosTheta);\n\n\treturn quatFromAxisAngle(axis, angle);\n}\nvec4 vectorAlignWithUp(vec3 start, vec3 dest, vec3 up){\n\tvec4 rot1 = vectorAlign(start, dest);\n\tup = normalize(up);\n\n\t// Recompute desiredUp so that it's perpendicular to the direction\n\t// You can skip that part if you really want to force desiredUp\n\t// vec3 right = normalize(cross(dest, up));\n\t// up = normalize(cross(right, dest));\n\n\t// Because of the 1rst rotation, the up is probably completely screwed up.\n\t// Find the rotation between the \"up\" of the rotated object, and the desired up\n\tvec3 newUp = rotateWithQuat(vec3(0.0, 1.0, 0.0), rot1);//rot1 * vec3(0.0, 1.0, 0.0);\n\tvec4 rot2 = vectorAlign(up, newUp);\n\n\t// return rot1;\n\treturn rot2;\n\t// return multQuat(rot1, rot2);\n\t// return rot2 * rot1;\n\n}\n\n// https://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\nfloat quatToAngle(vec4 q){\n\treturn 2.0 * acos(q.w);\n}\nvec3 quatToAxis(vec4 q){\n\treturn vec3(\n\t\tq.x / sqrt(1.0-q.w*q.w),\n\t\tq.y / sqrt(1.0-q.w*q.w),\n\t\tq.z / sqrt(1.0-q.w*q.w)\n\t);\n}\n\nvec4 align(vec3 dir, vec3 up){\n\tvec3 start_dir = vec3(0.0, 0.0, 1.0);\n\tvec3 start_up = vec3(0.0, 1.0, 0.0);\n\tvec4 rot1 = vectorAlign(start_dir, dir);\n\tup = normalize(up);\n\n\t// Recompute desiredUp so that it's perpendicular to the direction\n\t// You can skip that part if you really want to force desiredUp\n\tvec3 right = normalize(cross(dir, up));\n\tif(length(right)<0.001){\n\t\tright = vec3(1.0, 0.0, 0.0);\n\t}\n\tup = normalize(cross(right, dir));\n\n\t// Because of the 1rst rotation, the up is probably completely screwed up.\n\t// Find the rotation between the \"up\" of the rotated object, and the desired up\n\tvec3 newUp = rotateWithQuat(start_up, rot1);//rot1 * vec3(0.0, 1.0, 0.0);\n\tvec4 rot2 = vectorAlign(normalize(newUp), up);\n\n\t// return rot1;\n\treturn quatMult(rot1, rot2);\n\t// return rot2 * rot1;\n\n}\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/easing1\nfloat exponentialOut(float t) {\n  return t == 1.0 ? t : 1.0 - pow(2.0, -10.0 * t);\n}\n\n\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/complement2\nfloat complement(float x){return 1.0-x;}\nvec2 complement(vec2 x){return vec2(1.0-x.x, 1.0-x.y);}\nvec3 complement(vec3 x){return vec3(1.0-x.x, 1.0-x.y, 1.0-x.z);}\nvec4 complement(vec4 x){return vec4(1.0-x.x, 1.0-x.y, 1.0-x.z, 1.0-x.w);}\n\n\n\n\n\n\n\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/globals2\nuniform float time;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/param2\nuniform float v_POLY_param2_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/param_threshold\nuniform float v_POLY_param_threshold_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/param_visibles_count\nuniform float v_POLY_param_visibles_count_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/globals2\nvarying vec3 v_POLY_globals2_cameraPosition;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute2\nvarying float varying_v_POLY_attribute2_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute1\nvarying float varying_v_POLY_attribute1_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute3\nattribute vec3 instancePosition;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute5\nattribute float id;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute2\nattribute float sphere;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute1\nattribute float role;\n\n\n\n\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\n\t#include <skinbase_vertex>\n\n\t#ifdef USE_DISPLACEMENTMAP\n\n// removed:\n//\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\n\t#endif\n\n// removed:\n//\t#include <begin_vertex>\n\n\n\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/constant4\n\tfloat v_POLY_constant4_val = 1.01;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute3\n\tvec3 v_POLY_attribute3_val = instancePosition;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/globals2\n\tv_POLY_globals2_cameraPosition = vec3(cameraPosition);\n\tfloat v_POLY_globals2_time = time;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute5\n\tfloat v_POLY_attribute5_val = id;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute2\n\tvarying_v_POLY_attribute2_val = float(sphere);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute1\n\tvarying_v_POLY_attribute1_val = float(role);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/normalize3\n\tvec3 v_POLY_normalize3_normalized = normalize(v_POLY_attribute3_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/multAdd4\n\tfloat v_POLY_multAdd4_val = (v_POLY_param2_val*(v_POLY_globals2_time + 0.0)) + 0.0;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/substract1\n\tfloat v_POLY_substract1_substract = (v_POLY_param_threshold_val - v_POLY_attribute5_val - 0.0 - 0.0 - 0.0 - 0.0 - 0.0);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/multAdd1\n\tfloat v_POLY_multAdd1_val = (1.0*(v_POLY_attribute5_val + v_POLY_param_visibles_count_val)) + 0.0;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/mult3\n\tvec3 v_POLY_mult3_product = (v_POLY_constant4_val * v_POLY_normalize3_normalized);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/compare4\n\tbool v_POLY_compare4_val = (v_POLY_param_threshold_val < v_POLY_multAdd1_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/multAdd2\n\tfloat v_POLY_multAdd2_val = (2.0*(v_POLY_substract1_substract + 0.0)) + 0.0;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/substract2\n\tfloat v_POLY_substract2_substract = (v_POLY_param_threshold_val - v_POLY_multAdd1_val - 0.0 - 0.0 - 0.0 - 0.0 - 0.0);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/rotate1\n\tvec3 v_POLY_rotate1_val = rotateWithAxisAngle(v_POLY_mult3_product, vec3(0.0, 1.0, 0.0), v_POLY_multAdd4_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/clamp2\n\tfloat v_POLY_clamp2_val = clamp(v_POLY_multAdd2_val, 0.0, 1.0);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/multAdd3\n\tfloat v_POLY_multAdd3_val = (2.0*(v_POLY_substract2_substract + 0.0)) + 0.0;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/normalize1\n\tvec3 v_POLY_normalize1_normalized = normalize(v_POLY_rotate1_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/easing1\n\tfloat v_POLY_easing1_out = exponentialOut(v_POLY_clamp2_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/clamp3\n\tfloat v_POLY_clamp3_val = clamp(v_POLY_multAdd3_val, 0.0, 1.0);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/vector_align1\n\tvec4 v_POLY_vector_align1_val = vectorAlignWithUp(vec3(0.0, 1.0, 0.0), v_POLY_normalize1_normalized, vec3(0.0, 0.0, 1.0));\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/complement2\n\tfloat v_POLY_complement2_val = complement(v_POLY_clamp3_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/easing2\n\tfloat v_POLY_easing2_out = exponentialOut(v_POLY_complement2_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/twoWaySwitch1\n\tfloat v_POLY_twoWaySwitch1_val;\n\tif(v_POLY_compare4_val){\n\tv_POLY_twoWaySwitch1_val = v_POLY_easing1_out;\n\t} else {\n\tv_POLY_twoWaySwitch1_val = v_POLY_easing2_out;\n\t}\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/null2\n\tfloat v_POLY_null2_val = v_POLY_twoWaySwitch1_val;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/float_to_vec3_1\n\tvec3 v_POLY_float_to_vec3_1_vec3 = vec3(v_POLY_null2_val, v_POLY_null2_val, v_POLY_null2_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/null_instanceScale\n\tvec3 v_POLY_null_instanceScale_val = v_POLY_float_to_vec3_1_vec3;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/instance_transform1\n\tvec3 v_POLY_instance_transform1_position = vec3(position);\n\tv_POLY_instance_transform1_position *= v_POLY_null_instanceScale_val;\n\tv_POLY_instance_transform1_position = rotateWithQuat( v_POLY_instance_transform1_position, v_POLY_vector_align1_val );\n\tv_POLY_instance_transform1_position += v_POLY_rotate1_val;\n\tvec3 v_POLY_instance_transform1_normal = vec3(normal);\n\tv_POLY_instance_transform1_normal = rotateWithQuat( v_POLY_instance_transform1_normal, v_POLY_vector_align1_val );\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/output1\n\tvec3 transformed = v_POLY_instance_transform1_position;\n\tvec3 objectNormal = v_POLY_instance_transform1_normal;\n\n\n\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvWorldPosition = worldPosition.xyz;\n\n}\n",
				"fragmentShader": "\n#define DISTANCE\n\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n\n#include <common>\n\n\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/rgb_to_hsv1\n// https://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl\nvec3 rgb2hsv(vec3 c)\n{\n\tvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n\tvec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n\tvec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n\tfloat d = q.x - min(q.w, q.y);\n\tfloat e = 1.0e-10;\n\treturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/hsv_to_rgb1\n// https://github.com/hughsk/glsl-hsv2rgb\n// https://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl\nvec3 hsv2rgb(vec3 c) {\n\tvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n\tvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n\treturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\n\n\n\n\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/param_color_role0\nuniform vec3 v_POLY_param_color_role0_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/param_color_role1\nuniform vec3 v_POLY_param_color_role1_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/param_color_role2\nuniform vec3 v_POLY_param_color_role2_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/param_color_role3\nuniform vec3 v_POLY_param_color_role3_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/param_color_role4\nuniform vec3 v_POLY_param_color_role4_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/param_color_role5\nuniform vec3 v_POLY_param_color_role5_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute2\nvarying float varying_v_POLY_attribute2_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute1\nvarying float varying_v_POLY_attribute1_val;\n\n\n\n\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main () {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\n\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/constant2\n\tfloat v_POLY_constant2_val = 1.0;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute2\n\tfloat v_POLY_attribute2_val = varying_v_POLY_attribute2_val;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute1\n\tfloat v_POLY_attribute1_val = varying_v_POLY_attribute1_val;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/null1\n\tfloat v_POLY_null1_val = v_POLY_constant2_val;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/round2\n\tfloat v_POLY_round2_val = sign(v_POLY_attribute2_val)*floor(abs(v_POLY_attribute2_val)+0.5);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/round1\n\tfloat v_POLY_round1_val = sign(v_POLY_attribute1_val)*floor(abs(v_POLY_attribute1_val)+0.5);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/null_alpha\n\tfloat v_POLY_null_alpha_val = v_POLY_null1_val;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/compare1\n\tbool v_POLY_compare1_val = (v_POLY_round2_val > 0.51);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/float_to_int1\n\tint v_POLY_float_to_int1_int = int(v_POLY_round1_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/switch1\n\tvec3 v_POLY_switch1_val;\n\tint v_POLY_switch1_index = v_POLY_float_to_int1_int;\n\tif(v_POLY_switch1_index == 0){v_POLY_switch1_val = v_POLY_param_color_role0_val;}\n\telse if(v_POLY_switch1_index == 1){v_POLY_switch1_val = v_POLY_param_color_role1_val;}\n\telse if(v_POLY_switch1_index == 2){v_POLY_switch1_val = v_POLY_param_color_role2_val;}\n\telse if(v_POLY_switch1_index == 3){v_POLY_switch1_val = v_POLY_param_color_role3_val;}\n\telse if(v_POLY_switch1_index == 4){v_POLY_switch1_val = v_POLY_param_color_role4_val;}\n\telse if(v_POLY_switch1_index == 5){v_POLY_switch1_val = v_POLY_param_color_role5_val;}\n\telse if(v_POLY_switch1_index == 6){v_POLY_switch1_val = vec3(0.0, 0.0, 0.0);}\n\telse if(v_POLY_switch1_index == 7){v_POLY_switch1_val = vec3(0.0, 0.0, 0.0);}\n\telse if(v_POLY_switch1_index == 8){v_POLY_switch1_val = vec3(0.0, 0.0, 0.0);}\n\telse if(v_POLY_switch1_index == 9){v_POLY_switch1_val = vec3(0.0, 0.0, 0.0);}\n\telse if(v_POLY_switch1_index == 10){v_POLY_switch1_val = vec3(0.0, 0.0, 0.0);}\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/rgb_to_hsv1\n\tvec3 v_POLY_rgb_to_hsv1_hsv = rgb2hsv(v_POLY_switch1_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/vec3_to_float1\n\tfloat v_POLY_vec3_to_float1_x = v_POLY_rgb_to_hsv1_hsv.x;\n\tfloat v_POLY_vec3_to_float1_z = v_POLY_rgb_to_hsv1_hsv.z;\n\tfloat v_POLY_vec3_to_float1_y = v_POLY_rgb_to_hsv1_hsv.y;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/multAdd6\n\tfloat v_POLY_multAdd6_val = (0.34*(v_POLY_vec3_to_float1_y + 0.0)) + 0.0;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/float_to_vec3_2\n\tvec3 v_POLY_float_to_vec3_2_vec3 = vec3(v_POLY_vec3_to_float1_x, v_POLY_multAdd6_val, v_POLY_vec3_to_float1_z);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/hsv_to_rgb1\n\tvec3 v_POLY_hsv_to_rgb1_rgb = hsv2rgb(v_POLY_float_to_vec3_2_vec3);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/twoWaySwitch2\n\tvec3 v_POLY_twoWaySwitch2_val;\n\tif(v_POLY_compare1_val){\n\tv_POLY_twoWaySwitch2_val = v_POLY_switch1_val;\n\t} else {\n\tv_POLY_twoWaySwitch2_val = v_POLY_hsv_to_rgb1_rgb;\n\t}\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/null3\n\tvec3 v_POLY_null3_val = v_POLY_twoWaySwitch2_val;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/mult1\n\tvec3 v_POLY_mult1_product = (v_POLY_null1_val * v_POLY_null3_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/null_color\n\tvec3 v_POLY_null_color_val = v_POLY_mult1_product;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/output1\n\tdiffuseColor.xyz = v_POLY_null_color_val;\n\tdiffuseColor.a = v_POLY_null_alpha_val;\n\n\n\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist ); // clamp to [ 0, 1 ]\n\n\tgl_FragColor = packDepthToRGBA( dist );\n\n}\n",
				"lights": false
			},
			"customDepthMaterial": {
				"metadata": {
					"version": 4.5,
					"type": "Material",
					"generator": "Material.toJSON"
				},
				"uuid": "0B6DF249-E507-45F5-96A0-7ED7E5548350",
				"type": "ShaderMaterial",
				"side": 2,
				"depthFunc": 3,
				"depthTest": true,
				"depthWrite": true,
				"stencilWrite": false,
				"stencilWriteMask": 255,
				"stencilFunc": 519,
				"stencilRef": 0,
				"stencilFuncMask": 255,
				"stencilFail": 7680,
				"stencilZFail": 7680,
				"stencilZPass": 7680,
				"glslVersion": null,
				"uniforms": {
					"diffuse": {
						"type": "c",
						"value": 15658734
					},
					"opacity": {
						"value": 1
					},
					"map": {
						"value": null
					},
					"uvTransform": {
						"type": "m3",
						"value": [
							1,
							0,
							0,
							0,
							1,
							0,
							0,
							0,
							1
						]
					},
					"uv2Transform": {
						"type": "m3",
						"value": [
							1,
							0,
							0,
							0,
							1,
							0,
							0,
							0,
							1
						]
					},
					"alphaMap": {
						"value": null
					},
					"displacementMap": {
						"value": null
					},
					"displacementScale": {
						"value": 1
					},
					"displacementBias": {
						"value": 0
					},
					"v_POLY_param2_val": {
						"value": 0
					},
					"v_POLY_param_color_role0_val": {
						"type": "c",
						"value": 6693371
					},
					"v_POLY_param_color_role1_val": {
						"type": "c",
						"value": 14827610
					},
					"v_POLY_param_color_role2_val": {
						"type": "c",
						"value": 40444
					},
					"v_POLY_param_color_role3_val": {
						"type": "c",
						"value": 16610123
					},
					"v_POLY_param_color_role4_val": {
						"type": "c",
						"value": 16756278
					},
					"v_POLY_param_color_role5_val": {
						"type": "c",
						"value": 50389
					},
					"v_POLY_param_threshold_val": {
						"value": 0.3
					},
					"v_POLY_param_visibles_count_val": {
						"value": 3
					},
					"ramp_texture_v_POLY_ramp1_val": {
						"value": null
					}
				},
				"defines": {
					"DEPTH_PACKING": 3201
				},
				"vertexShader": "\n#include <common>\n\n\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/rotate1\n\n\n// https://github.com/mattatz/ShibuyaCrowd/blob/master/source/shaders/common/quaternion.glsl\nvec4 quatMult(vec4 q1, vec4 q2)\n{\n\treturn vec4(\n\tq1.w * q2.x + q1.x * q2.w + q1.z * q2.y - q1.y * q2.z,\n\tq1.w * q2.y + q1.y * q2.w + q1.x * q2.z - q1.z * q2.x,\n\tq1.w * q2.z + q1.z * q2.w + q1.y * q2.x - q1.x * q2.y,\n\tq1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z\n\t);\n}\n// http://glmatrix.net/docs/quat.js.html#line97\n//   let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n\n//   let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n//   out[0] = ax * bw + aw * bx + ay * bz - az * by;\n\n//   out[1] = ay * bw + aw * by + az * bx - ax * bz;\n\n//   out[2] = az * bw + aw * bz + ax * by - ay * bx;\n\n//   out[3] = aw * bw - ax * bx - ay * by - az * bz;\n\n//   return out\n\n\n\n// http://www.neilmendoza.com/glsl-rotation-about-an-arbitrary-axis/\nmat4 rotationMatrix(vec3 axis, float angle)\n{\n\taxis = normalize(axis);\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\n\tfloat oc = 1.0 - c;\n\n \treturn mat4(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s, 0.0, oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s,  0.0, oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c, 0.0, 0.0, 0.0, 0.0, 1.0);\n}\n\n// https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\nvec4 quatFromAxisAngle(vec3 axis, float angle)\n{\n\tvec4 qr;\n\tfloat half_angle = (angle * 0.5); // * 3.14159 / 180.0;\n\tfloat sin_half_angle = sin(half_angle);\n\tqr.x = axis.x * sin_half_angle;\n\tqr.y = axis.y * sin_half_angle;\n\tqr.z = axis.z * sin_half_angle;\n\tqr.w = cos(half_angle);\n\treturn qr;\n}\nvec3 rotateWithAxisAngle(vec3 position, vec3 axis, float angle)\n{\n\tvec4 q = quatFromAxisAngle(axis, angle);\n\tvec3 v = position.xyz;\n\treturn v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\n}\n// vec3 applyQuaternionToVector( vec4 q, vec3 v ){\n// \treturn v + 2.0 * cross( q.xyz, cross( q.xyz, v ) + q.w * v );\n// }\nvec3 rotateWithQuat( vec3 v, vec4 q )\n{\n\t// vec4 qv = multQuat( quat, vec4(vec, 0.0) );\n\t// return multQuat( qv, vec4(-quat.x, -quat.y, -quat.z, quat.w) ).xyz;\n\treturn v + 2.0 * cross( q.xyz, cross( q.xyz, v ) + q.w * v );\n}\n// https://github.com/glslify/glsl-look-at/blob/gh-pages/index.glsl\n// mat3 rotation_matrix(vec3 origin, vec3 target, float roll) {\n// \tvec3 rr = vec3(sin(roll), cos(roll), 0.0);\n// \tvec3 ww = normalize(target - origin);\n// \tvec3 uu = normalize(cross(ww, rr));\n// \tvec3 vv = normalize(cross(uu, ww));\n\n// \treturn mat3(uu, vv, ww);\n// }\n// mat3 rotation_matrix(vec3 target, float roll) {\n// \tvec3 rr = vec3(sin(roll), cos(roll), 0.0);\n// \tvec3 ww = normalize(target);\n// \tvec3 uu = normalize(cross(ww, rr));\n// \tvec3 vv = normalize(cross(uu, ww));\n\n// \treturn mat3(uu, vv, ww);\n// }\n\nfloat vectorAngle(vec3 start, vec3 dest){\n\tstart = normalize(start);\n\tdest = normalize(dest);\n\n\tfloat cosTheta = dot(start, dest);\n\tvec3 c1 = cross(start, dest);\n\t// We use the dot product of the cross with the Y axis.\n\t// This is a little arbitrary, but can still give a good sense of direction\n\tvec3 y_axis = vec3(0.0, 1.0, 0.0);\n\tfloat d1 = dot(c1, y_axis);\n\tfloat angle = acos(cosTheta) * sign(d1);\n\treturn angle;\n}\n\n// http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#i-need-an-equivalent-of-glulookat-how-do-i-orient-an-object-towards-a-point-\nvec4 vectorAlign(vec3 start, vec3 dest){\n\tstart = normalize(start);\n\tdest = normalize(dest);\n\n\tfloat cosTheta = dot(start, dest);\n\tvec3 axis;\n\n\t// if (cosTheta < -1 + 0.001f){\n\t// \t// special case when vectors in opposite directions:\n\t// \t// there is no \"ideal\" rotation axis\n\t// \t// So guess one; any will do as long as it's perpendicular to start\n\t// \taxis = cross(vec3(0.0f, 0.0f, 1.0f), start);\n\t// \tif (length2(axis) < 0.01 ) // bad luck, they were parallel, try again!\n\t// \t\taxis = cross(vec3(1.0f, 0.0f, 0.0f), start);\n\n\t// \taxis = normalize(axis);\n\t// \treturn gtx::quaternion::angleAxis(glm::radians(180.0f), axis);\n\t// }\n\tif(cosTheta > (1.0 - 0.0001) || cosTheta < (-1.0 + 0.0001) ){\n\t\taxis = normalize(cross(start, vec3(0.0, 1.0, 0.0)));\n\t\tif (length(axis) < 0.001 ){ // bad luck, they were parallel, try again!\n\t\t\taxis = normalize(cross(start, vec3(1.0, 0.0, 0.0)));\n\t\t}\n\t} else {\n\t\taxis = normalize(cross(start, dest));\n\t}\n\n\tfloat angle = acos(cosTheta);\n\n\treturn quatFromAxisAngle(axis, angle);\n}\nvec4 vectorAlignWithUp(vec3 start, vec3 dest, vec3 up){\n\tvec4 rot1 = vectorAlign(start, dest);\n\tup = normalize(up);\n\n\t// Recompute desiredUp so that it's perpendicular to the direction\n\t// You can skip that part if you really want to force desiredUp\n\t// vec3 right = normalize(cross(dest, up));\n\t// up = normalize(cross(right, dest));\n\n\t// Because of the 1rst rotation, the up is probably completely screwed up.\n\t// Find the rotation between the \"up\" of the rotated object, and the desired up\n\tvec3 newUp = rotateWithQuat(vec3(0.0, 1.0, 0.0), rot1);//rot1 * vec3(0.0, 1.0, 0.0);\n\tvec4 rot2 = vectorAlign(up, newUp);\n\n\t// return rot1;\n\treturn rot2;\n\t// return multQuat(rot1, rot2);\n\t// return rot2 * rot1;\n\n}\n\n// https://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\nfloat quatToAngle(vec4 q){\n\treturn 2.0 * acos(q.w);\n}\nvec3 quatToAxis(vec4 q){\n\treturn vec3(\n\t\tq.x / sqrt(1.0-q.w*q.w),\n\t\tq.y / sqrt(1.0-q.w*q.w),\n\t\tq.z / sqrt(1.0-q.w*q.w)\n\t);\n}\n\nvec4 align(vec3 dir, vec3 up){\n\tvec3 start_dir = vec3(0.0, 0.0, 1.0);\n\tvec3 start_up = vec3(0.0, 1.0, 0.0);\n\tvec4 rot1 = vectorAlign(start_dir, dir);\n\tup = normalize(up);\n\n\t// Recompute desiredUp so that it's perpendicular to the direction\n\t// You can skip that part if you really want to force desiredUp\n\tvec3 right = normalize(cross(dir, up));\n\tif(length(right)<0.001){\n\t\tright = vec3(1.0, 0.0, 0.0);\n\t}\n\tup = normalize(cross(right, dir));\n\n\t// Because of the 1rst rotation, the up is probably completely screwed up.\n\t// Find the rotation between the \"up\" of the rotated object, and the desired up\n\tvec3 newUp = rotateWithQuat(start_up, rot1);//rot1 * vec3(0.0, 1.0, 0.0);\n\tvec4 rot2 = vectorAlign(normalize(newUp), up);\n\n\t// return rot1;\n\treturn quatMult(rot1, rot2);\n\t// return rot2 * rot1;\n\n}\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/easing1\nfloat exponentialOut(float t) {\n  return t == 1.0 ? t : 1.0 - pow(2.0, -10.0 * t);\n}\n\n\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/complement2\nfloat complement(float x){return 1.0-x;}\nvec2 complement(vec2 x){return vec2(1.0-x.x, 1.0-x.y);}\nvec3 complement(vec3 x){return vec3(1.0-x.x, 1.0-x.y, 1.0-x.z);}\nvec4 complement(vec4 x){return vec4(1.0-x.x, 1.0-x.y, 1.0-x.z, 1.0-x.w);}\n\n\n\n\n\n\n\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/globals2\nuniform float time;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/param2\nuniform float v_POLY_param2_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/param_threshold\nuniform float v_POLY_param_threshold_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/param_visibles_count\nuniform float v_POLY_param_visibles_count_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/globals2\nvarying vec3 v_POLY_globals2_cameraPosition;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute2\nvarying float varying_v_POLY_attribute2_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute1\nvarying float varying_v_POLY_attribute1_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute3\nattribute vec3 instancePosition;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute5\nattribute float id;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute2\nattribute float sphere;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute1\nattribute float role;\n\n\n\n\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\n// This is used for computing an equivalent of gl_FragCoord.z that is as high precision as possible.\n// Some platforms compute gl_FragCoord at a lower precision which makes the manually computed value better for\n// depth-based postprocessing effects. Reproduced on iPad with A10 processor / iPadOS 13.3.1.\nvarying vec2 vHighPrecisionZW;\n\nvoid main() {\n\n\t#include <uv_vertex>\n\n\t#include <skinbase_vertex>\n\n\t#ifdef USE_DISPLACEMENTMAP\n\n// removed:\n//\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\n\t#endif\n\n// removed:\n//\t#include <begin_vertex>\n\n\n\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/constant4\n\tfloat v_POLY_constant4_val = 1.01;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute3\n\tvec3 v_POLY_attribute3_val = instancePosition;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/globals2\n\tv_POLY_globals2_cameraPosition = vec3(cameraPosition);\n\tfloat v_POLY_globals2_time = time;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute5\n\tfloat v_POLY_attribute5_val = id;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute2\n\tvarying_v_POLY_attribute2_val = float(sphere);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute1\n\tvarying_v_POLY_attribute1_val = float(role);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/normalize3\n\tvec3 v_POLY_normalize3_normalized = normalize(v_POLY_attribute3_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/multAdd4\n\tfloat v_POLY_multAdd4_val = (v_POLY_param2_val*(v_POLY_globals2_time + 0.0)) + 0.0;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/substract1\n\tfloat v_POLY_substract1_substract = (v_POLY_param_threshold_val - v_POLY_attribute5_val - 0.0 - 0.0 - 0.0 - 0.0 - 0.0);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/multAdd1\n\tfloat v_POLY_multAdd1_val = (1.0*(v_POLY_attribute5_val + v_POLY_param_visibles_count_val)) + 0.0;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/mult3\n\tvec3 v_POLY_mult3_product = (v_POLY_constant4_val * v_POLY_normalize3_normalized);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/compare4\n\tbool v_POLY_compare4_val = (v_POLY_param_threshold_val < v_POLY_multAdd1_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/multAdd2\n\tfloat v_POLY_multAdd2_val = (2.0*(v_POLY_substract1_substract + 0.0)) + 0.0;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/substract2\n\tfloat v_POLY_substract2_substract = (v_POLY_param_threshold_val - v_POLY_multAdd1_val - 0.0 - 0.0 - 0.0 - 0.0 - 0.0);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/rotate1\n\tvec3 v_POLY_rotate1_val = rotateWithAxisAngle(v_POLY_mult3_product, vec3(0.0, 1.0, 0.0), v_POLY_multAdd4_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/clamp2\n\tfloat v_POLY_clamp2_val = clamp(v_POLY_multAdd2_val, 0.0, 1.0);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/multAdd3\n\tfloat v_POLY_multAdd3_val = (2.0*(v_POLY_substract2_substract + 0.0)) + 0.0;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/normalize1\n\tvec3 v_POLY_normalize1_normalized = normalize(v_POLY_rotate1_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/easing1\n\tfloat v_POLY_easing1_out = exponentialOut(v_POLY_clamp2_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/clamp3\n\tfloat v_POLY_clamp3_val = clamp(v_POLY_multAdd3_val, 0.0, 1.0);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/vector_align1\n\tvec4 v_POLY_vector_align1_val = vectorAlignWithUp(vec3(0.0, 1.0, 0.0), v_POLY_normalize1_normalized, vec3(0.0, 0.0, 1.0));\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/complement2\n\tfloat v_POLY_complement2_val = complement(v_POLY_clamp3_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/easing2\n\tfloat v_POLY_easing2_out = exponentialOut(v_POLY_complement2_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/twoWaySwitch1\n\tfloat v_POLY_twoWaySwitch1_val;\n\tif(v_POLY_compare4_val){\n\tv_POLY_twoWaySwitch1_val = v_POLY_easing1_out;\n\t} else {\n\tv_POLY_twoWaySwitch1_val = v_POLY_easing2_out;\n\t}\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/null2\n\tfloat v_POLY_null2_val = v_POLY_twoWaySwitch1_val;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/float_to_vec3_1\n\tvec3 v_POLY_float_to_vec3_1_vec3 = vec3(v_POLY_null2_val, v_POLY_null2_val, v_POLY_null2_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/null_instanceScale\n\tvec3 v_POLY_null_instanceScale_val = v_POLY_float_to_vec3_1_vec3;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/instance_transform1\n\tvec3 v_POLY_instance_transform1_position = vec3(position);\n\tv_POLY_instance_transform1_position *= v_POLY_null_instanceScale_val;\n\tv_POLY_instance_transform1_position = rotateWithQuat( v_POLY_instance_transform1_position, v_POLY_vector_align1_val );\n\tv_POLY_instance_transform1_position += v_POLY_rotate1_val;\n\tvec3 v_POLY_instance_transform1_normal = vec3(normal);\n\tv_POLY_instance_transform1_normal = rotateWithQuat( v_POLY_instance_transform1_normal, v_POLY_vector_align1_val );\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/output1\n\tvec3 transformed = v_POLY_instance_transform1_position;\n\tvec3 objectNormal = v_POLY_instance_transform1_normal;\n\n\n\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvHighPrecisionZW = gl_Position.zw;\n\n}\n",
				"fragmentShader": "\n#if DEPTH_PACKING == 3200\n\n\tuniform float opacity;\n\n#endif\n\n#include <common>\n\n\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/rgb_to_hsv1\n// https://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl\nvec3 rgb2hsv(vec3 c)\n{\n\tvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n\tvec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n\tvec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n\tfloat d = q.x - min(q.w, q.y);\n\tfloat e = 1.0e-10;\n\treturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/hsv_to_rgb1\n// https://github.com/hughsk/glsl-hsv2rgb\n// https://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl\nvec3 hsv2rgb(vec3 c) {\n\tvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n\tvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n\treturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\n\n\n\n\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/param_color_role0\nuniform vec3 v_POLY_param_color_role0_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/param_color_role1\nuniform vec3 v_POLY_param_color_role1_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/param_color_role2\nuniform vec3 v_POLY_param_color_role2_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/param_color_role3\nuniform vec3 v_POLY_param_color_role3_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/param_color_role4\nuniform vec3 v_POLY_param_color_role4_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/param_color_role5\nuniform vec3 v_POLY_param_color_role5_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute2\nvarying float varying_v_POLY_attribute2_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute1\nvarying float varying_v_POLY_attribute1_val;\n\n\n\n\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvarying vec2 vHighPrecisionZW;\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\n\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/constant2\n\tfloat v_POLY_constant2_val = 1.0;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute2\n\tfloat v_POLY_attribute2_val = varying_v_POLY_attribute2_val;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute1\n\tfloat v_POLY_attribute1_val = varying_v_POLY_attribute1_val;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/null1\n\tfloat v_POLY_null1_val = v_POLY_constant2_val;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/round2\n\tfloat v_POLY_round2_val = sign(v_POLY_attribute2_val)*floor(abs(v_POLY_attribute2_val)+0.5);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/round1\n\tfloat v_POLY_round1_val = sign(v_POLY_attribute1_val)*floor(abs(v_POLY_attribute1_val)+0.5);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/null_alpha\n\tfloat v_POLY_null_alpha_val = v_POLY_null1_val;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/compare1\n\tbool v_POLY_compare1_val = (v_POLY_round2_val > 0.51);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/float_to_int1\n\tint v_POLY_float_to_int1_int = int(v_POLY_round1_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/switch1\n\tvec3 v_POLY_switch1_val;\n\tint v_POLY_switch1_index = v_POLY_float_to_int1_int;\n\tif(v_POLY_switch1_index == 0){v_POLY_switch1_val = v_POLY_param_color_role0_val;}\n\telse if(v_POLY_switch1_index == 1){v_POLY_switch1_val = v_POLY_param_color_role1_val;}\n\telse if(v_POLY_switch1_index == 2){v_POLY_switch1_val = v_POLY_param_color_role2_val;}\n\telse if(v_POLY_switch1_index == 3){v_POLY_switch1_val = v_POLY_param_color_role3_val;}\n\telse if(v_POLY_switch1_index == 4){v_POLY_switch1_val = v_POLY_param_color_role4_val;}\n\telse if(v_POLY_switch1_index == 5){v_POLY_switch1_val = v_POLY_param_color_role5_val;}\n\telse if(v_POLY_switch1_index == 6){v_POLY_switch1_val = vec3(0.0, 0.0, 0.0);}\n\telse if(v_POLY_switch1_index == 7){v_POLY_switch1_val = vec3(0.0, 0.0, 0.0);}\n\telse if(v_POLY_switch1_index == 8){v_POLY_switch1_val = vec3(0.0, 0.0, 0.0);}\n\telse if(v_POLY_switch1_index == 9){v_POLY_switch1_val = vec3(0.0, 0.0, 0.0);}\n\telse if(v_POLY_switch1_index == 10){v_POLY_switch1_val = vec3(0.0, 0.0, 0.0);}\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/rgb_to_hsv1\n\tvec3 v_POLY_rgb_to_hsv1_hsv = rgb2hsv(v_POLY_switch1_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/vec3_to_float1\n\tfloat v_POLY_vec3_to_float1_x = v_POLY_rgb_to_hsv1_hsv.x;\n\tfloat v_POLY_vec3_to_float1_z = v_POLY_rgb_to_hsv1_hsv.z;\n\tfloat v_POLY_vec3_to_float1_y = v_POLY_rgb_to_hsv1_hsv.y;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/multAdd6\n\tfloat v_POLY_multAdd6_val = (0.34*(v_POLY_vec3_to_float1_y + 0.0)) + 0.0;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/float_to_vec3_2\n\tvec3 v_POLY_float_to_vec3_2_vec3 = vec3(v_POLY_vec3_to_float1_x, v_POLY_multAdd6_val, v_POLY_vec3_to_float1_z);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/hsv_to_rgb1\n\tvec3 v_POLY_hsv_to_rgb1_rgb = hsv2rgb(v_POLY_float_to_vec3_2_vec3);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/twoWaySwitch2\n\tvec3 v_POLY_twoWaySwitch2_val;\n\tif(v_POLY_compare1_val){\n\tv_POLY_twoWaySwitch2_val = v_POLY_switch1_val;\n\t} else {\n\tv_POLY_twoWaySwitch2_val = v_POLY_hsv_to_rgb1_rgb;\n\t}\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/null3\n\tvec3 v_POLY_null3_val = v_POLY_twoWaySwitch2_val;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/mult1\n\tvec3 v_POLY_mult1_product = (v_POLY_null1_val * v_POLY_null3_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/null_color\n\tvec3 v_POLY_null_color_val = v_POLY_mult1_product;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/output1\n\tdiffuseColor.xyz = v_POLY_null_color_val;\n\tdiffuseColor.a = v_POLY_null_alpha_val;\n\n\n\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tdiffuseColor.a = opacity;\n\n\t#endif\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\n\t#include <logdepthbuf_fragment>\n\n\t// Higher precision equivalent of gl_FragCoord.z. This assumes depthRange has been left to its default values.\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\n\t#elif DEPTH_PACKING == 3201\n\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\n\t#endif\n\n}\n",
				"lights": false
			},
			"customDepthDOFMaterial": {
				"metadata": {
					"version": 4.5,
					"type": "Material",
					"generator": "Material.toJSON"
				},
				"uuid": "E2DDB876-9A08-486B-9358-315723218AAE",
				"type": "ShaderMaterial",
				"depthFunc": 3,
				"depthTest": true,
				"depthWrite": true,
				"stencilWrite": false,
				"stencilWriteMask": 255,
				"stencilFunc": 519,
				"stencilRef": 0,
				"stencilFuncMask": 255,
				"stencilFail": 7680,
				"stencilZFail": 7680,
				"stencilZPass": 7680,
				"glslVersion": null,
				"uniforms": {
					"mNear": {
						"value": 0
					},
					"mFar": {
						"value": 10
					},
					"v_POLY_param2_val": {
						"value": 0
					},
					"v_POLY_param_color_role0_val": {
						"type": "c",
						"value": 6693371
					},
					"v_POLY_param_color_role1_val": {
						"type": "c",
						"value": 14827610
					},
					"v_POLY_param_color_role2_val": {
						"type": "c",
						"value": 40444
					},
					"v_POLY_param_color_role3_val": {
						"type": "c",
						"value": 16610123
					},
					"v_POLY_param_color_role4_val": {
						"type": "c",
						"value": 16756278
					},
					"v_POLY_param_color_role5_val": {
						"type": "c",
						"value": 50389
					},
					"v_POLY_param_threshold_val": {
						"value": 0.3
					},
					"v_POLY_param_visibles_count_val": {
						"value": 3
					},
					"ramp_texture_v_POLY_ramp1_val": {
						"value": null
					}
				},
				"vertexShader": "#include <common>\n\nvarying float vViewZDepth;\n\n// INSERT DEFINES\n\n\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/rotate1\n\n\n// https://github.com/mattatz/ShibuyaCrowd/blob/master/source/shaders/common/quaternion.glsl\nvec4 quatMult(vec4 q1, vec4 q2)\n{\n\treturn vec4(\n\tq1.w * q2.x + q1.x * q2.w + q1.z * q2.y - q1.y * q2.z,\n\tq1.w * q2.y + q1.y * q2.w + q1.x * q2.z - q1.z * q2.x,\n\tq1.w * q2.z + q1.z * q2.w + q1.y * q2.x - q1.x * q2.y,\n\tq1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z\n\t);\n}\n// http://glmatrix.net/docs/quat.js.html#line97\n//   let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n\n//   let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n//   out[0] = ax * bw + aw * bx + ay * bz - az * by;\n\n//   out[1] = ay * bw + aw * by + az * bx - ax * bz;\n\n//   out[2] = az * bw + aw * bz + ax * by - ay * bx;\n\n//   out[3] = aw * bw - ax * bx - ay * by - az * bz;\n\n//   return out\n\n\n\n// http://www.neilmendoza.com/glsl-rotation-about-an-arbitrary-axis/\nmat4 rotationMatrix(vec3 axis, float angle)\n{\n\taxis = normalize(axis);\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\n\tfloat oc = 1.0 - c;\n\n \treturn mat4(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s, 0.0, oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s,  0.0, oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c, 0.0, 0.0, 0.0, 0.0, 1.0);\n}\n\n// https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\nvec4 quatFromAxisAngle(vec3 axis, float angle)\n{\n\tvec4 qr;\n\tfloat half_angle = (angle * 0.5); // * 3.14159 / 180.0;\n\tfloat sin_half_angle = sin(half_angle);\n\tqr.x = axis.x * sin_half_angle;\n\tqr.y = axis.y * sin_half_angle;\n\tqr.z = axis.z * sin_half_angle;\n\tqr.w = cos(half_angle);\n\treturn qr;\n}\nvec3 rotateWithAxisAngle(vec3 position, vec3 axis, float angle)\n{\n\tvec4 q = quatFromAxisAngle(axis, angle);\n\tvec3 v = position.xyz;\n\treturn v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\n}\n// vec3 applyQuaternionToVector( vec4 q, vec3 v ){\n// \treturn v + 2.0 * cross( q.xyz, cross( q.xyz, v ) + q.w * v );\n// }\nvec3 rotateWithQuat( vec3 v, vec4 q )\n{\n\t// vec4 qv = multQuat( quat, vec4(vec, 0.0) );\n\t// return multQuat( qv, vec4(-quat.x, -quat.y, -quat.z, quat.w) ).xyz;\n\treturn v + 2.0 * cross( q.xyz, cross( q.xyz, v ) + q.w * v );\n}\n// https://github.com/glslify/glsl-look-at/blob/gh-pages/index.glsl\n// mat3 rotation_matrix(vec3 origin, vec3 target, float roll) {\n// \tvec3 rr = vec3(sin(roll), cos(roll), 0.0);\n// \tvec3 ww = normalize(target - origin);\n// \tvec3 uu = normalize(cross(ww, rr));\n// \tvec3 vv = normalize(cross(uu, ww));\n\n// \treturn mat3(uu, vv, ww);\n// }\n// mat3 rotation_matrix(vec3 target, float roll) {\n// \tvec3 rr = vec3(sin(roll), cos(roll), 0.0);\n// \tvec3 ww = normalize(target);\n// \tvec3 uu = normalize(cross(ww, rr));\n// \tvec3 vv = normalize(cross(uu, ww));\n\n// \treturn mat3(uu, vv, ww);\n// }\n\nfloat vectorAngle(vec3 start, vec3 dest){\n\tstart = normalize(start);\n\tdest = normalize(dest);\n\n\tfloat cosTheta = dot(start, dest);\n\tvec3 c1 = cross(start, dest);\n\t// We use the dot product of the cross with the Y axis.\n\t// This is a little arbitrary, but can still give a good sense of direction\n\tvec3 y_axis = vec3(0.0, 1.0, 0.0);\n\tfloat d1 = dot(c1, y_axis);\n\tfloat angle = acos(cosTheta) * sign(d1);\n\treturn angle;\n}\n\n// http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#i-need-an-equivalent-of-glulookat-how-do-i-orient-an-object-towards-a-point-\nvec4 vectorAlign(vec3 start, vec3 dest){\n\tstart = normalize(start);\n\tdest = normalize(dest);\n\n\tfloat cosTheta = dot(start, dest);\n\tvec3 axis;\n\n\t// if (cosTheta < -1 + 0.001f){\n\t// \t// special case when vectors in opposite directions:\n\t// \t// there is no \"ideal\" rotation axis\n\t// \t// So guess one; any will do as long as it's perpendicular to start\n\t// \taxis = cross(vec3(0.0f, 0.0f, 1.0f), start);\n\t// \tif (length2(axis) < 0.01 ) // bad luck, they were parallel, try again!\n\t// \t\taxis = cross(vec3(1.0f, 0.0f, 0.0f), start);\n\n\t// \taxis = normalize(axis);\n\t// \treturn gtx::quaternion::angleAxis(glm::radians(180.0f), axis);\n\t// }\n\tif(cosTheta > (1.0 - 0.0001) || cosTheta < (-1.0 + 0.0001) ){\n\t\taxis = normalize(cross(start, vec3(0.0, 1.0, 0.0)));\n\t\tif (length(axis) < 0.001 ){ // bad luck, they were parallel, try again!\n\t\t\taxis = normalize(cross(start, vec3(1.0, 0.0, 0.0)));\n\t\t}\n\t} else {\n\t\taxis = normalize(cross(start, dest));\n\t}\n\n\tfloat angle = acos(cosTheta);\n\n\treturn quatFromAxisAngle(axis, angle);\n}\nvec4 vectorAlignWithUp(vec3 start, vec3 dest, vec3 up){\n\tvec4 rot1 = vectorAlign(start, dest);\n\tup = normalize(up);\n\n\t// Recompute desiredUp so that it's perpendicular to the direction\n\t// You can skip that part if you really want to force desiredUp\n\t// vec3 right = normalize(cross(dest, up));\n\t// up = normalize(cross(right, dest));\n\n\t// Because of the 1rst rotation, the up is probably completely screwed up.\n\t// Find the rotation between the \"up\" of the rotated object, and the desired up\n\tvec3 newUp = rotateWithQuat(vec3(0.0, 1.0, 0.0), rot1);//rot1 * vec3(0.0, 1.0, 0.0);\n\tvec4 rot2 = vectorAlign(up, newUp);\n\n\t// return rot1;\n\treturn rot2;\n\t// return multQuat(rot1, rot2);\n\t// return rot2 * rot1;\n\n}\n\n// https://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\nfloat quatToAngle(vec4 q){\n\treturn 2.0 * acos(q.w);\n}\nvec3 quatToAxis(vec4 q){\n\treturn vec3(\n\t\tq.x / sqrt(1.0-q.w*q.w),\n\t\tq.y / sqrt(1.0-q.w*q.w),\n\t\tq.z / sqrt(1.0-q.w*q.w)\n\t);\n}\n\nvec4 align(vec3 dir, vec3 up){\n\tvec3 start_dir = vec3(0.0, 0.0, 1.0);\n\tvec3 start_up = vec3(0.0, 1.0, 0.0);\n\tvec4 rot1 = vectorAlign(start_dir, dir);\n\tup = normalize(up);\n\n\t// Recompute desiredUp so that it's perpendicular to the direction\n\t// You can skip that part if you really want to force desiredUp\n\tvec3 right = normalize(cross(dir, up));\n\tif(length(right)<0.001){\n\t\tright = vec3(1.0, 0.0, 0.0);\n\t}\n\tup = normalize(cross(right, dir));\n\n\t// Because of the 1rst rotation, the up is probably completely screwed up.\n\t// Find the rotation between the \"up\" of the rotated object, and the desired up\n\tvec3 newUp = rotateWithQuat(start_up, rot1);//rot1 * vec3(0.0, 1.0, 0.0);\n\tvec4 rot2 = vectorAlign(normalize(newUp), up);\n\n\t// return rot1;\n\treturn quatMult(rot1, rot2);\n\t// return rot2 * rot1;\n\n}\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/easing1\nfloat exponentialOut(float t) {\n  return t == 1.0 ? t : 1.0 - pow(2.0, -10.0 * t);\n}\n\n\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/complement2\nfloat complement(float x){return 1.0-x;}\nvec2 complement(vec2 x){return vec2(1.0-x.x, 1.0-x.y);}\nvec3 complement(vec3 x){return vec3(1.0-x.x, 1.0-x.y, 1.0-x.z);}\nvec4 complement(vec4 x){return vec4(1.0-x.x, 1.0-x.y, 1.0-x.z, 1.0-x.w);}\n\n\n\n\n\n\n\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/globals2\nuniform float time;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/param2\nuniform float v_POLY_param2_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/param_threshold\nuniform float v_POLY_param_threshold_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/param_visibles_count\nuniform float v_POLY_param_visibles_count_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/globals2\nvarying vec3 v_POLY_globals2_cameraPosition;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute2\nvarying float varying_v_POLY_attribute2_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute1\nvarying float varying_v_POLY_attribute1_val;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute3\nattribute vec3 instancePosition;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute5\nattribute float id;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute2\nattribute float sphere;\n\n// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute1\nattribute float role;\n\n\n\n\n\n\n\nvoid main() {\n\n\t// INSERT BODY\n\n\n\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/constant4\n\tfloat v_POLY_constant4_val = 1.01;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute3\n\tvec3 v_POLY_attribute3_val = instancePosition;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/globals2\n\tv_POLY_globals2_cameraPosition = vec3(cameraPosition);\n\tfloat v_POLY_globals2_time = time;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute5\n\tfloat v_POLY_attribute5_val = id;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute2\n\tvarying_v_POLY_attribute2_val = float(sphere);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/attribute1\n\tvarying_v_POLY_attribute1_val = float(role);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/normalize3\n\tvec3 v_POLY_normalize3_normalized = normalize(v_POLY_attribute3_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/multAdd4\n\tfloat v_POLY_multAdd4_val = (v_POLY_param2_val*(v_POLY_globals2_time + 0.0)) + 0.0;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/substract1\n\tfloat v_POLY_substract1_substract = (v_POLY_param_threshold_val - v_POLY_attribute5_val - 0.0 - 0.0 - 0.0 - 0.0 - 0.0);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/multAdd1\n\tfloat v_POLY_multAdd1_val = (1.0*(v_POLY_attribute5_val + v_POLY_param_visibles_count_val)) + 0.0;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/mult3\n\tvec3 v_POLY_mult3_product = (v_POLY_constant4_val * v_POLY_normalize3_normalized);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/compare4\n\tbool v_POLY_compare4_val = (v_POLY_param_threshold_val < v_POLY_multAdd1_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/multAdd2\n\tfloat v_POLY_multAdd2_val = (2.0*(v_POLY_substract1_substract + 0.0)) + 0.0;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/substract2\n\tfloat v_POLY_substract2_substract = (v_POLY_param_threshold_val - v_POLY_multAdd1_val - 0.0 - 0.0 - 0.0 - 0.0 - 0.0);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/rotate1\n\tvec3 v_POLY_rotate1_val = rotateWithAxisAngle(v_POLY_mult3_product, vec3(0.0, 1.0, 0.0), v_POLY_multAdd4_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/clamp2\n\tfloat v_POLY_clamp2_val = clamp(v_POLY_multAdd2_val, 0.0, 1.0);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/multAdd3\n\tfloat v_POLY_multAdd3_val = (2.0*(v_POLY_substract2_substract + 0.0)) + 0.0;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/normalize1\n\tvec3 v_POLY_normalize1_normalized = normalize(v_POLY_rotate1_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/easing1\n\tfloat v_POLY_easing1_out = exponentialOut(v_POLY_clamp2_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/clamp3\n\tfloat v_POLY_clamp3_val = clamp(v_POLY_multAdd3_val, 0.0, 1.0);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/vector_align1\n\tvec4 v_POLY_vector_align1_val = vectorAlignWithUp(vec3(0.0, 1.0, 0.0), v_POLY_normalize1_normalized, vec3(0.0, 0.0, 1.0));\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/complement2\n\tfloat v_POLY_complement2_val = complement(v_POLY_clamp3_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/easing2\n\tfloat v_POLY_easing2_out = exponentialOut(v_POLY_complement2_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/twoWaySwitch1\n\tfloat v_POLY_twoWaySwitch1_val;\n\tif(v_POLY_compare4_val){\n\tv_POLY_twoWaySwitch1_val = v_POLY_easing1_out;\n\t} else {\n\tv_POLY_twoWaySwitch1_val = v_POLY_easing2_out;\n\t}\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/null2\n\tfloat v_POLY_null2_val = v_POLY_twoWaySwitch1_val;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/float_to_vec3_1\n\tvec3 v_POLY_float_to_vec3_1_vec3 = vec3(v_POLY_null2_val, v_POLY_null2_val, v_POLY_null2_val);\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/null_instanceScale\n\tvec3 v_POLY_null_instanceScale_val = v_POLY_float_to_vec3_1_vec3;\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/instance_transform1\n\tvec3 v_POLY_instance_transform1_position = vec3(position);\n\tv_POLY_instance_transform1_position *= v_POLY_null_instanceScale_val;\n\tv_POLY_instance_transform1_position = rotateWithQuat( v_POLY_instance_transform1_position, v_POLY_vector_align1_val );\n\tv_POLY_instance_transform1_position += v_POLY_rotate1_val;\n\tvec3 v_POLY_instance_transform1_normal = vec3(normal);\n\tv_POLY_instance_transform1_normal = rotateWithQuat( v_POLY_instance_transform1_normal, v_POLY_vector_align1_val );\n\t\n\t// /MAT/mesh_basic_builder_SELECTED_DOTS/output1\n\tvec3 transformed = v_POLY_instance_transform1_position;\n\tvec3 objectNormal = v_POLY_instance_transform1_normal;\n\n\n\n\n\n\t#include <project_vertex>\n\n\tvViewZDepth = - mvPosition.z;\n}",
				"fragmentShader": "uniform float mNear;\nuniform float mFar;\n\nvarying float vViewZDepth;\n\nvoid main() {\n\n\tfloat color = 1.0 - smoothstep( mNear, mFar, vViewZDepth );\n\tgl_FragColor = vec4( vec3( color ), 1.0 );\n\n}\n",
				"lights": false
			}
		}
	}
}