{
	"type": "meshBasicBuilder",
	"nodes": {
		"output1": {
			"type": "output",
			"inputs": [
				{
					"index": 0,
					"node": "instance_transform1",
					"output": "position"
				},
				{
					"index": 1,
					"node": "instance_transform1",
					"output": "normal"
				},
				{
					"index": 2,
					"node": "null_color",
					"output": "val"
				}
			]
		},
		"instance_transform1": {
			"type": "instanceTransform",
			"inputs": [
				null,
				null,
				{
					"index": 2,
					"node": "mult1",
					"output": "product"
				},
				{
					"index": 3,
					"node": "vector_align1",
					"output": "val"
				},
				{
					"index": 4,
					"node": "float_to_vec3_1",
					"output": "vec3"
				}
			]
		},
		"normalize1": {
			"type": "normalize",
			"params": {
				"in": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "attribute3",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "in",
						"type": "vec3"
					}
				],
				"out": [
					{
						"name": "normalized",
						"type": "vec3"
					}
				]
			}
		},
		"vector_align1": {
			"type": "vectorAlign",
			"params": {
				"start": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						1
					],
					"options": {
						"spare": true
					},
					"raw_input": [
						0,
						1,
						0
					]
				},
				"end": {
					"type": "vector3",
					"default_value": [
						1,
						0,
						0
					],
					"options": {
						"spare": true
					},
					"raw_input": [
						0,
						1,
						0
					]
				},
				"up": {
					"type": "vector3",
					"default_value": [
						0,
						1,
						0
					],
					"options": {
						"spare": true
					},
					"raw_input": [
						0,
						0,
						1
					]
				}
			},
			"inputs": [
				null,
				{
					"index": 1,
					"node": "normalize1",
					"output": "normalized"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "start",
						"type": "vec3"
					},
					{
						"name": "end",
						"type": "vec3"
					},
					{
						"name": "up",
						"type": "vec3"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "vec4"
					}
				]
			}
		},
		"param1": {
			"type": "param",
			"params": {
				"name": "basecolor",
				"type": 4,
				"asColor": 1
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "vec3"
					}
				]
			}
		},
		"attribute2": {
			"type": "attribute",
			"params": {
				"name": "land"
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"float_to_vec3_1": {
			"type": "floatToVec3",
			"inputs": [
				{
					"index": 0,
					"node": "twoWaySwitch1",
					"output": "val"
				},
				{
					"index": 1,
					"node": "twoWaySwitch1",
					"output": "val"
				},
				{
					"index": 2,
					"node": "twoWaySwitch1",
					"output": "val"
				}
			]
		},
		"attribute3": {
			"type": "attribute",
			"params": {
				"name": "instancePosition",
				"type": 2
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "vec3"
					}
				]
			}
		},
		"param_sparkle_center": {
			"type": "param",
			"params": {
				"name": "sparkleCenter",
				"type": 4
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "vec3"
					}
				]
			}
		},
		"param_sparkle_color": {
			"type": "param",
			"params": {
				"name": "sparkleColor",
				"type": 4,
				"asColor": 1
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "vec3"
					}
				]
			}
		},
		"attribute4": {
			"type": "attribute",
			"params": {
				"name": "instancePosition",
				"type": 2
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "vec3"
					}
				]
			}
		},
		"param_sparkle_radius": {
			"type": "param",
			"params": {
				"name": "sparkleRadius"
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"distance1": {
			"type": "distance",
			"params": {
				"p0": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				},
				"p1": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "normalize2",
					"output": "normalized"
				},
				{
					"index": 1,
					"node": "normalize3",
					"output": "normalized"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "p0",
						"type": "vec3"
					},
					{
						"name": "p1",
						"type": "vec3"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"mix2": {
			"type": "mix",
			"params": {
				"value0": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				},
				"value1": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				},
				"blend": {
					"type": "float",
					"default_value": 0.5,
					"options": {
						"spare": true
					},
					"raw_input": 0
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "vec4_to_vec3_1",
					"output": "vec3"
				},
				{
					"index": 1,
					"node": "param_sparkle_color",
					"output": "val"
				},
				{
					"index": 2,
					"node": "max1",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value0",
						"type": "vec3"
					},
					{
						"name": "value1",
						"type": "vec3"
					},
					{
						"name": "blend",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "mix",
						"type": "vec3"
					}
				]
			}
		},
		"normalize2": {
			"type": "normalize",
			"params": {
				"in": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "add1",
					"output": "sum"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "in",
						"type": "vec3"
					}
				],
				"out": [
					{
						"name": "normalized",
						"type": "vec3"
					}
				]
			}
		},
		"normalize3": {
			"type": "normalize",
			"params": {
				"in": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "param_sparkle_center",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "in",
						"type": "vec3"
					}
				],
				"out": [
					{
						"name": "normalized",
						"type": "vec3"
					}
				]
			}
		},
		"color_correct1": {
			"type": "colorCorrect",
			"params": {
				"from": 2,
				"to": 0
			},
			"inputs": [
				{
					"index": 0,
					"node": "vec3_to_vec4_1",
					"output": "vec4"
				}
			]
		},
		"vec3_to_vec4_1": {
			"type": "vec3ToVec4",
			"inputs": [
				{
					"index": 0,
					"node": "param1",
					"output": "val"
				}
			]
		},
		"vec4_to_vec3_1": {
			"type": "vec4ToVec3",
			"inputs": [
				{
					"index": 0,
					"node": "color_correct1",
					"output": "out"
				}
			]
		},
		"noise1": {
			"type": "noise",
			"params": {
				"octaves": 7,
				"amp": {
					"type": "vector3",
					"default_value": [
						1,
						1,
						1
					],
					"options": {
						"spare": true
					},
					"raw_input": [
						0.030000000000000013,
						0.030000000000000013,
						0.030000000000000013
					]
				},
				"position": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				},
				"freq": {
					"type": "vector3",
					"default_value": [
						1,
						1,
						1
					],
					"options": {
						"spare": true
					},
					"raw_input": [
						8.5,
						8.5,
						8.5
					]
				},
				"offset": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					},
					"raw_input": [
						0,
						-0.1,
						0
					]
				}
			},
			"maxInputsCount": 4,
			"inputs": [
				null,
				{
					"index": 1,
					"node": "attribute4",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "amp",
						"type": "vec3"
					},
					{
						"name": "position",
						"type": "vec3"
					},
					{
						"name": "freq",
						"type": "vec3"
					},
					{
						"name": "offset",
						"type": "vec3"
					}
				],
				"out": [
					{
						"name": "noise",
						"type": "vec3"
					}
				]
			}
		},
		"abs1": {
			"type": "abs",
			"params": {
				"in": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "noise2",
					"output": "noise"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "in",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"mult1": {
			"type": "mult",
			"params": {
				"mult0": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				},
				"mult1": {
					"type": "vector3",
					"default_value": [
						1,
						1,
						1
					],
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "twoWaySwitch3",
					"output": "val"
				},
				{
					"index": 1,
					"node": "attribute3",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "mult0",
						"type": "float"
					},
					{
						"name": "mult1",
						"type": "vec3"
					}
				],
				"out": [
					{
						"name": "product",
						"type": "vec3"
					}
				]
			}
		},
		"two_way_switch_for_pos": {
			"type": "twoWaySwitch",
			"params": {
				"condition": {
					"type": "boolean",
					"default_value": false,
					"options": {
						"spare": true
					}
				},
				"ifTrue": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					},
					"raw_input": 1
				},
				"ifFalse": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					},
					"raw_input": 1
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "compare2",
					"output": "val"
				},
				{
					"index": 1,
					"node": "multAdd3",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "condition",
						"type": "bool"
					},
					{
						"name": "if_true",
						"type": "float"
					},
					{
						"name": "if_false",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"mult_add1": {
			"type": "multAdd",
			"params": {
				"value": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"preAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"mult": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					},
					"raw_input": 0.04
				},
				"postAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					},
					"raw_input": 1
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "mult4",
					"output": "product"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value",
						"type": "float"
					},
					{
						"name": "pre_add",
						"type": "float"
					},
					{
						"name": "mult",
						"type": "float"
					},
					{
						"name": "post_add",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"substract1": {
			"type": "substract",
			"params": {
				"sub0": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"sub1": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"sub2": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"sub3": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"sub4": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"sub5": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"sub6": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				}
			},
			"maxInputsCount": 7,
			"inputs": [
				{
					"index": 0,
					"node": "distance1",
					"output": "val"
				},
				{
					"index": 1,
					"node": "param_sparkle_radius",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "sub0",
						"type": "float"
					},
					{
						"name": "sub1",
						"type": "float"
					},
					{
						"name": "sub2",
						"type": "float"
					},
					{
						"name": "sub3",
						"type": "float"
					},
					{
						"name": "sub4",
						"type": "float"
					},
					{
						"name": "sub5",
						"type": "float"
					},
					{
						"name": "sub6",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "substract",
						"type": "float"
					}
				]
			}
		},
		"abs2": {
			"type": "abs",
			"params": {
				"in": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "substract1",
					"output": "substract"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "in",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"clamp1": {
			"type": "clamp",
			"params": {
				"value": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"min": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					},
					"raw_input": -1.5
				},
				"max": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					},
					"raw_input": 1.5
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "multAdd1",
					"output": "val"
				},
				{
					"index": 1,
					"node": "negate1",
					"output": "val"
				},
				{
					"index": 2,
					"node": "constant1",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value",
						"type": "float"
					},
					{
						"name": "min",
						"type": "float"
					},
					{
						"name": "max",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"cos1": {
			"type": "cos",
			"params": {
				"radians": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "clamp1",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "radians",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"compare2": {
			"type": "compare",
			"params": {
				"test": 2,
				"value0": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"value1": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "mult4",
					"output": "product"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value0",
						"type": "float"
					},
					{
						"name": "value1",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "bool"
					}
				]
			}
		},
		"constant1": {
			"type": "constant",
			"params": {
				"float": 1.8
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"negate1": {
			"type": "negate",
			"params": {
				"in": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "constant1",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "in",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"clamp2": {
			"type": "clamp",
			"params": {
				"value": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"min": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"max": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "cos1",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value",
						"type": "float"
					},
					{
						"name": "min",
						"type": "float"
					},
					{
						"name": "max",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"add1": {
			"type": "add",
			"params": {
				"add0": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				},
				"add1": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				},
				"add2": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				},
				"add3": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				},
				"add4": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				},
				"add5": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				},
				"add6": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				}
			},
			"maxInputsCount": 7,
			"inputs": [
				{
					"index": 0,
					"node": "attribute4",
					"output": "val"
				},
				{
					"index": 1,
					"node": "noise1",
					"output": "noise"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "add0",
						"type": "vec3"
					},
					{
						"name": "add1",
						"type": "vec3"
					},
					{
						"name": "add2",
						"type": "vec3"
					},
					{
						"name": "add3",
						"type": "vec3"
					},
					{
						"name": "add4",
						"type": "vec3"
					},
					{
						"name": "add5",
						"type": "vec3"
					},
					{
						"name": "add6",
						"type": "vec3"
					}
				],
				"out": [
					{
						"name": "sum",
						"type": "vec3"
					}
				]
			}
		},
		"compare3": {
			"type": "compare",
			"params": {
				"test": 2,
				"value0": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"value1": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "substract1",
					"output": "substract"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value0",
						"type": "float"
					},
					{
						"name": "value1",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "bool"
					}
				]
			}
		},
		"two_way_switch2": {
			"type": "twoWaySwitch",
			"params": {
				"condition": {
					"type": "boolean",
					"default_value": false,
					"options": {
						"spare": true
					}
				},
				"ifTrue": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"ifFalse": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					},
					"raw_input": 1
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "compare3",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "condition",
						"type": "bool"
					},
					{
						"name": "if_true",
						"type": "float"
					},
					{
						"name": "if_false",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"max1": {
			"type": "max",
			"params": {
				"in0": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"in1": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "mult5",
					"output": "product"
				},
				{
					"index": 1,
					"node": "multAdd2",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "in0",
						"type": "float"
					},
					{
						"name": "in1",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"mult2": {
			"type": "mult",
			"params": {
				"mult0": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				},
				"mult1": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				},
				"mult2": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				},
				"mult3": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				},
				"mult4": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				},
				"mult5": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				},
				"mult6": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				}
			},
			"maxInputsCount": 7,
			"inputs": [
				{
					"index": 0,
					"node": "twoWaySwitch2",
					"output": "val"
				},
				{
					"index": 1,
					"node": "mult3",
					"output": "product"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "mult0",
						"type": "float"
					},
					{
						"name": "mult1",
						"type": "float"
					},
					{
						"name": "mult2",
						"type": "float"
					},
					{
						"name": "mult3",
						"type": "float"
					},
					{
						"name": "mult4",
						"type": "float"
					},
					{
						"name": "mult5",
						"type": "float"
					},
					{
						"name": "mult6",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "product",
						"type": "float"
					}
				]
			}
		},
		"clamp3": {
			"type": "clamp",
			"params": {
				"value": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"min": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"max": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					},
					"raw_input": 1.9
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "mult2",
					"output": "product"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value",
						"type": "float"
					},
					{
						"name": "min",
						"type": "float"
					},
					{
						"name": "max",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"fit1": {
			"type": "fit",
			"params": {
				"val": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"srcMin": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"srcMax": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					},
					"raw_input": 0.61
				},
				"destMin": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					},
					"raw_input": 1
				},
				"destMax": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					},
					"raw_input": 0
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "abs2",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "val",
						"type": "float"
					},
					{
						"name": "src_min",
						"type": "float"
					},
					{
						"name": "src_max",
						"type": "float"
					},
					{
						"name": "dest_min",
						"type": "float"
					},
					{
						"name": "dest_max",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"noise2": {
			"type": "noise",
			"params": {
				"outputType": 1,
				"octaves": 7,
				"amp": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					},
					"raw_input": 2
				},
				"position": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				},
				"freq": {
					"type": "vector3",
					"default_value": [
						1,
						1,
						1
					],
					"options": {
						"spare": true
					},
					"raw_input": [
						12.4,
						12.4,
						12.4
					]
				},
				"offset": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					},
					"raw_input": [
						0,
						-0.1,
						0
					]
				}
			},
			"maxInputsCount": 4,
			"inputs": [
				null,
				{
					"index": 1,
					"node": "attribute4",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "amp",
						"type": "float"
					},
					{
						"name": "position",
						"type": "vec3"
					},
					{
						"name": "freq",
						"type": "vec3"
					},
					{
						"name": "offset",
						"type": "vec3"
					}
				],
				"out": [
					{
						"name": "noise",
						"type": "float"
					}
				]
			}
		},
		"noise3": {
			"type": "noise",
			"params": {
				"outputType": 1,
				"octaves": 7,
				"amp": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					},
					"raw_input": 2
				},
				"position": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				},
				"freq": {
					"type": "vector3",
					"default_value": [
						1,
						1,
						1
					],
					"options": {
						"spare": true
					},
					"raw_input": [
						10.4,
						10.4,
						10.4
					]
				},
				"offset": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					},
					"raw_input": [
						18,
						-0.1,
						0
					]
				}
			},
			"maxInputsCount": 4,
			"inputs": [
				null,
				{
					"index": 1,
					"node": "attribute4",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "amp",
						"type": "float"
					},
					{
						"name": "position",
						"type": "vec3"
					},
					{
						"name": "freq",
						"type": "vec3"
					},
					{
						"name": "offset",
						"type": "vec3"
					}
				],
				"out": [
					{
						"name": "noise",
						"type": "float"
					}
				]
			}
		},
		"mult3": {
			"type": "mult",
			"params": {
				"mult0": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				},
				"mult1": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				},
				"mult2": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				},
				"mult3": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				},
				"mult4": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				},
				"mult5": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				},
				"mult6": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				}
			},
			"maxInputsCount": 7,
			"inputs": [
				{
					"index": 0,
					"node": "abs1",
					"output": "val"
				},
				{
					"index": 1,
					"node": "clamp4",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "mult0",
						"type": "float"
					},
					{
						"name": "mult1",
						"type": "float"
					},
					{
						"name": "mult2",
						"type": "float"
					},
					{
						"name": "mult3",
						"type": "float"
					},
					{
						"name": "mult4",
						"type": "float"
					},
					{
						"name": "mult5",
						"type": "float"
					},
					{
						"name": "mult6",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "product",
						"type": "float"
					}
				]
			}
		},
		"clamp4": {
			"type": "clamp",
			"params": {
				"value": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"min": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"max": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "noise3",
					"output": "noise"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value",
						"type": "float"
					},
					{
						"name": "min",
						"type": "float"
					},
					{
						"name": "max",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"mult4": {
			"type": "mult",
			"params": {
				"mult0": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				},
				"mult1": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				},
				"mult2": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				},
				"mult3": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				},
				"mult4": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				},
				"mult5": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				},
				"mult6": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				}
			},
			"maxInputsCount": 7,
			"inputs": [
				{
					"index": 0,
					"node": "clamp2",
					"output": "val"
				},
				{
					"index": 1,
					"node": "param_sparkle_intensity",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "mult0",
						"type": "float"
					},
					{
						"name": "mult1",
						"type": "float"
					},
					{
						"name": "mult2",
						"type": "float"
					},
					{
						"name": "mult3",
						"type": "float"
					},
					{
						"name": "mult4",
						"type": "float"
					},
					{
						"name": "mult5",
						"type": "float"
					},
					{
						"name": "mult6",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "product",
						"type": "float"
					}
				]
			}
		},
		"param_sparkle_intensity": {
			"type": "param",
			"params": {
				"name": "sparkleIntensity"
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"param_trail_intensity": {
			"type": "param",
			"params": {
				"name": "trailIntensity"
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"mult5": {
			"type": "mult",
			"params": {
				"mult0": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				},
				"mult1": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				},
				"mult2": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				},
				"mult3": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				},
				"mult4": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				},
				"mult5": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				},
				"mult6": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				}
			},
			"maxInputsCount": 7,
			"inputs": [
				{
					"index": 0,
					"node": "param_trail_intensity",
					"output": "val"
				},
				{
					"index": 1,
					"node": "clamp3",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "mult0",
						"type": "float"
					},
					{
						"name": "mult1",
						"type": "float"
					},
					{
						"name": "mult2",
						"type": "float"
					},
					{
						"name": "mult3",
						"type": "float"
					},
					{
						"name": "mult4",
						"type": "float"
					},
					{
						"name": "mult5",
						"type": "float"
					},
					{
						"name": "mult6",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "product",
						"type": "float"
					}
				]
			}
		},
		"param_near": {
			"type": "param",
			"params": {
				"name": "near"
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"param_far": {
			"type": "param",
			"params": {
				"name": "far"
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"globals1": {
			"type": "globals"
		},
		"vec4_to_vec3_2": {
			"type": "vec4ToVec3",
			"inputs": [
				{
					"index": 0,
					"node": "globals1",
					"output": "gl_FragCoord"
				}
			]
		},
		"normalize4": {
			"type": "normalize",
			"params": {
				"in": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "attribute1",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "in",
						"type": "vec3"
					}
				],
				"out": [
					{
						"name": "normalized",
						"type": "vec3"
					}
				]
			}
		},
		"attribute1": {
			"type": "attribute",
			"params": {
				"name": "instancePosition",
				"type": 2
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "vec3"
					}
				]
			}
		},
		"substract2": {
			"type": "substract",
			"params": {
				"sub0": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"sub1": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				}
			},
			"connection_points": {
				"in": [
					{
						"name": "sub0",
						"type": "float"
					},
					{
						"name": "sub1",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "substract",
						"type": "float"
					}
				]
			}
		},
		"model_view_matrix_mult1": {
			"type": "modelViewMatrixMult",
			"inputs": [
				{
					"index": 0,
					"node": "instance_transform1",
					"output": "position"
				}
			]
		},
		"fog1": {
			"type": "fog",
			"params": {
				"baseColor": [
					1,
					0,
					0
				],
				"near": 2,
				"far": 7.9
			},
			"inputs": [
				{
					"index": 0,
					"node": "varyingRead1",
					"output": "fragment"
				},
				{
					"index": 1,
					"node": "mix2",
					"output": "mix"
				}
			]
		},
		"compare1": {
			"type": "compare",
			"params": {
				"test": 1,
				"value0": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"value1": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					},
					"raw_input": 0.5
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "attribute2",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value0",
						"type": "float"
					},
					{
						"name": "value1",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "bool"
					}
				]
			}
		},
		"two_way_switch1": {
			"type": "twoWaySwitch",
			"params": {
				"condition": {
					"type": "boolean",
					"default_value": false,
					"options": {
						"spare": true
					}
				},
				"ifTrue": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					},
					"raw_input": 0.24
				},
				"ifFalse": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					},
					"raw_input": 0.7
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "compare1",
					"output": "val"
				},
				{
					"index": 1,
					"node": "constant_size_sea",
					"output": "val"
				},
				{
					"index": 2,
					"node": "constant_size_land",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "condition",
						"type": "bool"
					},
					{
						"name": "if_true",
						"type": "float"
					},
					{
						"name": "if_false",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"constant_size_land": {
			"type": "constant",
			"params": {
				"float": 0.7
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"constant_size_sea": {
			"type": "constant",
			"params": {
				"float": 0.24
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"multAdd1": {
			"type": "multAdd",
			"params": {
				"value": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"preAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"mult": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					},
					"raw_input": 20
				},
				"postAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "abs2",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value",
						"type": "float"
					},
					{
						"name": "preAdd",
						"type": "float"
					},
					{
						"name": "mult",
						"type": "float"
					},
					{
						"name": "postAdd",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"multAdd2": {
			"type": "multAdd",
			"params": {
				"value": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"preAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"mult": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					}
				},
				"postAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "mult4",
					"output": "product"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value",
						"type": "float"
					},
					{
						"name": "preAdd",
						"type": "float"
					},
					{
						"name": "mult",
						"type": "float"
					},
					{
						"name": "postAdd",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"multAdd3": {
			"type": "multAdd",
			"params": {
				"value": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"preAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"mult": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true
					},
					"raw_input": 0.04
				},
				"postAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					},
					"raw_input": 1
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "mult4",
					"output": "product"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value",
						"type": "float"
					},
					{
						"name": "preAdd",
						"type": "float"
					},
					{
						"name": "mult",
						"type": "float"
					},
					{
						"name": "postAdd",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"twoWaySwitch1": {
			"type": "twoWaySwitch",
			"params": {
				"condition": {
					"type": "boolean",
					"default_value": false,
					"options": {
						"spare": true
					}
				},
				"ifTrue": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"ifFalse": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "compare1",
					"output": "val"
				},
				{
					"index": 1,
					"node": "constant_size_sea",
					"output": "val"
				},
				{
					"index": 2,
					"node": "constant_size_land",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "condition",
						"type": "bool"
					},
					{
						"name": "ifTrue",
						"type": "float"
					},
					{
						"name": "ifFalse",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"varyingRead1": {
			"type": "varyingRead",
			"params": {
				"name": "varying_mvPosition",
				"type": 3
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "fragment",
						"type": "vec4"
					}
				]
			}
		},
		"varyingWrite1": {
			"type": "varyingWrite",
			"params": {
				"name": "varying_mvPosition",
				"type": 3,
				"vertex": {
					"type": "vector4",
					"default_value": [
						0,
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "model_view_matrix_mult1",
					"output": "mvMult"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "vertex",
						"type": "vec4"
					}
				],
				"out": []
			}
		},
		"twoWaySwitch2": {
			"type": "twoWaySwitch",
			"params": {
				"condition": {
					"type": "boolean",
					"default_value": false,
					"options": {
						"spare": true
					}
				},
				"ifTrue": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					}
				},
				"ifFalse": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					},
					"raw_input": 1
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "compare3",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "condition",
						"type": "bool"
					},
					{
						"name": "ifTrue",
						"type": "float"
					},
					{
						"name": "ifFalse",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"colorCorrect1": {
			"type": "colorCorrect"
		},
		"instanceTransform1": {
			"type": "instanceTransform"
		},
		"twoWaySwitch3": {
			"type": "twoWaySwitch",
			"params": {
				"condition": {
					"type": "boolean",
					"default_value": false,
					"options": {
						"spare": true
					}
				},
				"ifTrue": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					},
					"raw_input": 1
				},
				"ifFalse": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true
					},
					"raw_input": 1
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "compare2",
					"output": "val"
				},
				{
					"index": 1,
					"node": "multAdd3",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "condition",
						"type": "bool"
					},
					{
						"name": "ifTrue",
						"type": "float"
					},
					{
						"name": "ifFalse",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"null_color": {
			"type": "null",
			"params": {
				"in": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "mix2",
					"output": "mix"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "in",
						"type": "vec3"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "vec3"
					}
				]
			}
		},
		"constant2": {
			"type": "constant",
			"params": {
				"type": 4
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "vec3"
					}
				]
			}
		}
	},
	"params": {
		"doubleSided": 1,
		"basecolor": {
			"type": "color",
			"default_value": [
				0,
				0,
				0
			],
			"options": {
				"spare": true,
				"computeOnDirty": true,
				"cook": false
			},
			"raw_input": [
				0.5568627450980392,
				0.6666666666666666,
				0.6980392156862745
			]
		},
		"sparkleCenter": {
			"type": "vector3",
			"default_value": [
				0,
				0,
				0
			],
			"options": {
				"spare": true,
				"computeOnDirty": true,
				"cook": false
			},
			"raw_input": [
				1,
				0,
				0
			]
		},
		"sparkleColor": {
			"type": "color",
			"default_value": [
				0,
				0,
				0
			],
			"options": {
				"spare": true,
				"computeOnDirty": true,
				"cook": false
			},
			"raw_input": [
				1,
				0,
				0
			]
		},
		"sparkleRadius": {
			"type": "float",
			"default_value": 0,
			"options": {
				"spare": true,
				"computeOnDirty": true,
				"cook": false
			},
			"raw_input": 0.28
		},
		"sparkleIntensity": {
			"type": "float",
			"default_value": 0,
			"options": {
				"spare": true,
				"computeOnDirty": true,
				"cook": false
			},
			"raw_input": 0.73
		},
		"trailIntensity": {
			"type": "float",
			"default_value": 0,
			"options": {
				"spare": true,
				"computeOnDirty": true,
				"cook": false
			},
			"raw_input": 0.83
		},
		"near": {
			"type": "float",
			"default_value": 0,
			"options": {
				"spare": true,
				"computeOnDirty": true,
				"cook": false
			}
		},
		"far": {
			"type": "float",
			"default_value": 0,
			"options": {
				"spare": true,
				"computeOnDirty": true,
				"cook": false
			},
			"raw_input": 0.41
		}
	},
	"selection": [
		"param1"
	],
	"persisted_config": {
		"material": {
			"metadata": {
				"version": 4.5,
				"type": "Material",
				"generator": "Material.toJSON"
			},
			"uuid": "A81BE111-15AA-4721-8321-C891905B5D78",
			"type": "ShaderMaterial",
			"name": "/MAT/mesh_basic_builder_DOTS",
			"side": 2,
			"depthFunc": 3,
			"depthTest": true,
			"depthWrite": true,
			"stencilWrite": false,
			"stencilWriteMask": 255,
			"stencilFunc": 519,
			"stencilRef": 0,
			"stencilFuncMask": 255,
			"stencilFail": 7680,
			"stencilZFail": 7680,
			"stencilZPass": 7680,
			"glslVersion": null,
			"uniforms": {
				"diffuse": {
					"type": "c",
					"value": 15658734
				},
				"opacity": {
					"value": 1
				},
				"map": {
					"value": null
				},
				"uvTransform": {
					"type": "m3",
					"value": [
						1,
						0,
						0,
						0,
						1,
						0,
						0,
						0,
						1
					]
				},
				"uv2Transform": {
					"type": "m3",
					"value": [
						1,
						0,
						0,
						0,
						1,
						0,
						0,
						0,
						1
					]
				},
				"alphaMap": {
					"value": null
				},
				"specularMap": {
					"value": null
				},
				"envMap": {
					"value": null
				},
				"flipEnvMap": {
					"value": -1
				},
				"reflectivity": {
					"value": 1
				},
				"refractionRatio": {
					"value": 0.98
				},
				"maxMipLevel": {
					"value": 0
				},
				"aoMap": {
					"value": null
				},
				"aoMapIntensity": {
					"value": 1
				},
				"lightMap": {
					"value": null
				},
				"lightMapIntensity": {
					"value": 1
				},
				"fogDensity": {
					"value": 0.00025
				},
				"fogNear": {
					"value": 1
				},
				"fogFar": {
					"value": 2000
				},
				"fogColor": {
					"type": "c",
					"value": 16777215
				},
				"v_POLY_param1_val": {
					"type": "c",
					"value": 9349810
				},
				"v_POLY_param_sparkle_center_val": {
					"type": "v3",
					"value": [
						1,
						0,
						0
					]
				},
				"v_POLY_param_sparkle_color_val": {
					"type": "c",
					"value": 16711680
				},
				"v_POLY_param_sparkle_radius_val": {
					"value": 0.28
				},
				"v_POLY_param_sparkle_intensity_val": {
					"value": 0.73
				},
				"v_POLY_param_trail_intensity_val": {
					"value": 0.83
				},
				"v_POLY_param_near_val": {
					"value": 0
				},
				"v_POLY_param_far_val": {
					"value": 0.41
				}
			},
			"vertexShader": "\n#include <common>\n\n\n\n// /MAT/mesh_basic_builder_DOTS/noise1\n// Modulo 289 without a division (only multiplications)\nfloat mod289(float x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n// Modulo 7 without a division\nvec3 mod7(vec3 x) {\n  return x - floor(x * (1.0 / 7.0)) * 7.0;\n}\n\n// Permutation polynomial: (34x^2 + x) mod 289\nfloat permute(float x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\nvec3 permute(vec3 x) {\n  return mod289((34.0 * x + 1.0) * x);\n}\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat taylorInvSqrt(float r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec2 fade(vec2 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\nvec4 fade(vec4 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex \n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n// \n\n\n\nfloat snoise(vec3 v)\n  { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\n\nfloat fbm_snoise_noise1 (in vec3 st) {\n\tfloat value = 0.0;\n\tfloat amplitude = 1.0;\n\tfor (int i = 0; i < 7; i++) {\n\t\tvalue += amplitude * snoise(st);\n\t\tst *= 2.0;\n\t\tamplitude *= 0.5;\n\t}\n\treturn value;\n}\n\n\n// /MAT/mesh_basic_builder_DOTS/vector_align1\n\n\n// https://github.com/mattatz/ShibuyaCrowd/blob/master/source/shaders/common/quaternion.glsl\nvec4 quatMult(vec4 q1, vec4 q2)\n{\n\treturn vec4(\n\tq1.w * q2.x + q1.x * q2.w + q1.z * q2.y - q1.y * q2.z,\n\tq1.w * q2.y + q1.y * q2.w + q1.x * q2.z - q1.z * q2.x,\n\tq1.w * q2.z + q1.z * q2.w + q1.y * q2.x - q1.x * q2.y,\n\tq1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z\n\t);\n}\n// http://glmatrix.net/docs/quat.js.html#line97\n//   let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n\n//   let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n//   out[0] = ax * bw + aw * bx + ay * bz - az * by;\n\n//   out[1] = ay * bw + aw * by + az * bx - ax * bz;\n\n//   out[2] = az * bw + aw * bz + ax * by - ay * bx;\n\n//   out[3] = aw * bw - ax * bx - ay * by - az * bz;\n\n//   return out\n\n\n\n// http://www.neilmendoza.com/glsl-rotation-about-an-arbitrary-axis/\nmat4 rotationMatrix(vec3 axis, float angle)\n{\n\taxis = normalize(axis);\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\n\tfloat oc = 1.0 - c;\n\n \treturn mat4(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s, 0.0, oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s,  0.0, oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c, 0.0, 0.0, 0.0, 0.0, 1.0);\n}\n\n// https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\nvec4 quatFromAxisAngle(vec3 axis, float angle)\n{\n\tvec4 qr;\n\tfloat half_angle = (angle * 0.5); // * 3.14159 / 180.0;\n\tfloat sin_half_angle = sin(half_angle);\n\tqr.x = axis.x * sin_half_angle;\n\tqr.y = axis.y * sin_half_angle;\n\tqr.z = axis.z * sin_half_angle;\n\tqr.w = cos(half_angle);\n\treturn qr;\n}\nvec3 rotateWithAxisAngle(vec3 position, vec3 axis, float angle)\n{\n\tvec4 q = quatFromAxisAngle(axis, angle);\n\tvec3 v = position.xyz;\n\treturn v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\n}\n// vec3 applyQuaternionToVector( vec4 q, vec3 v ){\n// \treturn v + 2.0 * cross( q.xyz, cross( q.xyz, v ) + q.w * v );\n// }\nvec3 rotateWithQuat( vec3 v, vec4 q )\n{\n\t// vec4 qv = multQuat( quat, vec4(vec, 0.0) );\n\t// return multQuat( qv, vec4(-quat.x, -quat.y, -quat.z, quat.w) ).xyz;\n\treturn v + 2.0 * cross( q.xyz, cross( q.xyz, v ) + q.w * v );\n}\n// https://github.com/glslify/glsl-look-at/blob/gh-pages/index.glsl\n// mat3 rotation_matrix(vec3 origin, vec3 target, float roll) {\n// \tvec3 rr = vec3(sin(roll), cos(roll), 0.0);\n// \tvec3 ww = normalize(target - origin);\n// \tvec3 uu = normalize(cross(ww, rr));\n// \tvec3 vv = normalize(cross(uu, ww));\n\n// \treturn mat3(uu, vv, ww);\n// }\n// mat3 rotation_matrix(vec3 target, float roll) {\n// \tvec3 rr = vec3(sin(roll), cos(roll), 0.0);\n// \tvec3 ww = normalize(target);\n// \tvec3 uu = normalize(cross(ww, rr));\n// \tvec3 vv = normalize(cross(uu, ww));\n\n// \treturn mat3(uu, vv, ww);\n// }\n\nfloat vectorAngle(vec3 start, vec3 dest){\n\tstart = normalize(start);\n\tdest = normalize(dest);\n\n\tfloat cosTheta = dot(start, dest);\n\tvec3 c1 = cross(start, dest);\n\t// We use the dot product of the cross with the Y axis.\n\t// This is a little arbitrary, but can still give a good sense of direction\n\tvec3 y_axis = vec3(0.0, 1.0, 0.0);\n\tfloat d1 = dot(c1, y_axis);\n\tfloat angle = acos(cosTheta) * sign(d1);\n\treturn angle;\n}\n\n// http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#i-need-an-equivalent-of-glulookat-how-do-i-orient-an-object-towards-a-point-\nvec4 vectorAlign(vec3 start, vec3 dest){\n\tstart = normalize(start);\n\tdest = normalize(dest);\n\n\tfloat cosTheta = dot(start, dest);\n\tvec3 axis;\n\n\t// if (cosTheta < -1 + 0.001f){\n\t// \t// special case when vectors in opposite directions:\n\t// \t// there is no \"ideal\" rotation axis\n\t// \t// So guess one; any will do as long as it's perpendicular to start\n\t// \taxis = cross(vec3(0.0f, 0.0f, 1.0f), start);\n\t// \tif (length2(axis) < 0.01 ) // bad luck, they were parallel, try again!\n\t// \t\taxis = cross(vec3(1.0f, 0.0f, 0.0f), start);\n\n\t// \taxis = normalize(axis);\n\t// \treturn gtx::quaternion::angleAxis(glm::radians(180.0f), axis);\n\t// }\n\tif(cosTheta > (1.0 - 0.0001) || cosTheta < (-1.0 + 0.0001) ){\n\t\taxis = normalize(cross(start, vec3(0.0, 1.0, 0.0)));\n\t\tif (length(axis) < 0.001 ){ // bad luck, they were parallel, try again!\n\t\t\taxis = normalize(cross(start, vec3(1.0, 0.0, 0.0)));\n\t\t}\n\t} else {\n\t\taxis = normalize(cross(start, dest));\n\t}\n\n\tfloat angle = acos(cosTheta);\n\n\treturn quatFromAxisAngle(axis, angle);\n}\nvec4 vectorAlignWithUp(vec3 start, vec3 dest, vec3 up){\n\tvec4 rot1 = vectorAlign(start, dest);\n\tup = normalize(up);\n\n\t// Recompute desiredUp so that it's perpendicular to the direction\n\t// You can skip that part if you really want to force desiredUp\n\t// vec3 right = normalize(cross(dest, up));\n\t// up = normalize(cross(right, dest));\n\n\t// Because of the 1rst rotation, the up is probably completely screwed up.\n\t// Find the rotation between the \"up\" of the rotated object, and the desired up\n\tvec3 newUp = rotateWithQuat(vec3(0.0, 1.0, 0.0), rot1);//rot1 * vec3(0.0, 1.0, 0.0);\n\tvec4 rot2 = vectorAlign(up, newUp);\n\n\t// return rot1;\n\treturn rot2;\n\t// return multQuat(rot1, rot2);\n\t// return rot2 * rot1;\n\n}\n\n// https://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\nfloat quatToAngle(vec4 q){\n\treturn 2.0 * acos(q.w);\n}\nvec3 quatToAxis(vec4 q){\n\treturn vec3(\n\t\tq.x / sqrt(1.0-q.w*q.w),\n\t\tq.y / sqrt(1.0-q.w*q.w),\n\t\tq.z / sqrt(1.0-q.w*q.w)\n\t);\n}\n\nvec4 align(vec3 dir, vec3 up){\n\tvec3 start_dir = vec3(0.0, 0.0, 1.0);\n\tvec3 start_up = vec3(0.0, 1.0, 0.0);\n\tvec4 rot1 = vectorAlign(start_dir, dir);\n\tup = normalize(up);\n\n\t// Recompute desiredUp so that it's perpendicular to the direction\n\t// You can skip that part if you really want to force desiredUp\n\tvec3 right = normalize(cross(dir, up));\n\tif(length(right)<0.001){\n\t\tright = vec3(1.0, 0.0, 0.0);\n\t}\n\tup = normalize(cross(right, dir));\n\n\t// Because of the 1rst rotation, the up is probably completely screwed up.\n\t// Find the rotation between the \"up\" of the rotated object, and the desired up\n\tvec3 newUp = rotateWithQuat(start_up, rot1);//rot1 * vec3(0.0, 1.0, 0.0);\n\tvec4 rot2 = vectorAlign(normalize(newUp), up);\n\n\t// return rot1;\n\treturn quatMult(rot1, rot2);\n\t// return rot2 * rot1;\n\n}\n\n\n\n\n\n\n\n// /MAT/mesh_basic_builder_DOTS/param_sparkle_center\nuniform vec3 v_POLY_param_sparkle_center_val;\n\n// /MAT/mesh_basic_builder_DOTS/param_sparkle_radius\nuniform float v_POLY_param_sparkle_radius_val;\n\n// /MAT/mesh_basic_builder_DOTS/param_sparkle_intensity\nuniform float v_POLY_param_sparkle_intensity_val;\n\n// /MAT/mesh_basic_builder_DOTS/attribute4\nvarying vec3 varying_v_POLY_attribute4_val;\n\n// /MAT/mesh_basic_builder_DOTS/varyingWrite1\nvarying vec4 varying_mvPosition;\n\n// /MAT/mesh_basic_builder_DOTS/attribute4\nattribute vec3 instancePosition;\n\n// /MAT/mesh_basic_builder_DOTS/attribute2\nattribute float land;\n\n\n\n\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\n\n\t// /MAT/mesh_basic_builder_DOTS/attribute4\n\tvec3 v_POLY_attribute4_val = instancePosition;\n\tvarying_v_POLY_attribute4_val = vec3(instancePosition);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/constant1\n\tfloat v_POLY_constant1_val = 1.8;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/attribute3\n\tvec3 v_POLY_attribute3_val = instancePosition;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/attribute2\n\tfloat v_POLY_attribute2_val = land;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/constant_size_sea\n\tfloat v_POLY_constant_size_sea_val = 0.24;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/constant_size_land\n\tfloat v_POLY_constant_size_land_val = 0.7;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/noise1\n\tfloat v_POLY_noise1_noisex = (vec3(0.030000000000000013, 0.030000000000000013, 0.030000000000000013)*fbm_snoise_noise1((v_POLY_attribute4_val*vec3(8.5, 8.5, 8.5))+(vec3(0.0, -0.1, 0.0)+vec3(0.0, 0.0, 0.0)))).x;\n\tfloat v_POLY_noise1_noisey = (vec3(0.030000000000000013, 0.030000000000000013, 0.030000000000000013)*fbm_snoise_noise1((v_POLY_attribute4_val*vec3(8.5, 8.5, 8.5))+(vec3(0.0, -0.1, 0.0)+vec3(1000.0, 1000.0, 1000.0)))).y;\n\tfloat v_POLY_noise1_noisez = (vec3(0.030000000000000013, 0.030000000000000013, 0.030000000000000013)*fbm_snoise_noise1((v_POLY_attribute4_val*vec3(8.5, 8.5, 8.5))+(vec3(0.0, -0.1, 0.0)+vec3(2000.0, 2000.0, 2000.0)))).z;\n\tvec3 v_POLY_noise1_noise = vec3(v_POLY_noise1_noisex, v_POLY_noise1_noisey, v_POLY_noise1_noisez);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/normalize3\n\tvec3 v_POLY_normalize3_normalized = normalize(v_POLY_param_sparkle_center_val);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/negate1\n\tfloat v_POLY_negate1_val = -1.0 * v_POLY_constant1_val;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/normalize1\n\tvec3 v_POLY_normalize1_normalized = normalize(v_POLY_attribute3_val);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/compare1\n\tbool v_POLY_compare1_val = (v_POLY_attribute2_val < 0.5);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/add1\n\tvec3 v_POLY_add1_sum = (v_POLY_attribute4_val + v_POLY_noise1_noise + vec3(0.0, 0.0, 0.0) + vec3(0.0, 0.0, 0.0) + vec3(0.0, 0.0, 0.0) + vec3(0.0, 0.0, 0.0) + vec3(0.0, 0.0, 0.0));\n\t\n\t// /MAT/mesh_basic_builder_DOTS/vector_align1\n\tvec4 v_POLY_vector_align1_val = vectorAlignWithUp(vec3(0.0, 1.0, 0.0), v_POLY_normalize1_normalized, vec3(0.0, 0.0, 1.0));\n\t\n\t// /MAT/mesh_basic_builder_DOTS/twoWaySwitch1\n\tfloat v_POLY_twoWaySwitch1_val;\n\tif(v_POLY_compare1_val){\n\tv_POLY_twoWaySwitch1_val = v_POLY_constant_size_sea_val;\n\t} else {\n\tv_POLY_twoWaySwitch1_val = v_POLY_constant_size_land_val;\n\t}\n\t\n\t// /MAT/mesh_basic_builder_DOTS/normalize2\n\tvec3 v_POLY_normalize2_normalized = normalize(v_POLY_add1_sum);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/float_to_vec3_1\n\tvec3 v_POLY_float_to_vec3_1_vec3 = vec3(v_POLY_twoWaySwitch1_val, v_POLY_twoWaySwitch1_val, v_POLY_twoWaySwitch1_val);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/distance1\n\tfloat v_POLY_distance1_val = distance(v_POLY_normalize2_normalized, v_POLY_normalize3_normalized);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/substract1\n\tfloat v_POLY_substract1_substract = (v_POLY_distance1_val - v_POLY_param_sparkle_radius_val - 0.0 - 0.0 - 0.0 - 0.0 - 0.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/abs2\n\tfloat v_POLY_abs2_val = abs(v_POLY_substract1_substract);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/multAdd1\n\tfloat v_POLY_multAdd1_val = (20.0*(v_POLY_abs2_val + 0.0)) + 0.0;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/clamp1\n\tfloat v_POLY_clamp1_val = clamp(v_POLY_multAdd1_val, v_POLY_negate1_val, v_POLY_constant1_val);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/cos1\n\tfloat v_POLY_cos1_val = cos(v_POLY_clamp1_val);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/clamp2\n\tfloat v_POLY_clamp2_val = clamp(v_POLY_cos1_val, 0.0, 1.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/mult4\n\tfloat v_POLY_mult4_product = (v_POLY_clamp2_val * v_POLY_param_sparkle_intensity_val * 1.0 * 1.0 * 1.0 * 1.0 * 1.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/compare2\n\tbool v_POLY_compare2_val = (v_POLY_mult4_product > 0.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/multAdd3\n\tfloat v_POLY_multAdd3_val = (0.04*(v_POLY_mult4_product + 0.0)) + 1.0;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/twoWaySwitch3\n\tfloat v_POLY_twoWaySwitch3_val;\n\tif(v_POLY_compare2_val){\n\tv_POLY_twoWaySwitch3_val = v_POLY_multAdd3_val;\n\t} else {\n\tv_POLY_twoWaySwitch3_val = 1.0;\n\t}\n\t\n\t// /MAT/mesh_basic_builder_DOTS/mult1\n\tvec3 v_POLY_mult1_product = (v_POLY_twoWaySwitch3_val * v_POLY_attribute3_val);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/instance_transform1\n\tvec3 v_POLY_instance_transform1_position = vec3(position);\n\tv_POLY_instance_transform1_position *= v_POLY_float_to_vec3_1_vec3;\n\tv_POLY_instance_transform1_position = rotateWithQuat( v_POLY_instance_transform1_position, v_POLY_vector_align1_val );\n\tv_POLY_instance_transform1_position += v_POLY_mult1_product;\n\tvec3 v_POLY_instance_transform1_normal = vec3(normal);\n\tv_POLY_instance_transform1_normal = rotateWithQuat( v_POLY_instance_transform1_normal, v_POLY_vector_align1_val );\n\t\n\t// /MAT/mesh_basic_builder_DOTS/output1\n\tvec3 transformed = v_POLY_instance_transform1_position;\n\tvec3 objectNormal = v_POLY_instance_transform1_normal;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/model_view_matrix_mult1\n\tvec4 v_POLY_model_view_matrix_mult1_mvMult = modelViewMatrix * vec4(v_POLY_instance_transform1_position, 1.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/varyingWrite1\n\tvarying_mvPosition = v_POLY_model_view_matrix_mult1_mvMult;\n\n\n\n\t#include <skinbase_vertex>\n\n\t#ifdef USE_ENVMAP\n\n// removed:\n//\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n\t#endif\n\n// removed:\n//\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n\n}\n",
			"fragmentShader": "\nuniform vec3 diffuse;\nuniform float opacity;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\n#include <common>\n\n\n\n// /MAT/mesh_basic_builder_DOTS/noise1\n// Modulo 289 without a division (only multiplications)\nfloat mod289(float x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n// Modulo 7 without a division\nvec3 mod7(vec3 x) {\n  return x - floor(x * (1.0 / 7.0)) * 7.0;\n}\n\n// Permutation polynomial: (34x^2 + x) mod 289\nfloat permute(float x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\nvec3 permute(vec3 x) {\n  return mod289((34.0 * x + 1.0) * x);\n}\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat taylorInvSqrt(float r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec2 fade(vec2 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\nvec4 fade(vec4 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex \n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n// \n\n\n\nfloat snoise(vec3 v)\n  { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\n\nfloat fbm_snoise_noise1 (in vec3 st) {\n\tfloat value = 0.0;\n\tfloat amplitude = 1.0;\n\tfor (int i = 0; i < 7; i++) {\n\t\tvalue += amplitude * snoise(st);\n\t\tst *= 2.0;\n\t\tamplitude *= 0.5;\n\t}\n\treturn value;\n}\n\n\n// /MAT/mesh_basic_builder_DOTS/noise2\n\nfloat fbm_snoise_noise2 (in vec3 st) {\n\tfloat value = 0.0;\n\tfloat amplitude = 1.0;\n\tfor (int i = 0; i < 7; i++) {\n\t\tvalue += amplitude * snoise(st);\n\t\tst *= 2.0;\n\t\tamplitude *= 0.5;\n\t}\n\treturn value;\n}\n\n\n// /MAT/mesh_basic_builder_DOTS/noise3\n\nfloat fbm_snoise_noise3 (in vec3 st) {\n\tfloat value = 0.0;\n\tfloat amplitude = 1.0;\n\tfor (int i = 0; i < 7; i++) {\n\t\tvalue += amplitude * snoise(st);\n\t\tst *= 2.0;\n\t\tamplitude *= 0.5;\n\t}\n\treturn value;\n}\n\n\n\n\n\n\n\n\n// /MAT/mesh_basic_builder_DOTS/param_sparkle_center\nuniform vec3 v_POLY_param_sparkle_center_val;\n\n// /MAT/mesh_basic_builder_DOTS/param_sparkle_radius\nuniform float v_POLY_param_sparkle_radius_val;\n\n// /MAT/mesh_basic_builder_DOTS/param_sparkle_intensity\nuniform float v_POLY_param_sparkle_intensity_val;\n\n// /MAT/mesh_basic_builder_DOTS/param1\nuniform vec3 v_POLY_param1_val;\n\n// /MAT/mesh_basic_builder_DOTS/param_sparkle_color\nuniform vec3 v_POLY_param_sparkle_color_val;\n\n// /MAT/mesh_basic_builder_DOTS/param_trail_intensity\nuniform float v_POLY_param_trail_intensity_val;\n\n// /MAT/mesh_basic_builder_DOTS/attribute4\nvarying vec3 varying_v_POLY_attribute4_val;\n\n\n\n\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\n\n\t// /MAT/mesh_basic_builder_DOTS/attribute4\n\tvec3 v_POLY_attribute4_val = varying_v_POLY_attribute4_val;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/constant1\n\tfloat v_POLY_constant1_val = 1.8;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/noise1\n\tfloat v_POLY_noise1_noisex = (vec3(0.030000000000000013, 0.030000000000000013, 0.030000000000000013)*fbm_snoise_noise1((v_POLY_attribute4_val*vec3(8.5, 8.5, 8.5))+(vec3(0.0, -0.1, 0.0)+vec3(0.0, 0.0, 0.0)))).x;\n\tfloat v_POLY_noise1_noisey = (vec3(0.030000000000000013, 0.030000000000000013, 0.030000000000000013)*fbm_snoise_noise1((v_POLY_attribute4_val*vec3(8.5, 8.5, 8.5))+(vec3(0.0, -0.1, 0.0)+vec3(1000.0, 1000.0, 1000.0)))).y;\n\tfloat v_POLY_noise1_noisez = (vec3(0.030000000000000013, 0.030000000000000013, 0.030000000000000013)*fbm_snoise_noise1((v_POLY_attribute4_val*vec3(8.5, 8.5, 8.5))+(vec3(0.0, -0.1, 0.0)+vec3(2000.0, 2000.0, 2000.0)))).z;\n\tvec3 v_POLY_noise1_noise = vec3(v_POLY_noise1_noisex, v_POLY_noise1_noisey, v_POLY_noise1_noisez);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/normalize3\n\tvec3 v_POLY_normalize3_normalized = normalize(v_POLY_param_sparkle_center_val);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/negate1\n\tfloat v_POLY_negate1_val = -1.0 * v_POLY_constant1_val;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/noise2\n\tfloat v_POLY_noise2_noise = 2.0*fbm_snoise_noise2((v_POLY_attribute4_val*vec3(12.4, 12.4, 12.4))+vec3(0.0, -0.1, 0.0));\n\t\n\t// /MAT/mesh_basic_builder_DOTS/noise3\n\tfloat v_POLY_noise3_noise = 2.0*fbm_snoise_noise3((v_POLY_attribute4_val*vec3(10.4, 10.4, 10.4))+vec3(18.0, -0.1, 0.0));\n\t\n\t// /MAT/mesh_basic_builder_DOTS/vec3_to_vec4_1\n\tvec4 v_POLY_vec3_to_vec4_1_vec4 = vec4(v_POLY_param1_val.xyz, 0.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/add1\n\tvec3 v_POLY_add1_sum = (v_POLY_attribute4_val + v_POLY_noise1_noise + vec3(0.0, 0.0, 0.0) + vec3(0.0, 0.0, 0.0) + vec3(0.0, 0.0, 0.0) + vec3(0.0, 0.0, 0.0) + vec3(0.0, 0.0, 0.0));\n\t\n\t// /MAT/mesh_basic_builder_DOTS/abs1\n\tfloat v_POLY_abs1_val = abs(v_POLY_noise2_noise);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/clamp4\n\tfloat v_POLY_clamp4_val = clamp(v_POLY_noise3_noise, 0.0, 1.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/color_correct1\n\tvec4 v_POLY_color_correct1_out = sRGBToLinear(v_POLY_vec3_to_vec4_1_vec4);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/normalize2\n\tvec3 v_POLY_normalize2_normalized = normalize(v_POLY_add1_sum);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/mult3\n\tfloat v_POLY_mult3_product = (v_POLY_abs1_val * v_POLY_clamp4_val * 1.0 * 1.0 * 1.0 * 1.0 * 1.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/vec4_to_vec3_1\n\tvec3 v_POLY_vec4_to_vec3_1_vec3 = v_POLY_color_correct1_out.xyz;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/distance1\n\tfloat v_POLY_distance1_val = distance(v_POLY_normalize2_normalized, v_POLY_normalize3_normalized);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/substract1\n\tfloat v_POLY_substract1_substract = (v_POLY_distance1_val - v_POLY_param_sparkle_radius_val - 0.0 - 0.0 - 0.0 - 0.0 - 0.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/abs2\n\tfloat v_POLY_abs2_val = abs(v_POLY_substract1_substract);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/compare3\n\tbool v_POLY_compare3_val = (v_POLY_substract1_substract > 0.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/multAdd1\n\tfloat v_POLY_multAdd1_val = (20.0*(v_POLY_abs2_val + 0.0)) + 0.0;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/twoWaySwitch2\n\tfloat v_POLY_twoWaySwitch2_val;\n\tif(v_POLY_compare3_val){\n\tv_POLY_twoWaySwitch2_val = 0.0;\n\t} else {\n\tv_POLY_twoWaySwitch2_val = 1.0;\n\t}\n\t\n\t// /MAT/mesh_basic_builder_DOTS/clamp1\n\tfloat v_POLY_clamp1_val = clamp(v_POLY_multAdd1_val, v_POLY_negate1_val, v_POLY_constant1_val);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/mult2\n\tfloat v_POLY_mult2_product = (v_POLY_twoWaySwitch2_val * v_POLY_mult3_product * 1.0 * 1.0 * 1.0 * 1.0 * 1.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/cos1\n\tfloat v_POLY_cos1_val = cos(v_POLY_clamp1_val);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/clamp3\n\tfloat v_POLY_clamp3_val = clamp(v_POLY_mult2_product, 0.0, 1.9);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/clamp2\n\tfloat v_POLY_clamp2_val = clamp(v_POLY_cos1_val, 0.0, 1.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/mult5\n\tfloat v_POLY_mult5_product = (v_POLY_param_trail_intensity_val * v_POLY_clamp3_val * 1.0 * 1.0 * 1.0 * 1.0 * 1.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/mult4\n\tfloat v_POLY_mult4_product = (v_POLY_clamp2_val * v_POLY_param_sparkle_intensity_val * 1.0 * 1.0 * 1.0 * 1.0 * 1.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/multAdd2\n\tfloat v_POLY_multAdd2_val = (1.0*(v_POLY_mult4_product + 0.0)) + 0.0;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/max1\n\tfloat v_POLY_max1_val = max(v_POLY_mult5_product, v_POLY_multAdd2_val);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/mix2\n\tvec3 v_POLY_mix2_mix = mix(v_POLY_vec4_to_vec3_1_vec3, v_POLY_param_sparkle_color_val, v_POLY_max1_val);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/null_color\n\tvec3 v_POLY_null_color_val = v_POLY_mix2_mix;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/output1\n\tdiffuseColor.xyz = v_POLY_null_color_val;\n\n\n\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\n\t// accumulation (baked indirect lighting only)\n\t#ifdef USE_LIGHTMAP\n\t\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\n\t#else\n\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\n\t#endif\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\n\t#include <envmap_fragment>\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n",
			"lights": false
		},
		"uniforms_time_dependent": false,
		"uniforms_resolution_dependent": false,
		"param_uniform_pairs": [
			[
				"basecolor",
				"v_POLY_param1_val"
			],
			[
				"sparkleCenter",
				"v_POLY_param_sparkle_center_val"
			],
			[
				"sparkleColor",
				"v_POLY_param_sparkle_color_val"
			],
			[
				"sparkleRadius",
				"v_POLY_param_sparkle_radius_val"
			],
			[
				"sparkleIntensity",
				"v_POLY_param_sparkle_intensity_val"
			],
			[
				"trailIntensity",
				"v_POLY_param_trail_intensity_val"
			],
			[
				"near",
				"v_POLY_param_near_val"
			],
			[
				"far",
				"v_POLY_param_far_val"
			]
		],
		"custom_materials": {
			"customDistanceMaterial": {
				"metadata": {
					"version": 4.5,
					"type": "Material",
					"generator": "Material.toJSON"
				},
				"uuid": "8F6442AE-0A34-4ED3-BD79-9D82DD24673E",
				"type": "ShaderMaterial",
				"depthFunc": 3,
				"depthTest": true,
				"depthWrite": true,
				"stencilWrite": false,
				"stencilWriteMask": 255,
				"stencilFunc": 519,
				"stencilRef": 0,
				"stencilFuncMask": 255,
				"stencilFail": 7680,
				"stencilZFail": 7680,
				"stencilZPass": 7680,
				"glslVersion": null,
				"uniforms": {
					"diffuse": {
						"type": "c",
						"value": 15658734
					},
					"opacity": {
						"value": 1
					},
					"map": {
						"value": null
					},
					"uvTransform": {
						"type": "m3",
						"value": [
							1,
							0,
							0,
							0,
							1,
							0,
							0,
							0,
							1
						]
					},
					"uv2Transform": {
						"type": "m3",
						"value": [
							1,
							0,
							0,
							0,
							1,
							0,
							0,
							0,
							1
						]
					},
					"alphaMap": {
						"value": null
					},
					"displacementMap": {
						"value": null
					},
					"displacementScale": {
						"value": 1
					},
					"displacementBias": {
						"value": 0
					},
					"referencePosition": {
						"type": "v3",
						"value": [
							0,
							0,
							0
						]
					},
					"nearDistance": {
						"value": 1
					},
					"farDistance": {
						"value": 1000
					},
					"v_POLY_param1_val": {
						"type": "c",
						"value": 9349810
					},
					"v_POLY_param_sparkle_center_val": {
						"type": "v3",
						"value": [
							1,
							0,
							0
						]
					},
					"v_POLY_param_sparkle_color_val": {
						"type": "c",
						"value": 16711680
					},
					"v_POLY_param_sparkle_radius_val": {
						"value": 0.28
					},
					"v_POLY_param_sparkle_intensity_val": {
						"value": 0.73
					},
					"v_POLY_param_trail_intensity_val": {
						"value": 0.83
					},
					"v_POLY_param_near_val": {
						"value": 0
					},
					"v_POLY_param_far_val": {
						"value": 0.41
					}
				},
				"defines": {
					"DEPTH_PACKING": 3201
				},
				"vertexShader": "\n#define DISTANCE\n\nvarying vec3 vWorldPosition;\n\n#include <common>\n\n\n\n// /MAT/mesh_basic_builder_DOTS/noise1\n// Modulo 289 without a division (only multiplications)\nfloat mod289(float x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n// Modulo 7 without a division\nvec3 mod7(vec3 x) {\n  return x - floor(x * (1.0 / 7.0)) * 7.0;\n}\n\n// Permutation polynomial: (34x^2 + x) mod 289\nfloat permute(float x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\nvec3 permute(vec3 x) {\n  return mod289((34.0 * x + 1.0) * x);\n}\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat taylorInvSqrt(float r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec2 fade(vec2 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\nvec4 fade(vec4 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex \n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n// \n\n\n\nfloat snoise(vec3 v)\n  { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\n\nfloat fbm_snoise_noise1 (in vec3 st) {\n\tfloat value = 0.0;\n\tfloat amplitude = 1.0;\n\tfor (int i = 0; i < 7; i++) {\n\t\tvalue += amplitude * snoise(st);\n\t\tst *= 2.0;\n\t\tamplitude *= 0.5;\n\t}\n\treturn value;\n}\n\n\n// /MAT/mesh_basic_builder_DOTS/vector_align1\n\n\n// https://github.com/mattatz/ShibuyaCrowd/blob/master/source/shaders/common/quaternion.glsl\nvec4 quatMult(vec4 q1, vec4 q2)\n{\n\treturn vec4(\n\tq1.w * q2.x + q1.x * q2.w + q1.z * q2.y - q1.y * q2.z,\n\tq1.w * q2.y + q1.y * q2.w + q1.x * q2.z - q1.z * q2.x,\n\tq1.w * q2.z + q1.z * q2.w + q1.y * q2.x - q1.x * q2.y,\n\tq1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z\n\t);\n}\n// http://glmatrix.net/docs/quat.js.html#line97\n//   let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n\n//   let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n//   out[0] = ax * bw + aw * bx + ay * bz - az * by;\n\n//   out[1] = ay * bw + aw * by + az * bx - ax * bz;\n\n//   out[2] = az * bw + aw * bz + ax * by - ay * bx;\n\n//   out[3] = aw * bw - ax * bx - ay * by - az * bz;\n\n//   return out\n\n\n\n// http://www.neilmendoza.com/glsl-rotation-about-an-arbitrary-axis/\nmat4 rotationMatrix(vec3 axis, float angle)\n{\n\taxis = normalize(axis);\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\n\tfloat oc = 1.0 - c;\n\n \treturn mat4(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s, 0.0, oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s,  0.0, oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c, 0.0, 0.0, 0.0, 0.0, 1.0);\n}\n\n// https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\nvec4 quatFromAxisAngle(vec3 axis, float angle)\n{\n\tvec4 qr;\n\tfloat half_angle = (angle * 0.5); // * 3.14159 / 180.0;\n\tfloat sin_half_angle = sin(half_angle);\n\tqr.x = axis.x * sin_half_angle;\n\tqr.y = axis.y * sin_half_angle;\n\tqr.z = axis.z * sin_half_angle;\n\tqr.w = cos(half_angle);\n\treturn qr;\n}\nvec3 rotateWithAxisAngle(vec3 position, vec3 axis, float angle)\n{\n\tvec4 q = quatFromAxisAngle(axis, angle);\n\tvec3 v = position.xyz;\n\treturn v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\n}\n// vec3 applyQuaternionToVector( vec4 q, vec3 v ){\n// \treturn v + 2.0 * cross( q.xyz, cross( q.xyz, v ) + q.w * v );\n// }\nvec3 rotateWithQuat( vec3 v, vec4 q )\n{\n\t// vec4 qv = multQuat( quat, vec4(vec, 0.0) );\n\t// return multQuat( qv, vec4(-quat.x, -quat.y, -quat.z, quat.w) ).xyz;\n\treturn v + 2.0 * cross( q.xyz, cross( q.xyz, v ) + q.w * v );\n}\n// https://github.com/glslify/glsl-look-at/blob/gh-pages/index.glsl\n// mat3 rotation_matrix(vec3 origin, vec3 target, float roll) {\n// \tvec3 rr = vec3(sin(roll), cos(roll), 0.0);\n// \tvec3 ww = normalize(target - origin);\n// \tvec3 uu = normalize(cross(ww, rr));\n// \tvec3 vv = normalize(cross(uu, ww));\n\n// \treturn mat3(uu, vv, ww);\n// }\n// mat3 rotation_matrix(vec3 target, float roll) {\n// \tvec3 rr = vec3(sin(roll), cos(roll), 0.0);\n// \tvec3 ww = normalize(target);\n// \tvec3 uu = normalize(cross(ww, rr));\n// \tvec3 vv = normalize(cross(uu, ww));\n\n// \treturn mat3(uu, vv, ww);\n// }\n\nfloat vectorAngle(vec3 start, vec3 dest){\n\tstart = normalize(start);\n\tdest = normalize(dest);\n\n\tfloat cosTheta = dot(start, dest);\n\tvec3 c1 = cross(start, dest);\n\t// We use the dot product of the cross with the Y axis.\n\t// This is a little arbitrary, but can still give a good sense of direction\n\tvec3 y_axis = vec3(0.0, 1.0, 0.0);\n\tfloat d1 = dot(c1, y_axis);\n\tfloat angle = acos(cosTheta) * sign(d1);\n\treturn angle;\n}\n\n// http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#i-need-an-equivalent-of-glulookat-how-do-i-orient-an-object-towards-a-point-\nvec4 vectorAlign(vec3 start, vec3 dest){\n\tstart = normalize(start);\n\tdest = normalize(dest);\n\n\tfloat cosTheta = dot(start, dest);\n\tvec3 axis;\n\n\t// if (cosTheta < -1 + 0.001f){\n\t// \t// special case when vectors in opposite directions:\n\t// \t// there is no \"ideal\" rotation axis\n\t// \t// So guess one; any will do as long as it's perpendicular to start\n\t// \taxis = cross(vec3(0.0f, 0.0f, 1.0f), start);\n\t// \tif (length2(axis) < 0.01 ) // bad luck, they were parallel, try again!\n\t// \t\taxis = cross(vec3(1.0f, 0.0f, 0.0f), start);\n\n\t// \taxis = normalize(axis);\n\t// \treturn gtx::quaternion::angleAxis(glm::radians(180.0f), axis);\n\t// }\n\tif(cosTheta > (1.0 - 0.0001) || cosTheta < (-1.0 + 0.0001) ){\n\t\taxis = normalize(cross(start, vec3(0.0, 1.0, 0.0)));\n\t\tif (length(axis) < 0.001 ){ // bad luck, they were parallel, try again!\n\t\t\taxis = normalize(cross(start, vec3(1.0, 0.0, 0.0)));\n\t\t}\n\t} else {\n\t\taxis = normalize(cross(start, dest));\n\t}\n\n\tfloat angle = acos(cosTheta);\n\n\treturn quatFromAxisAngle(axis, angle);\n}\nvec4 vectorAlignWithUp(vec3 start, vec3 dest, vec3 up){\n\tvec4 rot1 = vectorAlign(start, dest);\n\tup = normalize(up);\n\n\t// Recompute desiredUp so that it's perpendicular to the direction\n\t// You can skip that part if you really want to force desiredUp\n\t// vec3 right = normalize(cross(dest, up));\n\t// up = normalize(cross(right, dest));\n\n\t// Because of the 1rst rotation, the up is probably completely screwed up.\n\t// Find the rotation between the \"up\" of the rotated object, and the desired up\n\tvec3 newUp = rotateWithQuat(vec3(0.0, 1.0, 0.0), rot1);//rot1 * vec3(0.0, 1.0, 0.0);\n\tvec4 rot2 = vectorAlign(up, newUp);\n\n\t// return rot1;\n\treturn rot2;\n\t// return multQuat(rot1, rot2);\n\t// return rot2 * rot1;\n\n}\n\n// https://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\nfloat quatToAngle(vec4 q){\n\treturn 2.0 * acos(q.w);\n}\nvec3 quatToAxis(vec4 q){\n\treturn vec3(\n\t\tq.x / sqrt(1.0-q.w*q.w),\n\t\tq.y / sqrt(1.0-q.w*q.w),\n\t\tq.z / sqrt(1.0-q.w*q.w)\n\t);\n}\n\nvec4 align(vec3 dir, vec3 up){\n\tvec3 start_dir = vec3(0.0, 0.0, 1.0);\n\tvec3 start_up = vec3(0.0, 1.0, 0.0);\n\tvec4 rot1 = vectorAlign(start_dir, dir);\n\tup = normalize(up);\n\n\t// Recompute desiredUp so that it's perpendicular to the direction\n\t// You can skip that part if you really want to force desiredUp\n\tvec3 right = normalize(cross(dir, up));\n\tif(length(right)<0.001){\n\t\tright = vec3(1.0, 0.0, 0.0);\n\t}\n\tup = normalize(cross(right, dir));\n\n\t// Because of the 1rst rotation, the up is probably completely screwed up.\n\t// Find the rotation between the \"up\" of the rotated object, and the desired up\n\tvec3 newUp = rotateWithQuat(start_up, rot1);//rot1 * vec3(0.0, 1.0, 0.0);\n\tvec4 rot2 = vectorAlign(normalize(newUp), up);\n\n\t// return rot1;\n\treturn quatMult(rot1, rot2);\n\t// return rot2 * rot1;\n\n}\n\n\n\n\n\n\n\n// /MAT/mesh_basic_builder_DOTS/param_sparkle_center\nuniform vec3 v_POLY_param_sparkle_center_val;\n\n// /MAT/mesh_basic_builder_DOTS/param_sparkle_radius\nuniform float v_POLY_param_sparkle_radius_val;\n\n// /MAT/mesh_basic_builder_DOTS/param_sparkle_intensity\nuniform float v_POLY_param_sparkle_intensity_val;\n\n// /MAT/mesh_basic_builder_DOTS/attribute4\nvarying vec3 varying_v_POLY_attribute4_val;\n\n// /MAT/mesh_basic_builder_DOTS/varyingWrite1\nvarying vec4 varying_mvPosition;\n\n// /MAT/mesh_basic_builder_DOTS/attribute4\nattribute vec3 instancePosition;\n\n// /MAT/mesh_basic_builder_DOTS/attribute2\nattribute float land;\n\n\n\n\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\n\t#include <skinbase_vertex>\n\n\t#ifdef USE_DISPLACEMENTMAP\n\n// removed:\n//\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\n\t#endif\n\n// removed:\n//\t#include <begin_vertex>\n\n\n\n\t// /MAT/mesh_basic_builder_DOTS/attribute4\n\tvec3 v_POLY_attribute4_val = instancePosition;\n\tvarying_v_POLY_attribute4_val = vec3(instancePosition);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/constant1\n\tfloat v_POLY_constant1_val = 1.8;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/attribute3\n\tvec3 v_POLY_attribute3_val = instancePosition;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/attribute2\n\tfloat v_POLY_attribute2_val = land;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/constant_size_sea\n\tfloat v_POLY_constant_size_sea_val = 0.24;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/constant_size_land\n\tfloat v_POLY_constant_size_land_val = 0.7;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/noise1\n\tfloat v_POLY_noise1_noisex = (vec3(0.030000000000000013, 0.030000000000000013, 0.030000000000000013)*fbm_snoise_noise1((v_POLY_attribute4_val*vec3(8.5, 8.5, 8.5))+(vec3(0.0, -0.1, 0.0)+vec3(0.0, 0.0, 0.0)))).x;\n\tfloat v_POLY_noise1_noisey = (vec3(0.030000000000000013, 0.030000000000000013, 0.030000000000000013)*fbm_snoise_noise1((v_POLY_attribute4_val*vec3(8.5, 8.5, 8.5))+(vec3(0.0, -0.1, 0.0)+vec3(1000.0, 1000.0, 1000.0)))).y;\n\tfloat v_POLY_noise1_noisez = (vec3(0.030000000000000013, 0.030000000000000013, 0.030000000000000013)*fbm_snoise_noise1((v_POLY_attribute4_val*vec3(8.5, 8.5, 8.5))+(vec3(0.0, -0.1, 0.0)+vec3(2000.0, 2000.0, 2000.0)))).z;\n\tvec3 v_POLY_noise1_noise = vec3(v_POLY_noise1_noisex, v_POLY_noise1_noisey, v_POLY_noise1_noisez);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/normalize3\n\tvec3 v_POLY_normalize3_normalized = normalize(v_POLY_param_sparkle_center_val);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/negate1\n\tfloat v_POLY_negate1_val = -1.0 * v_POLY_constant1_val;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/normalize1\n\tvec3 v_POLY_normalize1_normalized = normalize(v_POLY_attribute3_val);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/compare1\n\tbool v_POLY_compare1_val = (v_POLY_attribute2_val < 0.5);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/add1\n\tvec3 v_POLY_add1_sum = (v_POLY_attribute4_val + v_POLY_noise1_noise + vec3(0.0, 0.0, 0.0) + vec3(0.0, 0.0, 0.0) + vec3(0.0, 0.0, 0.0) + vec3(0.0, 0.0, 0.0) + vec3(0.0, 0.0, 0.0));\n\t\n\t// /MAT/mesh_basic_builder_DOTS/vector_align1\n\tvec4 v_POLY_vector_align1_val = vectorAlignWithUp(vec3(0.0, 1.0, 0.0), v_POLY_normalize1_normalized, vec3(0.0, 0.0, 1.0));\n\t\n\t// /MAT/mesh_basic_builder_DOTS/twoWaySwitch1\n\tfloat v_POLY_twoWaySwitch1_val;\n\tif(v_POLY_compare1_val){\n\tv_POLY_twoWaySwitch1_val = v_POLY_constant_size_sea_val;\n\t} else {\n\tv_POLY_twoWaySwitch1_val = v_POLY_constant_size_land_val;\n\t}\n\t\n\t// /MAT/mesh_basic_builder_DOTS/normalize2\n\tvec3 v_POLY_normalize2_normalized = normalize(v_POLY_add1_sum);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/float_to_vec3_1\n\tvec3 v_POLY_float_to_vec3_1_vec3 = vec3(v_POLY_twoWaySwitch1_val, v_POLY_twoWaySwitch1_val, v_POLY_twoWaySwitch1_val);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/distance1\n\tfloat v_POLY_distance1_val = distance(v_POLY_normalize2_normalized, v_POLY_normalize3_normalized);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/substract1\n\tfloat v_POLY_substract1_substract = (v_POLY_distance1_val - v_POLY_param_sparkle_radius_val - 0.0 - 0.0 - 0.0 - 0.0 - 0.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/abs2\n\tfloat v_POLY_abs2_val = abs(v_POLY_substract1_substract);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/multAdd1\n\tfloat v_POLY_multAdd1_val = (20.0*(v_POLY_abs2_val + 0.0)) + 0.0;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/clamp1\n\tfloat v_POLY_clamp1_val = clamp(v_POLY_multAdd1_val, v_POLY_negate1_val, v_POLY_constant1_val);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/cos1\n\tfloat v_POLY_cos1_val = cos(v_POLY_clamp1_val);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/clamp2\n\tfloat v_POLY_clamp2_val = clamp(v_POLY_cos1_val, 0.0, 1.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/mult4\n\tfloat v_POLY_mult4_product = (v_POLY_clamp2_val * v_POLY_param_sparkle_intensity_val * 1.0 * 1.0 * 1.0 * 1.0 * 1.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/compare2\n\tbool v_POLY_compare2_val = (v_POLY_mult4_product > 0.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/multAdd3\n\tfloat v_POLY_multAdd3_val = (0.04*(v_POLY_mult4_product + 0.0)) + 1.0;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/twoWaySwitch3\n\tfloat v_POLY_twoWaySwitch3_val;\n\tif(v_POLY_compare2_val){\n\tv_POLY_twoWaySwitch3_val = v_POLY_multAdd3_val;\n\t} else {\n\tv_POLY_twoWaySwitch3_val = 1.0;\n\t}\n\t\n\t// /MAT/mesh_basic_builder_DOTS/mult1\n\tvec3 v_POLY_mult1_product = (v_POLY_twoWaySwitch3_val * v_POLY_attribute3_val);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/instance_transform1\n\tvec3 v_POLY_instance_transform1_position = vec3(position);\n\tv_POLY_instance_transform1_position *= v_POLY_float_to_vec3_1_vec3;\n\tv_POLY_instance_transform1_position = rotateWithQuat( v_POLY_instance_transform1_position, v_POLY_vector_align1_val );\n\tv_POLY_instance_transform1_position += v_POLY_mult1_product;\n\tvec3 v_POLY_instance_transform1_normal = vec3(normal);\n\tv_POLY_instance_transform1_normal = rotateWithQuat( v_POLY_instance_transform1_normal, v_POLY_vector_align1_val );\n\t\n\t// /MAT/mesh_basic_builder_DOTS/output1\n\tvec3 transformed = v_POLY_instance_transform1_position;\n\tvec3 objectNormal = v_POLY_instance_transform1_normal;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/model_view_matrix_mult1\n\tvec4 v_POLY_model_view_matrix_mult1_mvMult = modelViewMatrix * vec4(v_POLY_instance_transform1_position, 1.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/varyingWrite1\n\tvarying_mvPosition = v_POLY_model_view_matrix_mult1_mvMult;\n\n\n\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvWorldPosition = worldPosition.xyz;\n\n}\n",
				"fragmentShader": "\n#define DISTANCE\n\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n\n#include <common>\n\n\n\n// /MAT/mesh_basic_builder_DOTS/noise1\n// Modulo 289 without a division (only multiplications)\nfloat mod289(float x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n// Modulo 7 without a division\nvec3 mod7(vec3 x) {\n  return x - floor(x * (1.0 / 7.0)) * 7.0;\n}\n\n// Permutation polynomial: (34x^2 + x) mod 289\nfloat permute(float x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\nvec3 permute(vec3 x) {\n  return mod289((34.0 * x + 1.0) * x);\n}\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat taylorInvSqrt(float r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec2 fade(vec2 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\nvec4 fade(vec4 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex \n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n// \n\n\n\nfloat snoise(vec3 v)\n  { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\n\nfloat fbm_snoise_noise1 (in vec3 st) {\n\tfloat value = 0.0;\n\tfloat amplitude = 1.0;\n\tfor (int i = 0; i < 7; i++) {\n\t\tvalue += amplitude * snoise(st);\n\t\tst *= 2.0;\n\t\tamplitude *= 0.5;\n\t}\n\treturn value;\n}\n\n\n// /MAT/mesh_basic_builder_DOTS/noise2\n\nfloat fbm_snoise_noise2 (in vec3 st) {\n\tfloat value = 0.0;\n\tfloat amplitude = 1.0;\n\tfor (int i = 0; i < 7; i++) {\n\t\tvalue += amplitude * snoise(st);\n\t\tst *= 2.0;\n\t\tamplitude *= 0.5;\n\t}\n\treturn value;\n}\n\n\n// /MAT/mesh_basic_builder_DOTS/noise3\n\nfloat fbm_snoise_noise3 (in vec3 st) {\n\tfloat value = 0.0;\n\tfloat amplitude = 1.0;\n\tfor (int i = 0; i < 7; i++) {\n\t\tvalue += amplitude * snoise(st);\n\t\tst *= 2.0;\n\t\tamplitude *= 0.5;\n\t}\n\treturn value;\n}\n\n\n\n\n\n\n\n\n// /MAT/mesh_basic_builder_DOTS/param_sparkle_center\nuniform vec3 v_POLY_param_sparkle_center_val;\n\n// /MAT/mesh_basic_builder_DOTS/param_sparkle_radius\nuniform float v_POLY_param_sparkle_radius_val;\n\n// /MAT/mesh_basic_builder_DOTS/param_sparkle_intensity\nuniform float v_POLY_param_sparkle_intensity_val;\n\n// /MAT/mesh_basic_builder_DOTS/param1\nuniform vec3 v_POLY_param1_val;\n\n// /MAT/mesh_basic_builder_DOTS/param_sparkle_color\nuniform vec3 v_POLY_param_sparkle_color_val;\n\n// /MAT/mesh_basic_builder_DOTS/param_trail_intensity\nuniform float v_POLY_param_trail_intensity_val;\n\n// /MAT/mesh_basic_builder_DOTS/attribute4\nvarying vec3 varying_v_POLY_attribute4_val;\n\n\n\n\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main () {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\n\n\t// /MAT/mesh_basic_builder_DOTS/attribute4\n\tvec3 v_POLY_attribute4_val = varying_v_POLY_attribute4_val;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/constant1\n\tfloat v_POLY_constant1_val = 1.8;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/noise1\n\tfloat v_POLY_noise1_noisex = (vec3(0.030000000000000013, 0.030000000000000013, 0.030000000000000013)*fbm_snoise_noise1((v_POLY_attribute4_val*vec3(8.5, 8.5, 8.5))+(vec3(0.0, -0.1, 0.0)+vec3(0.0, 0.0, 0.0)))).x;\n\tfloat v_POLY_noise1_noisey = (vec3(0.030000000000000013, 0.030000000000000013, 0.030000000000000013)*fbm_snoise_noise1((v_POLY_attribute4_val*vec3(8.5, 8.5, 8.5))+(vec3(0.0, -0.1, 0.0)+vec3(1000.0, 1000.0, 1000.0)))).y;\n\tfloat v_POLY_noise1_noisez = (vec3(0.030000000000000013, 0.030000000000000013, 0.030000000000000013)*fbm_snoise_noise1((v_POLY_attribute4_val*vec3(8.5, 8.5, 8.5))+(vec3(0.0, -0.1, 0.0)+vec3(2000.0, 2000.0, 2000.0)))).z;\n\tvec3 v_POLY_noise1_noise = vec3(v_POLY_noise1_noisex, v_POLY_noise1_noisey, v_POLY_noise1_noisez);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/normalize3\n\tvec3 v_POLY_normalize3_normalized = normalize(v_POLY_param_sparkle_center_val);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/negate1\n\tfloat v_POLY_negate1_val = -1.0 * v_POLY_constant1_val;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/noise2\n\tfloat v_POLY_noise2_noise = 2.0*fbm_snoise_noise2((v_POLY_attribute4_val*vec3(12.4, 12.4, 12.4))+vec3(0.0, -0.1, 0.0));\n\t\n\t// /MAT/mesh_basic_builder_DOTS/noise3\n\tfloat v_POLY_noise3_noise = 2.0*fbm_snoise_noise3((v_POLY_attribute4_val*vec3(10.4, 10.4, 10.4))+vec3(18.0, -0.1, 0.0));\n\t\n\t// /MAT/mesh_basic_builder_DOTS/vec3_to_vec4_1\n\tvec4 v_POLY_vec3_to_vec4_1_vec4 = vec4(v_POLY_param1_val.xyz, 0.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/add1\n\tvec3 v_POLY_add1_sum = (v_POLY_attribute4_val + v_POLY_noise1_noise + vec3(0.0, 0.0, 0.0) + vec3(0.0, 0.0, 0.0) + vec3(0.0, 0.0, 0.0) + vec3(0.0, 0.0, 0.0) + vec3(0.0, 0.0, 0.0));\n\t\n\t// /MAT/mesh_basic_builder_DOTS/abs1\n\tfloat v_POLY_abs1_val = abs(v_POLY_noise2_noise);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/clamp4\n\tfloat v_POLY_clamp4_val = clamp(v_POLY_noise3_noise, 0.0, 1.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/color_correct1\n\tvec4 v_POLY_color_correct1_out = sRGBToLinear(v_POLY_vec3_to_vec4_1_vec4);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/normalize2\n\tvec3 v_POLY_normalize2_normalized = normalize(v_POLY_add1_sum);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/mult3\n\tfloat v_POLY_mult3_product = (v_POLY_abs1_val * v_POLY_clamp4_val * 1.0 * 1.0 * 1.0 * 1.0 * 1.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/vec4_to_vec3_1\n\tvec3 v_POLY_vec4_to_vec3_1_vec3 = v_POLY_color_correct1_out.xyz;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/distance1\n\tfloat v_POLY_distance1_val = distance(v_POLY_normalize2_normalized, v_POLY_normalize3_normalized);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/substract1\n\tfloat v_POLY_substract1_substract = (v_POLY_distance1_val - v_POLY_param_sparkle_radius_val - 0.0 - 0.0 - 0.0 - 0.0 - 0.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/abs2\n\tfloat v_POLY_abs2_val = abs(v_POLY_substract1_substract);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/compare3\n\tbool v_POLY_compare3_val = (v_POLY_substract1_substract > 0.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/multAdd1\n\tfloat v_POLY_multAdd1_val = (20.0*(v_POLY_abs2_val + 0.0)) + 0.0;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/twoWaySwitch2\n\tfloat v_POLY_twoWaySwitch2_val;\n\tif(v_POLY_compare3_val){\n\tv_POLY_twoWaySwitch2_val = 0.0;\n\t} else {\n\tv_POLY_twoWaySwitch2_val = 1.0;\n\t}\n\t\n\t// /MAT/mesh_basic_builder_DOTS/clamp1\n\tfloat v_POLY_clamp1_val = clamp(v_POLY_multAdd1_val, v_POLY_negate1_val, v_POLY_constant1_val);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/mult2\n\tfloat v_POLY_mult2_product = (v_POLY_twoWaySwitch2_val * v_POLY_mult3_product * 1.0 * 1.0 * 1.0 * 1.0 * 1.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/cos1\n\tfloat v_POLY_cos1_val = cos(v_POLY_clamp1_val);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/clamp3\n\tfloat v_POLY_clamp3_val = clamp(v_POLY_mult2_product, 0.0, 1.9);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/clamp2\n\tfloat v_POLY_clamp2_val = clamp(v_POLY_cos1_val, 0.0, 1.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/mult5\n\tfloat v_POLY_mult5_product = (v_POLY_param_trail_intensity_val * v_POLY_clamp3_val * 1.0 * 1.0 * 1.0 * 1.0 * 1.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/mult4\n\tfloat v_POLY_mult4_product = (v_POLY_clamp2_val * v_POLY_param_sparkle_intensity_val * 1.0 * 1.0 * 1.0 * 1.0 * 1.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/multAdd2\n\tfloat v_POLY_multAdd2_val = (1.0*(v_POLY_mult4_product + 0.0)) + 0.0;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/max1\n\tfloat v_POLY_max1_val = max(v_POLY_mult5_product, v_POLY_multAdd2_val);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/mix2\n\tvec3 v_POLY_mix2_mix = mix(v_POLY_vec4_to_vec3_1_vec3, v_POLY_param_sparkle_color_val, v_POLY_max1_val);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/null_color\n\tvec3 v_POLY_null_color_val = v_POLY_mix2_mix;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/output1\n\tdiffuseColor.xyz = v_POLY_null_color_val;\n\n\n\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist ); // clamp to [ 0, 1 ]\n\n\tgl_FragColor = packDepthToRGBA( dist );\n\n}\n",
				"lights": false
			},
			"customDepthMaterial": {
				"metadata": {
					"version": 4.5,
					"type": "Material",
					"generator": "Material.toJSON"
				},
				"uuid": "57E51717-3D83-4CB6-A7EA-38D5775F03DF",
				"type": "ShaderMaterial",
				"depthFunc": 3,
				"depthTest": true,
				"depthWrite": true,
				"stencilWrite": false,
				"stencilWriteMask": 255,
				"stencilFunc": 519,
				"stencilRef": 0,
				"stencilFuncMask": 255,
				"stencilFail": 7680,
				"stencilZFail": 7680,
				"stencilZPass": 7680,
				"glslVersion": null,
				"uniforms": {
					"diffuse": {
						"type": "c",
						"value": 15658734
					},
					"opacity": {
						"value": 1
					},
					"map": {
						"value": null
					},
					"uvTransform": {
						"type": "m3",
						"value": [
							1,
							0,
							0,
							0,
							1,
							0,
							0,
							0,
							1
						]
					},
					"uv2Transform": {
						"type": "m3",
						"value": [
							1,
							0,
							0,
							0,
							1,
							0,
							0,
							0,
							1
						]
					},
					"alphaMap": {
						"value": null
					},
					"displacementMap": {
						"value": null
					},
					"displacementScale": {
						"value": 1
					},
					"displacementBias": {
						"value": 0
					},
					"v_POLY_param1_val": {
						"type": "c",
						"value": 9349810
					},
					"v_POLY_param_sparkle_center_val": {
						"type": "v3",
						"value": [
							1,
							0,
							0
						]
					},
					"v_POLY_param_sparkle_color_val": {
						"type": "c",
						"value": 16711680
					},
					"v_POLY_param_sparkle_radius_val": {
						"value": 0.28
					},
					"v_POLY_param_sparkle_intensity_val": {
						"value": 0.73
					},
					"v_POLY_param_trail_intensity_val": {
						"value": 0.83
					},
					"v_POLY_param_near_val": {
						"value": 0
					},
					"v_POLY_param_far_val": {
						"value": 0.41
					}
				},
				"defines": {
					"DEPTH_PACKING": 3201
				},
				"vertexShader": "\n#include <common>\n\n\n\n// /MAT/mesh_basic_builder_DOTS/noise1\n// Modulo 289 without a division (only multiplications)\nfloat mod289(float x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n// Modulo 7 without a division\nvec3 mod7(vec3 x) {\n  return x - floor(x * (1.0 / 7.0)) * 7.0;\n}\n\n// Permutation polynomial: (34x^2 + x) mod 289\nfloat permute(float x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\nvec3 permute(vec3 x) {\n  return mod289((34.0 * x + 1.0) * x);\n}\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat taylorInvSqrt(float r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec2 fade(vec2 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\nvec4 fade(vec4 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex \n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n// \n\n\n\nfloat snoise(vec3 v)\n  { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\n\nfloat fbm_snoise_noise1 (in vec3 st) {\n\tfloat value = 0.0;\n\tfloat amplitude = 1.0;\n\tfor (int i = 0; i < 7; i++) {\n\t\tvalue += amplitude * snoise(st);\n\t\tst *= 2.0;\n\t\tamplitude *= 0.5;\n\t}\n\treturn value;\n}\n\n\n// /MAT/mesh_basic_builder_DOTS/vector_align1\n\n\n// https://github.com/mattatz/ShibuyaCrowd/blob/master/source/shaders/common/quaternion.glsl\nvec4 quatMult(vec4 q1, vec4 q2)\n{\n\treturn vec4(\n\tq1.w * q2.x + q1.x * q2.w + q1.z * q2.y - q1.y * q2.z,\n\tq1.w * q2.y + q1.y * q2.w + q1.x * q2.z - q1.z * q2.x,\n\tq1.w * q2.z + q1.z * q2.w + q1.y * q2.x - q1.x * q2.y,\n\tq1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z\n\t);\n}\n// http://glmatrix.net/docs/quat.js.html#line97\n//   let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n\n//   let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n//   out[0] = ax * bw + aw * bx + ay * bz - az * by;\n\n//   out[1] = ay * bw + aw * by + az * bx - ax * bz;\n\n//   out[2] = az * bw + aw * bz + ax * by - ay * bx;\n\n//   out[3] = aw * bw - ax * bx - ay * by - az * bz;\n\n//   return out\n\n\n\n// http://www.neilmendoza.com/glsl-rotation-about-an-arbitrary-axis/\nmat4 rotationMatrix(vec3 axis, float angle)\n{\n\taxis = normalize(axis);\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\n\tfloat oc = 1.0 - c;\n\n \treturn mat4(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s, 0.0, oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s,  0.0, oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c, 0.0, 0.0, 0.0, 0.0, 1.0);\n}\n\n// https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\nvec4 quatFromAxisAngle(vec3 axis, float angle)\n{\n\tvec4 qr;\n\tfloat half_angle = (angle * 0.5); // * 3.14159 / 180.0;\n\tfloat sin_half_angle = sin(half_angle);\n\tqr.x = axis.x * sin_half_angle;\n\tqr.y = axis.y * sin_half_angle;\n\tqr.z = axis.z * sin_half_angle;\n\tqr.w = cos(half_angle);\n\treturn qr;\n}\nvec3 rotateWithAxisAngle(vec3 position, vec3 axis, float angle)\n{\n\tvec4 q = quatFromAxisAngle(axis, angle);\n\tvec3 v = position.xyz;\n\treturn v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\n}\n// vec3 applyQuaternionToVector( vec4 q, vec3 v ){\n// \treturn v + 2.0 * cross( q.xyz, cross( q.xyz, v ) + q.w * v );\n// }\nvec3 rotateWithQuat( vec3 v, vec4 q )\n{\n\t// vec4 qv = multQuat( quat, vec4(vec, 0.0) );\n\t// return multQuat( qv, vec4(-quat.x, -quat.y, -quat.z, quat.w) ).xyz;\n\treturn v + 2.0 * cross( q.xyz, cross( q.xyz, v ) + q.w * v );\n}\n// https://github.com/glslify/glsl-look-at/blob/gh-pages/index.glsl\n// mat3 rotation_matrix(vec3 origin, vec3 target, float roll) {\n// \tvec3 rr = vec3(sin(roll), cos(roll), 0.0);\n// \tvec3 ww = normalize(target - origin);\n// \tvec3 uu = normalize(cross(ww, rr));\n// \tvec3 vv = normalize(cross(uu, ww));\n\n// \treturn mat3(uu, vv, ww);\n// }\n// mat3 rotation_matrix(vec3 target, float roll) {\n// \tvec3 rr = vec3(sin(roll), cos(roll), 0.0);\n// \tvec3 ww = normalize(target);\n// \tvec3 uu = normalize(cross(ww, rr));\n// \tvec3 vv = normalize(cross(uu, ww));\n\n// \treturn mat3(uu, vv, ww);\n// }\n\nfloat vectorAngle(vec3 start, vec3 dest){\n\tstart = normalize(start);\n\tdest = normalize(dest);\n\n\tfloat cosTheta = dot(start, dest);\n\tvec3 c1 = cross(start, dest);\n\t// We use the dot product of the cross with the Y axis.\n\t// This is a little arbitrary, but can still give a good sense of direction\n\tvec3 y_axis = vec3(0.0, 1.0, 0.0);\n\tfloat d1 = dot(c1, y_axis);\n\tfloat angle = acos(cosTheta) * sign(d1);\n\treturn angle;\n}\n\n// http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#i-need-an-equivalent-of-glulookat-how-do-i-orient-an-object-towards-a-point-\nvec4 vectorAlign(vec3 start, vec3 dest){\n\tstart = normalize(start);\n\tdest = normalize(dest);\n\n\tfloat cosTheta = dot(start, dest);\n\tvec3 axis;\n\n\t// if (cosTheta < -1 + 0.001f){\n\t// \t// special case when vectors in opposite directions:\n\t// \t// there is no \"ideal\" rotation axis\n\t// \t// So guess one; any will do as long as it's perpendicular to start\n\t// \taxis = cross(vec3(0.0f, 0.0f, 1.0f), start);\n\t// \tif (length2(axis) < 0.01 ) // bad luck, they were parallel, try again!\n\t// \t\taxis = cross(vec3(1.0f, 0.0f, 0.0f), start);\n\n\t// \taxis = normalize(axis);\n\t// \treturn gtx::quaternion::angleAxis(glm::radians(180.0f), axis);\n\t// }\n\tif(cosTheta > (1.0 - 0.0001) || cosTheta < (-1.0 + 0.0001) ){\n\t\taxis = normalize(cross(start, vec3(0.0, 1.0, 0.0)));\n\t\tif (length(axis) < 0.001 ){ // bad luck, they were parallel, try again!\n\t\t\taxis = normalize(cross(start, vec3(1.0, 0.0, 0.0)));\n\t\t}\n\t} else {\n\t\taxis = normalize(cross(start, dest));\n\t}\n\n\tfloat angle = acos(cosTheta);\n\n\treturn quatFromAxisAngle(axis, angle);\n}\nvec4 vectorAlignWithUp(vec3 start, vec3 dest, vec3 up){\n\tvec4 rot1 = vectorAlign(start, dest);\n\tup = normalize(up);\n\n\t// Recompute desiredUp so that it's perpendicular to the direction\n\t// You can skip that part if you really want to force desiredUp\n\t// vec3 right = normalize(cross(dest, up));\n\t// up = normalize(cross(right, dest));\n\n\t// Because of the 1rst rotation, the up is probably completely screwed up.\n\t// Find the rotation between the \"up\" of the rotated object, and the desired up\n\tvec3 newUp = rotateWithQuat(vec3(0.0, 1.0, 0.0), rot1);//rot1 * vec3(0.0, 1.0, 0.0);\n\tvec4 rot2 = vectorAlign(up, newUp);\n\n\t// return rot1;\n\treturn rot2;\n\t// return multQuat(rot1, rot2);\n\t// return rot2 * rot1;\n\n}\n\n// https://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\nfloat quatToAngle(vec4 q){\n\treturn 2.0 * acos(q.w);\n}\nvec3 quatToAxis(vec4 q){\n\treturn vec3(\n\t\tq.x / sqrt(1.0-q.w*q.w),\n\t\tq.y / sqrt(1.0-q.w*q.w),\n\t\tq.z / sqrt(1.0-q.w*q.w)\n\t);\n}\n\nvec4 align(vec3 dir, vec3 up){\n\tvec3 start_dir = vec3(0.0, 0.0, 1.0);\n\tvec3 start_up = vec3(0.0, 1.0, 0.0);\n\tvec4 rot1 = vectorAlign(start_dir, dir);\n\tup = normalize(up);\n\n\t// Recompute desiredUp so that it's perpendicular to the direction\n\t// You can skip that part if you really want to force desiredUp\n\tvec3 right = normalize(cross(dir, up));\n\tif(length(right)<0.001){\n\t\tright = vec3(1.0, 0.0, 0.0);\n\t}\n\tup = normalize(cross(right, dir));\n\n\t// Because of the 1rst rotation, the up is probably completely screwed up.\n\t// Find the rotation between the \"up\" of the rotated object, and the desired up\n\tvec3 newUp = rotateWithQuat(start_up, rot1);//rot1 * vec3(0.0, 1.0, 0.0);\n\tvec4 rot2 = vectorAlign(normalize(newUp), up);\n\n\t// return rot1;\n\treturn quatMult(rot1, rot2);\n\t// return rot2 * rot1;\n\n}\n\n\n\n\n\n\n\n// /MAT/mesh_basic_builder_DOTS/param_sparkle_center\nuniform vec3 v_POLY_param_sparkle_center_val;\n\n// /MAT/mesh_basic_builder_DOTS/param_sparkle_radius\nuniform float v_POLY_param_sparkle_radius_val;\n\n// /MAT/mesh_basic_builder_DOTS/param_sparkle_intensity\nuniform float v_POLY_param_sparkle_intensity_val;\n\n// /MAT/mesh_basic_builder_DOTS/attribute4\nvarying vec3 varying_v_POLY_attribute4_val;\n\n// /MAT/mesh_basic_builder_DOTS/varyingWrite1\nvarying vec4 varying_mvPosition;\n\n// /MAT/mesh_basic_builder_DOTS/attribute4\nattribute vec3 instancePosition;\n\n// /MAT/mesh_basic_builder_DOTS/attribute2\nattribute float land;\n\n\n\n\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\n// This is used for computing an equivalent of gl_FragCoord.z that is as high precision as possible.\n// Some platforms compute gl_FragCoord at a lower precision which makes the manually computed value better for\n// depth-based postprocessing effects. Reproduced on iPad with A10 processor / iPadOS 13.3.1.\nvarying vec2 vHighPrecisionZW;\n\nvoid main() {\n\n\t#include <uv_vertex>\n\n\t#include <skinbase_vertex>\n\n\t#ifdef USE_DISPLACEMENTMAP\n\n// removed:\n//\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\n\t#endif\n\n// removed:\n//\t#include <begin_vertex>\n\n\n\n\t// /MAT/mesh_basic_builder_DOTS/attribute4\n\tvec3 v_POLY_attribute4_val = instancePosition;\n\tvarying_v_POLY_attribute4_val = vec3(instancePosition);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/constant1\n\tfloat v_POLY_constant1_val = 1.8;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/attribute3\n\tvec3 v_POLY_attribute3_val = instancePosition;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/attribute2\n\tfloat v_POLY_attribute2_val = land;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/constant_size_sea\n\tfloat v_POLY_constant_size_sea_val = 0.24;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/constant_size_land\n\tfloat v_POLY_constant_size_land_val = 0.7;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/noise1\n\tfloat v_POLY_noise1_noisex = (vec3(0.030000000000000013, 0.030000000000000013, 0.030000000000000013)*fbm_snoise_noise1((v_POLY_attribute4_val*vec3(8.5, 8.5, 8.5))+(vec3(0.0, -0.1, 0.0)+vec3(0.0, 0.0, 0.0)))).x;\n\tfloat v_POLY_noise1_noisey = (vec3(0.030000000000000013, 0.030000000000000013, 0.030000000000000013)*fbm_snoise_noise1((v_POLY_attribute4_val*vec3(8.5, 8.5, 8.5))+(vec3(0.0, -0.1, 0.0)+vec3(1000.0, 1000.0, 1000.0)))).y;\n\tfloat v_POLY_noise1_noisez = (vec3(0.030000000000000013, 0.030000000000000013, 0.030000000000000013)*fbm_snoise_noise1((v_POLY_attribute4_val*vec3(8.5, 8.5, 8.5))+(vec3(0.0, -0.1, 0.0)+vec3(2000.0, 2000.0, 2000.0)))).z;\n\tvec3 v_POLY_noise1_noise = vec3(v_POLY_noise1_noisex, v_POLY_noise1_noisey, v_POLY_noise1_noisez);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/normalize3\n\tvec3 v_POLY_normalize3_normalized = normalize(v_POLY_param_sparkle_center_val);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/negate1\n\tfloat v_POLY_negate1_val = -1.0 * v_POLY_constant1_val;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/normalize1\n\tvec3 v_POLY_normalize1_normalized = normalize(v_POLY_attribute3_val);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/compare1\n\tbool v_POLY_compare1_val = (v_POLY_attribute2_val < 0.5);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/add1\n\tvec3 v_POLY_add1_sum = (v_POLY_attribute4_val + v_POLY_noise1_noise + vec3(0.0, 0.0, 0.0) + vec3(0.0, 0.0, 0.0) + vec3(0.0, 0.0, 0.0) + vec3(0.0, 0.0, 0.0) + vec3(0.0, 0.0, 0.0));\n\t\n\t// /MAT/mesh_basic_builder_DOTS/vector_align1\n\tvec4 v_POLY_vector_align1_val = vectorAlignWithUp(vec3(0.0, 1.0, 0.0), v_POLY_normalize1_normalized, vec3(0.0, 0.0, 1.0));\n\t\n\t// /MAT/mesh_basic_builder_DOTS/twoWaySwitch1\n\tfloat v_POLY_twoWaySwitch1_val;\n\tif(v_POLY_compare1_val){\n\tv_POLY_twoWaySwitch1_val = v_POLY_constant_size_sea_val;\n\t} else {\n\tv_POLY_twoWaySwitch1_val = v_POLY_constant_size_land_val;\n\t}\n\t\n\t// /MAT/mesh_basic_builder_DOTS/normalize2\n\tvec3 v_POLY_normalize2_normalized = normalize(v_POLY_add1_sum);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/float_to_vec3_1\n\tvec3 v_POLY_float_to_vec3_1_vec3 = vec3(v_POLY_twoWaySwitch1_val, v_POLY_twoWaySwitch1_val, v_POLY_twoWaySwitch1_val);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/distance1\n\tfloat v_POLY_distance1_val = distance(v_POLY_normalize2_normalized, v_POLY_normalize3_normalized);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/substract1\n\tfloat v_POLY_substract1_substract = (v_POLY_distance1_val - v_POLY_param_sparkle_radius_val - 0.0 - 0.0 - 0.0 - 0.0 - 0.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/abs2\n\tfloat v_POLY_abs2_val = abs(v_POLY_substract1_substract);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/multAdd1\n\tfloat v_POLY_multAdd1_val = (20.0*(v_POLY_abs2_val + 0.0)) + 0.0;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/clamp1\n\tfloat v_POLY_clamp1_val = clamp(v_POLY_multAdd1_val, v_POLY_negate1_val, v_POLY_constant1_val);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/cos1\n\tfloat v_POLY_cos1_val = cos(v_POLY_clamp1_val);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/clamp2\n\tfloat v_POLY_clamp2_val = clamp(v_POLY_cos1_val, 0.0, 1.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/mult4\n\tfloat v_POLY_mult4_product = (v_POLY_clamp2_val * v_POLY_param_sparkle_intensity_val * 1.0 * 1.0 * 1.0 * 1.0 * 1.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/compare2\n\tbool v_POLY_compare2_val = (v_POLY_mult4_product > 0.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/multAdd3\n\tfloat v_POLY_multAdd3_val = (0.04*(v_POLY_mult4_product + 0.0)) + 1.0;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/twoWaySwitch3\n\tfloat v_POLY_twoWaySwitch3_val;\n\tif(v_POLY_compare2_val){\n\tv_POLY_twoWaySwitch3_val = v_POLY_multAdd3_val;\n\t} else {\n\tv_POLY_twoWaySwitch3_val = 1.0;\n\t}\n\t\n\t// /MAT/mesh_basic_builder_DOTS/mult1\n\tvec3 v_POLY_mult1_product = (v_POLY_twoWaySwitch3_val * v_POLY_attribute3_val);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/instance_transform1\n\tvec3 v_POLY_instance_transform1_position = vec3(position);\n\tv_POLY_instance_transform1_position *= v_POLY_float_to_vec3_1_vec3;\n\tv_POLY_instance_transform1_position = rotateWithQuat( v_POLY_instance_transform1_position, v_POLY_vector_align1_val );\n\tv_POLY_instance_transform1_position += v_POLY_mult1_product;\n\tvec3 v_POLY_instance_transform1_normal = vec3(normal);\n\tv_POLY_instance_transform1_normal = rotateWithQuat( v_POLY_instance_transform1_normal, v_POLY_vector_align1_val );\n\t\n\t// /MAT/mesh_basic_builder_DOTS/output1\n\tvec3 transformed = v_POLY_instance_transform1_position;\n\tvec3 objectNormal = v_POLY_instance_transform1_normal;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/model_view_matrix_mult1\n\tvec4 v_POLY_model_view_matrix_mult1_mvMult = modelViewMatrix * vec4(v_POLY_instance_transform1_position, 1.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/varyingWrite1\n\tvarying_mvPosition = v_POLY_model_view_matrix_mult1_mvMult;\n\n\n\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvHighPrecisionZW = gl_Position.zw;\n\n}\n",
				"fragmentShader": "\n#if DEPTH_PACKING == 3200\n\n\tuniform float opacity;\n\n#endif\n\n#include <common>\n\n\n\n// /MAT/mesh_basic_builder_DOTS/noise1\n// Modulo 289 without a division (only multiplications)\nfloat mod289(float x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n// Modulo 7 without a division\nvec3 mod7(vec3 x) {\n  return x - floor(x * (1.0 / 7.0)) * 7.0;\n}\n\n// Permutation polynomial: (34x^2 + x) mod 289\nfloat permute(float x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\nvec3 permute(vec3 x) {\n  return mod289((34.0 * x + 1.0) * x);\n}\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat taylorInvSqrt(float r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec2 fade(vec2 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\nvec4 fade(vec4 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex \n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n// \n\n\n\nfloat snoise(vec3 v)\n  { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\n\nfloat fbm_snoise_noise1 (in vec3 st) {\n\tfloat value = 0.0;\n\tfloat amplitude = 1.0;\n\tfor (int i = 0; i < 7; i++) {\n\t\tvalue += amplitude * snoise(st);\n\t\tst *= 2.0;\n\t\tamplitude *= 0.5;\n\t}\n\treturn value;\n}\n\n\n// /MAT/mesh_basic_builder_DOTS/noise2\n\nfloat fbm_snoise_noise2 (in vec3 st) {\n\tfloat value = 0.0;\n\tfloat amplitude = 1.0;\n\tfor (int i = 0; i < 7; i++) {\n\t\tvalue += amplitude * snoise(st);\n\t\tst *= 2.0;\n\t\tamplitude *= 0.5;\n\t}\n\treturn value;\n}\n\n\n// /MAT/mesh_basic_builder_DOTS/noise3\n\nfloat fbm_snoise_noise3 (in vec3 st) {\n\tfloat value = 0.0;\n\tfloat amplitude = 1.0;\n\tfor (int i = 0; i < 7; i++) {\n\t\tvalue += amplitude * snoise(st);\n\t\tst *= 2.0;\n\t\tamplitude *= 0.5;\n\t}\n\treturn value;\n}\n\n\n\n\n\n\n\n\n// /MAT/mesh_basic_builder_DOTS/param_sparkle_center\nuniform vec3 v_POLY_param_sparkle_center_val;\n\n// /MAT/mesh_basic_builder_DOTS/param_sparkle_radius\nuniform float v_POLY_param_sparkle_radius_val;\n\n// /MAT/mesh_basic_builder_DOTS/param_sparkle_intensity\nuniform float v_POLY_param_sparkle_intensity_val;\n\n// /MAT/mesh_basic_builder_DOTS/param1\nuniform vec3 v_POLY_param1_val;\n\n// /MAT/mesh_basic_builder_DOTS/param_sparkle_color\nuniform vec3 v_POLY_param_sparkle_color_val;\n\n// /MAT/mesh_basic_builder_DOTS/param_trail_intensity\nuniform float v_POLY_param_trail_intensity_val;\n\n// /MAT/mesh_basic_builder_DOTS/attribute4\nvarying vec3 varying_v_POLY_attribute4_val;\n\n\n\n\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvarying vec2 vHighPrecisionZW;\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\n\n\t// /MAT/mesh_basic_builder_DOTS/attribute4\n\tvec3 v_POLY_attribute4_val = varying_v_POLY_attribute4_val;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/constant1\n\tfloat v_POLY_constant1_val = 1.8;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/noise1\n\tfloat v_POLY_noise1_noisex = (vec3(0.030000000000000013, 0.030000000000000013, 0.030000000000000013)*fbm_snoise_noise1((v_POLY_attribute4_val*vec3(8.5, 8.5, 8.5))+(vec3(0.0, -0.1, 0.0)+vec3(0.0, 0.0, 0.0)))).x;\n\tfloat v_POLY_noise1_noisey = (vec3(0.030000000000000013, 0.030000000000000013, 0.030000000000000013)*fbm_snoise_noise1((v_POLY_attribute4_val*vec3(8.5, 8.5, 8.5))+(vec3(0.0, -0.1, 0.0)+vec3(1000.0, 1000.0, 1000.0)))).y;\n\tfloat v_POLY_noise1_noisez = (vec3(0.030000000000000013, 0.030000000000000013, 0.030000000000000013)*fbm_snoise_noise1((v_POLY_attribute4_val*vec3(8.5, 8.5, 8.5))+(vec3(0.0, -0.1, 0.0)+vec3(2000.0, 2000.0, 2000.0)))).z;\n\tvec3 v_POLY_noise1_noise = vec3(v_POLY_noise1_noisex, v_POLY_noise1_noisey, v_POLY_noise1_noisez);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/normalize3\n\tvec3 v_POLY_normalize3_normalized = normalize(v_POLY_param_sparkle_center_val);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/negate1\n\tfloat v_POLY_negate1_val = -1.0 * v_POLY_constant1_val;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/noise2\n\tfloat v_POLY_noise2_noise = 2.0*fbm_snoise_noise2((v_POLY_attribute4_val*vec3(12.4, 12.4, 12.4))+vec3(0.0, -0.1, 0.0));\n\t\n\t// /MAT/mesh_basic_builder_DOTS/noise3\n\tfloat v_POLY_noise3_noise = 2.0*fbm_snoise_noise3((v_POLY_attribute4_val*vec3(10.4, 10.4, 10.4))+vec3(18.0, -0.1, 0.0));\n\t\n\t// /MAT/mesh_basic_builder_DOTS/vec3_to_vec4_1\n\tvec4 v_POLY_vec3_to_vec4_1_vec4 = vec4(v_POLY_param1_val.xyz, 0.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/add1\n\tvec3 v_POLY_add1_sum = (v_POLY_attribute4_val + v_POLY_noise1_noise + vec3(0.0, 0.0, 0.0) + vec3(0.0, 0.0, 0.0) + vec3(0.0, 0.0, 0.0) + vec3(0.0, 0.0, 0.0) + vec3(0.0, 0.0, 0.0));\n\t\n\t// /MAT/mesh_basic_builder_DOTS/abs1\n\tfloat v_POLY_abs1_val = abs(v_POLY_noise2_noise);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/clamp4\n\tfloat v_POLY_clamp4_val = clamp(v_POLY_noise3_noise, 0.0, 1.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/color_correct1\n\tvec4 v_POLY_color_correct1_out = sRGBToLinear(v_POLY_vec3_to_vec4_1_vec4);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/normalize2\n\tvec3 v_POLY_normalize2_normalized = normalize(v_POLY_add1_sum);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/mult3\n\tfloat v_POLY_mult3_product = (v_POLY_abs1_val * v_POLY_clamp4_val * 1.0 * 1.0 * 1.0 * 1.0 * 1.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/vec4_to_vec3_1\n\tvec3 v_POLY_vec4_to_vec3_1_vec3 = v_POLY_color_correct1_out.xyz;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/distance1\n\tfloat v_POLY_distance1_val = distance(v_POLY_normalize2_normalized, v_POLY_normalize3_normalized);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/substract1\n\tfloat v_POLY_substract1_substract = (v_POLY_distance1_val - v_POLY_param_sparkle_radius_val - 0.0 - 0.0 - 0.0 - 0.0 - 0.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/abs2\n\tfloat v_POLY_abs2_val = abs(v_POLY_substract1_substract);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/compare3\n\tbool v_POLY_compare3_val = (v_POLY_substract1_substract > 0.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/multAdd1\n\tfloat v_POLY_multAdd1_val = (20.0*(v_POLY_abs2_val + 0.0)) + 0.0;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/twoWaySwitch2\n\tfloat v_POLY_twoWaySwitch2_val;\n\tif(v_POLY_compare3_val){\n\tv_POLY_twoWaySwitch2_val = 0.0;\n\t} else {\n\tv_POLY_twoWaySwitch2_val = 1.0;\n\t}\n\t\n\t// /MAT/mesh_basic_builder_DOTS/clamp1\n\tfloat v_POLY_clamp1_val = clamp(v_POLY_multAdd1_val, v_POLY_negate1_val, v_POLY_constant1_val);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/mult2\n\tfloat v_POLY_mult2_product = (v_POLY_twoWaySwitch2_val * v_POLY_mult3_product * 1.0 * 1.0 * 1.0 * 1.0 * 1.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/cos1\n\tfloat v_POLY_cos1_val = cos(v_POLY_clamp1_val);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/clamp3\n\tfloat v_POLY_clamp3_val = clamp(v_POLY_mult2_product, 0.0, 1.9);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/clamp2\n\tfloat v_POLY_clamp2_val = clamp(v_POLY_cos1_val, 0.0, 1.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/mult5\n\tfloat v_POLY_mult5_product = (v_POLY_param_trail_intensity_val * v_POLY_clamp3_val * 1.0 * 1.0 * 1.0 * 1.0 * 1.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/mult4\n\tfloat v_POLY_mult4_product = (v_POLY_clamp2_val * v_POLY_param_sparkle_intensity_val * 1.0 * 1.0 * 1.0 * 1.0 * 1.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/multAdd2\n\tfloat v_POLY_multAdd2_val = (1.0*(v_POLY_mult4_product + 0.0)) + 0.0;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/max1\n\tfloat v_POLY_max1_val = max(v_POLY_mult5_product, v_POLY_multAdd2_val);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/mix2\n\tvec3 v_POLY_mix2_mix = mix(v_POLY_vec4_to_vec3_1_vec3, v_POLY_param_sparkle_color_val, v_POLY_max1_val);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/null_color\n\tvec3 v_POLY_null_color_val = v_POLY_mix2_mix;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/output1\n\tdiffuseColor.xyz = v_POLY_null_color_val;\n\n\n\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tdiffuseColor.a = opacity;\n\n\t#endif\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\n\t#include <logdepthbuf_fragment>\n\n\t// Higher precision equivalent of gl_FragCoord.z. This assumes depthRange has been left to its default values.\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\n\t#elif DEPTH_PACKING == 3201\n\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\n\t#endif\n\n}\n",
				"lights": false
			},
			"customDepthDOFMaterial": {
				"metadata": {
					"version": 4.5,
					"type": "Material",
					"generator": "Material.toJSON"
				},
				"uuid": "F8AE9576-3ADC-40B4-AF80-FDFA42E578EF",
				"type": "ShaderMaterial",
				"depthFunc": 3,
				"depthTest": true,
				"depthWrite": true,
				"stencilWrite": false,
				"stencilWriteMask": 255,
				"stencilFunc": 519,
				"stencilRef": 0,
				"stencilFuncMask": 255,
				"stencilFail": 7680,
				"stencilZFail": 7680,
				"stencilZPass": 7680,
				"glslVersion": null,
				"uniforms": {
					"mNear": {
						"value": 0
					},
					"mFar": {
						"value": 10
					},
					"v_POLY_param1_val": {
						"type": "c",
						"value": 9349810
					},
					"v_POLY_param_sparkle_center_val": {
						"type": "v3",
						"value": [
							1,
							0,
							0
						]
					},
					"v_POLY_param_sparkle_color_val": {
						"type": "c",
						"value": 16711680
					},
					"v_POLY_param_sparkle_radius_val": {
						"value": 0.28
					},
					"v_POLY_param_sparkle_intensity_val": {
						"value": 0.73
					},
					"v_POLY_param_trail_intensity_val": {
						"value": 0.83
					},
					"v_POLY_param_near_val": {
						"value": 0
					},
					"v_POLY_param_far_val": {
						"value": 0.41
					}
				},
				"vertexShader": "#include <common>\n\nvarying float vViewZDepth;\n\n// INSERT DEFINES\n\n\n\n// /MAT/mesh_basic_builder_DOTS/noise1\n// Modulo 289 without a division (only multiplications)\nfloat mod289(float x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n// Modulo 7 without a division\nvec3 mod7(vec3 x) {\n  return x - floor(x * (1.0 / 7.0)) * 7.0;\n}\n\n// Permutation polynomial: (34x^2 + x) mod 289\nfloat permute(float x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\nvec3 permute(vec3 x) {\n  return mod289((34.0 * x + 1.0) * x);\n}\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat taylorInvSqrt(float r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec2 fade(vec2 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\nvec4 fade(vec4 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex \n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n// \n\n\n\nfloat snoise(vec3 v)\n  { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\n\nfloat fbm_snoise_noise1 (in vec3 st) {\n\tfloat value = 0.0;\n\tfloat amplitude = 1.0;\n\tfor (int i = 0; i < 7; i++) {\n\t\tvalue += amplitude * snoise(st);\n\t\tst *= 2.0;\n\t\tamplitude *= 0.5;\n\t}\n\treturn value;\n}\n\n\n// /MAT/mesh_basic_builder_DOTS/vector_align1\n\n\n// https://github.com/mattatz/ShibuyaCrowd/blob/master/source/shaders/common/quaternion.glsl\nvec4 quatMult(vec4 q1, vec4 q2)\n{\n\treturn vec4(\n\tq1.w * q2.x + q1.x * q2.w + q1.z * q2.y - q1.y * q2.z,\n\tq1.w * q2.y + q1.y * q2.w + q1.x * q2.z - q1.z * q2.x,\n\tq1.w * q2.z + q1.z * q2.w + q1.y * q2.x - q1.x * q2.y,\n\tq1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z\n\t);\n}\n// http://glmatrix.net/docs/quat.js.html#line97\n//   let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n\n//   let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n//   out[0] = ax * bw + aw * bx + ay * bz - az * by;\n\n//   out[1] = ay * bw + aw * by + az * bx - ax * bz;\n\n//   out[2] = az * bw + aw * bz + ax * by - ay * bx;\n\n//   out[3] = aw * bw - ax * bx - ay * by - az * bz;\n\n//   return out\n\n\n\n// http://www.neilmendoza.com/glsl-rotation-about-an-arbitrary-axis/\nmat4 rotationMatrix(vec3 axis, float angle)\n{\n\taxis = normalize(axis);\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\n\tfloat oc = 1.0 - c;\n\n \treturn mat4(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s, 0.0, oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s,  0.0, oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c, 0.0, 0.0, 0.0, 0.0, 1.0);\n}\n\n// https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\nvec4 quatFromAxisAngle(vec3 axis, float angle)\n{\n\tvec4 qr;\n\tfloat half_angle = (angle * 0.5); // * 3.14159 / 180.0;\n\tfloat sin_half_angle = sin(half_angle);\n\tqr.x = axis.x * sin_half_angle;\n\tqr.y = axis.y * sin_half_angle;\n\tqr.z = axis.z * sin_half_angle;\n\tqr.w = cos(half_angle);\n\treturn qr;\n}\nvec3 rotateWithAxisAngle(vec3 position, vec3 axis, float angle)\n{\n\tvec4 q = quatFromAxisAngle(axis, angle);\n\tvec3 v = position.xyz;\n\treturn v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\n}\n// vec3 applyQuaternionToVector( vec4 q, vec3 v ){\n// \treturn v + 2.0 * cross( q.xyz, cross( q.xyz, v ) + q.w * v );\n// }\nvec3 rotateWithQuat( vec3 v, vec4 q )\n{\n\t// vec4 qv = multQuat( quat, vec4(vec, 0.0) );\n\t// return multQuat( qv, vec4(-quat.x, -quat.y, -quat.z, quat.w) ).xyz;\n\treturn v + 2.0 * cross( q.xyz, cross( q.xyz, v ) + q.w * v );\n}\n// https://github.com/glslify/glsl-look-at/blob/gh-pages/index.glsl\n// mat3 rotation_matrix(vec3 origin, vec3 target, float roll) {\n// \tvec3 rr = vec3(sin(roll), cos(roll), 0.0);\n// \tvec3 ww = normalize(target - origin);\n// \tvec3 uu = normalize(cross(ww, rr));\n// \tvec3 vv = normalize(cross(uu, ww));\n\n// \treturn mat3(uu, vv, ww);\n// }\n// mat3 rotation_matrix(vec3 target, float roll) {\n// \tvec3 rr = vec3(sin(roll), cos(roll), 0.0);\n// \tvec3 ww = normalize(target);\n// \tvec3 uu = normalize(cross(ww, rr));\n// \tvec3 vv = normalize(cross(uu, ww));\n\n// \treturn mat3(uu, vv, ww);\n// }\n\nfloat vectorAngle(vec3 start, vec3 dest){\n\tstart = normalize(start);\n\tdest = normalize(dest);\n\n\tfloat cosTheta = dot(start, dest);\n\tvec3 c1 = cross(start, dest);\n\t// We use the dot product of the cross with the Y axis.\n\t// This is a little arbitrary, but can still give a good sense of direction\n\tvec3 y_axis = vec3(0.0, 1.0, 0.0);\n\tfloat d1 = dot(c1, y_axis);\n\tfloat angle = acos(cosTheta) * sign(d1);\n\treturn angle;\n}\n\n// http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#i-need-an-equivalent-of-glulookat-how-do-i-orient-an-object-towards-a-point-\nvec4 vectorAlign(vec3 start, vec3 dest){\n\tstart = normalize(start);\n\tdest = normalize(dest);\n\n\tfloat cosTheta = dot(start, dest);\n\tvec3 axis;\n\n\t// if (cosTheta < -1 + 0.001f){\n\t// \t// special case when vectors in opposite directions:\n\t// \t// there is no \"ideal\" rotation axis\n\t// \t// So guess one; any will do as long as it's perpendicular to start\n\t// \taxis = cross(vec3(0.0f, 0.0f, 1.0f), start);\n\t// \tif (length2(axis) < 0.01 ) // bad luck, they were parallel, try again!\n\t// \t\taxis = cross(vec3(1.0f, 0.0f, 0.0f), start);\n\n\t// \taxis = normalize(axis);\n\t// \treturn gtx::quaternion::angleAxis(glm::radians(180.0f), axis);\n\t// }\n\tif(cosTheta > (1.0 - 0.0001) || cosTheta < (-1.0 + 0.0001) ){\n\t\taxis = normalize(cross(start, vec3(0.0, 1.0, 0.0)));\n\t\tif (length(axis) < 0.001 ){ // bad luck, they were parallel, try again!\n\t\t\taxis = normalize(cross(start, vec3(1.0, 0.0, 0.0)));\n\t\t}\n\t} else {\n\t\taxis = normalize(cross(start, dest));\n\t}\n\n\tfloat angle = acos(cosTheta);\n\n\treturn quatFromAxisAngle(axis, angle);\n}\nvec4 vectorAlignWithUp(vec3 start, vec3 dest, vec3 up){\n\tvec4 rot1 = vectorAlign(start, dest);\n\tup = normalize(up);\n\n\t// Recompute desiredUp so that it's perpendicular to the direction\n\t// You can skip that part if you really want to force desiredUp\n\t// vec3 right = normalize(cross(dest, up));\n\t// up = normalize(cross(right, dest));\n\n\t// Because of the 1rst rotation, the up is probably completely screwed up.\n\t// Find the rotation between the \"up\" of the rotated object, and the desired up\n\tvec3 newUp = rotateWithQuat(vec3(0.0, 1.0, 0.0), rot1);//rot1 * vec3(0.0, 1.0, 0.0);\n\tvec4 rot2 = vectorAlign(up, newUp);\n\n\t// return rot1;\n\treturn rot2;\n\t// return multQuat(rot1, rot2);\n\t// return rot2 * rot1;\n\n}\n\n// https://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\nfloat quatToAngle(vec4 q){\n\treturn 2.0 * acos(q.w);\n}\nvec3 quatToAxis(vec4 q){\n\treturn vec3(\n\t\tq.x / sqrt(1.0-q.w*q.w),\n\t\tq.y / sqrt(1.0-q.w*q.w),\n\t\tq.z / sqrt(1.0-q.w*q.w)\n\t);\n}\n\nvec4 align(vec3 dir, vec3 up){\n\tvec3 start_dir = vec3(0.0, 0.0, 1.0);\n\tvec3 start_up = vec3(0.0, 1.0, 0.0);\n\tvec4 rot1 = vectorAlign(start_dir, dir);\n\tup = normalize(up);\n\n\t// Recompute desiredUp so that it's perpendicular to the direction\n\t// You can skip that part if you really want to force desiredUp\n\tvec3 right = normalize(cross(dir, up));\n\tif(length(right)<0.001){\n\t\tright = vec3(1.0, 0.0, 0.0);\n\t}\n\tup = normalize(cross(right, dir));\n\n\t// Because of the 1rst rotation, the up is probably completely screwed up.\n\t// Find the rotation between the \"up\" of the rotated object, and the desired up\n\tvec3 newUp = rotateWithQuat(start_up, rot1);//rot1 * vec3(0.0, 1.0, 0.0);\n\tvec4 rot2 = vectorAlign(normalize(newUp), up);\n\n\t// return rot1;\n\treturn quatMult(rot1, rot2);\n\t// return rot2 * rot1;\n\n}\n\n\n\n\n\n\n\n// /MAT/mesh_basic_builder_DOTS/param_sparkle_center\nuniform vec3 v_POLY_param_sparkle_center_val;\n\n// /MAT/mesh_basic_builder_DOTS/param_sparkle_radius\nuniform float v_POLY_param_sparkle_radius_val;\n\n// /MAT/mesh_basic_builder_DOTS/param_sparkle_intensity\nuniform float v_POLY_param_sparkle_intensity_val;\n\n// /MAT/mesh_basic_builder_DOTS/attribute4\nvarying vec3 varying_v_POLY_attribute4_val;\n\n// /MAT/mesh_basic_builder_DOTS/varyingWrite1\nvarying vec4 varying_mvPosition;\n\n// /MAT/mesh_basic_builder_DOTS/attribute4\nattribute vec3 instancePosition;\n\n// /MAT/mesh_basic_builder_DOTS/attribute2\nattribute float land;\n\n\n\n\n\n\n\nvoid main() {\n\n\t// INSERT BODY\n\n\n\n\t// /MAT/mesh_basic_builder_DOTS/attribute4\n\tvec3 v_POLY_attribute4_val = instancePosition;\n\tvarying_v_POLY_attribute4_val = vec3(instancePosition);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/constant1\n\tfloat v_POLY_constant1_val = 1.8;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/attribute3\n\tvec3 v_POLY_attribute3_val = instancePosition;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/attribute2\n\tfloat v_POLY_attribute2_val = land;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/constant_size_sea\n\tfloat v_POLY_constant_size_sea_val = 0.24;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/constant_size_land\n\tfloat v_POLY_constant_size_land_val = 0.7;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/noise1\n\tfloat v_POLY_noise1_noisex = (vec3(0.030000000000000013, 0.030000000000000013, 0.030000000000000013)*fbm_snoise_noise1((v_POLY_attribute4_val*vec3(8.5, 8.5, 8.5))+(vec3(0.0, -0.1, 0.0)+vec3(0.0, 0.0, 0.0)))).x;\n\tfloat v_POLY_noise1_noisey = (vec3(0.030000000000000013, 0.030000000000000013, 0.030000000000000013)*fbm_snoise_noise1((v_POLY_attribute4_val*vec3(8.5, 8.5, 8.5))+(vec3(0.0, -0.1, 0.0)+vec3(1000.0, 1000.0, 1000.0)))).y;\n\tfloat v_POLY_noise1_noisez = (vec3(0.030000000000000013, 0.030000000000000013, 0.030000000000000013)*fbm_snoise_noise1((v_POLY_attribute4_val*vec3(8.5, 8.5, 8.5))+(vec3(0.0, -0.1, 0.0)+vec3(2000.0, 2000.0, 2000.0)))).z;\n\tvec3 v_POLY_noise1_noise = vec3(v_POLY_noise1_noisex, v_POLY_noise1_noisey, v_POLY_noise1_noisez);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/normalize3\n\tvec3 v_POLY_normalize3_normalized = normalize(v_POLY_param_sparkle_center_val);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/negate1\n\tfloat v_POLY_negate1_val = -1.0 * v_POLY_constant1_val;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/normalize1\n\tvec3 v_POLY_normalize1_normalized = normalize(v_POLY_attribute3_val);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/compare1\n\tbool v_POLY_compare1_val = (v_POLY_attribute2_val < 0.5);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/add1\n\tvec3 v_POLY_add1_sum = (v_POLY_attribute4_val + v_POLY_noise1_noise + vec3(0.0, 0.0, 0.0) + vec3(0.0, 0.0, 0.0) + vec3(0.0, 0.0, 0.0) + vec3(0.0, 0.0, 0.0) + vec3(0.0, 0.0, 0.0));\n\t\n\t// /MAT/mesh_basic_builder_DOTS/vector_align1\n\tvec4 v_POLY_vector_align1_val = vectorAlignWithUp(vec3(0.0, 1.0, 0.0), v_POLY_normalize1_normalized, vec3(0.0, 0.0, 1.0));\n\t\n\t// /MAT/mesh_basic_builder_DOTS/twoWaySwitch1\n\tfloat v_POLY_twoWaySwitch1_val;\n\tif(v_POLY_compare1_val){\n\tv_POLY_twoWaySwitch1_val = v_POLY_constant_size_sea_val;\n\t} else {\n\tv_POLY_twoWaySwitch1_val = v_POLY_constant_size_land_val;\n\t}\n\t\n\t// /MAT/mesh_basic_builder_DOTS/normalize2\n\tvec3 v_POLY_normalize2_normalized = normalize(v_POLY_add1_sum);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/float_to_vec3_1\n\tvec3 v_POLY_float_to_vec3_1_vec3 = vec3(v_POLY_twoWaySwitch1_val, v_POLY_twoWaySwitch1_val, v_POLY_twoWaySwitch1_val);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/distance1\n\tfloat v_POLY_distance1_val = distance(v_POLY_normalize2_normalized, v_POLY_normalize3_normalized);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/substract1\n\tfloat v_POLY_substract1_substract = (v_POLY_distance1_val - v_POLY_param_sparkle_radius_val - 0.0 - 0.0 - 0.0 - 0.0 - 0.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/abs2\n\tfloat v_POLY_abs2_val = abs(v_POLY_substract1_substract);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/multAdd1\n\tfloat v_POLY_multAdd1_val = (20.0*(v_POLY_abs2_val + 0.0)) + 0.0;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/clamp1\n\tfloat v_POLY_clamp1_val = clamp(v_POLY_multAdd1_val, v_POLY_negate1_val, v_POLY_constant1_val);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/cos1\n\tfloat v_POLY_cos1_val = cos(v_POLY_clamp1_val);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/clamp2\n\tfloat v_POLY_clamp2_val = clamp(v_POLY_cos1_val, 0.0, 1.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/mult4\n\tfloat v_POLY_mult4_product = (v_POLY_clamp2_val * v_POLY_param_sparkle_intensity_val * 1.0 * 1.0 * 1.0 * 1.0 * 1.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/compare2\n\tbool v_POLY_compare2_val = (v_POLY_mult4_product > 0.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/multAdd3\n\tfloat v_POLY_multAdd3_val = (0.04*(v_POLY_mult4_product + 0.0)) + 1.0;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/twoWaySwitch3\n\tfloat v_POLY_twoWaySwitch3_val;\n\tif(v_POLY_compare2_val){\n\tv_POLY_twoWaySwitch3_val = v_POLY_multAdd3_val;\n\t} else {\n\tv_POLY_twoWaySwitch3_val = 1.0;\n\t}\n\t\n\t// /MAT/mesh_basic_builder_DOTS/mult1\n\tvec3 v_POLY_mult1_product = (v_POLY_twoWaySwitch3_val * v_POLY_attribute3_val);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/instance_transform1\n\tvec3 v_POLY_instance_transform1_position = vec3(position);\n\tv_POLY_instance_transform1_position *= v_POLY_float_to_vec3_1_vec3;\n\tv_POLY_instance_transform1_position = rotateWithQuat( v_POLY_instance_transform1_position, v_POLY_vector_align1_val );\n\tv_POLY_instance_transform1_position += v_POLY_mult1_product;\n\tvec3 v_POLY_instance_transform1_normal = vec3(normal);\n\tv_POLY_instance_transform1_normal = rotateWithQuat( v_POLY_instance_transform1_normal, v_POLY_vector_align1_val );\n\t\n\t// /MAT/mesh_basic_builder_DOTS/output1\n\tvec3 transformed = v_POLY_instance_transform1_position;\n\tvec3 objectNormal = v_POLY_instance_transform1_normal;\n\t\n\t// /MAT/mesh_basic_builder_DOTS/model_view_matrix_mult1\n\tvec4 v_POLY_model_view_matrix_mult1_mvMult = modelViewMatrix * vec4(v_POLY_instance_transform1_position, 1.0);\n\t\n\t// /MAT/mesh_basic_builder_DOTS/varyingWrite1\n\tvarying_mvPosition = v_POLY_model_view_matrix_mult1_mvMult;\n\n\n\n\n\n\t#include <project_vertex>\n\n\tvViewZDepth = - mvPosition.z;\n}",
				"fragmentShader": "uniform float mNear;\nuniform float mFar;\n\nvarying float vViewZDepth;\n\nvoid main() {\n\n\tfloat color = 1.0 - smoothstep( mNear, mFar, vViewZDepth );\n\tgl_FragColor = vec4( vec3( color ), 1.0 );\n\n}\n",
				"lights": false
			}
		}
	}
}